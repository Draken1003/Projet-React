{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst {\n  createChannel\n} = require('../../util/Channels');\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    let channel = client.channels.cache.get(data.id);\n    if (channel) {\n      const old = channel._update(data);\n      if (channel.type !== data.type) {\n        const newChannel = createChannel(this.client, data, channel.guild);\n        if (!newChannel) {\n          this.client.channels.cache.delete(channel.id);\n          return {};\n        }\n        if (channel.isTextBased() && newChannel.isTextBased()) {\n          for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);\n        }\n        channel = newChannel;\n        this.client.channels.cache.set(channel.id, channel);\n      }\n      return {\n        old,\n        updated: channel\n      };\n    } else {\n      client.channels._add(data);\n    }\n    return {};\n  }\n}\nmodule.exports = ChannelUpdateAction;","map":{"version":3,"names":["Action","require","createChannel","ChannelUpdateAction","handle","data","client","channel","channels","cache","get","id","old","_update","type","newChannel","guild","delete","isTextBased","message","messages","set","updated","_add","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/client/actions/ChannelUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { createChannel } = require('../../util/Channels');\n\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    let channel = client.channels.cache.get(data.id);\n\n    if (channel) {\n      const old = channel._update(data);\n\n      if (channel.type !== data.type) {\n        const newChannel = createChannel(this.client, data, channel.guild);\n\n        if (!newChannel) {\n          this.client.channels.cache.delete(channel.id);\n          return {};\n        }\n\n        if (channel.isTextBased() && newChannel.isTextBased()) {\n          for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);\n        }\n\n        channel = newChannel;\n        this.client.channels.cache.set(channel.id, channel);\n      }\n\n      return {\n        old,\n        updated: channel,\n      };\n    } else {\n      client.channels._add(data);\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = ChannelUpdateAction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM;EAAEC;AAAc,CAAC,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAExD,MAAME,mBAAmB,SAASH,MAAM,CAAC;EACvCI,MAAMA,CAACC,IAAI,EAAE;IACX,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAIC,OAAO,GAAGD,MAAM,CAACE,QAAQ,CAACC,KAAK,CAACC,GAAG,CAACL,IAAI,CAACM,EAAE,CAAC;IAEhD,IAAIJ,OAAO,EAAE;MACX,MAAMK,GAAG,GAAGL,OAAO,CAACM,OAAO,CAACR,IAAI,CAAC;MAEjC,IAAIE,OAAO,CAACO,IAAI,KAAKT,IAAI,CAACS,IAAI,EAAE;QAC9B,MAAMC,UAAU,GAAGb,aAAa,CAAC,IAAI,CAACI,MAAM,EAAED,IAAI,EAAEE,OAAO,CAACS,KAAK,CAAC;QAElE,IAAI,CAACD,UAAU,EAAE;UACf,IAAI,CAACT,MAAM,CAACE,QAAQ,CAACC,KAAK,CAACQ,MAAM,CAACV,OAAO,CAACI,EAAE,CAAC;UAC7C,OAAO,CAAC,CAAC;QACX;QAEA,IAAIJ,OAAO,CAACW,WAAW,CAAC,CAAC,IAAIH,UAAU,CAACG,WAAW,CAAC,CAAC,EAAE;UACrD,KAAK,MAAM,CAACP,EAAE,EAAEQ,OAAO,CAAC,IAAIZ,OAAO,CAACa,QAAQ,CAACX,KAAK,EAAEM,UAAU,CAACK,QAAQ,CAACX,KAAK,CAACY,GAAG,CAACV,EAAE,EAAEQ,OAAO,CAAC;QAChG;QAEAZ,OAAO,GAAGQ,UAAU;QACpB,IAAI,CAACT,MAAM,CAACE,QAAQ,CAACC,KAAK,CAACY,GAAG,CAACd,OAAO,CAACI,EAAE,EAAEJ,OAAO,CAAC;MACrD;MAEA,OAAO;QACLK,GAAG;QACHU,OAAO,EAAEf;MACX,CAAC;IACH,CAAC,MAAM;MACLD,MAAM,CAACE,QAAQ,CAACe,IAAI,CAAClB,IAAI,CAAC;IAC5B;IAEA,OAAO,CAAC,CAAC;EACX;AACF;AAEAmB,MAAM,CAACC,OAAO,GAAGtB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}