{"ast":null,"code":"'use strict';\n\nconst {\n  parse\n} = require('node:path');\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  ChannelType,\n  RouteBases,\n  Routes\n} = require('discord-api-types/v10');\nconst {\n  fetch\n} = require('undici');\nconst Colors = require('./Colors');\nconst {\n  DiscordjsError,\n  DiscordjsRangeError,\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst isObject = d => typeof d === 'object' && d !== null;\n\n/**\n * Flatten an object. Any properties that are collections will get converted to an array of keys.\n * @param {Object} obj The object to flatten.\n * @param {...Object<string, boolean|string>} [props] Specific properties to include/exclude.\n * @returns {Object}\n */\nfunction flatten(obj, ...props) {\n  if (!isObject(obj)) return obj;\n  const objProps = Object.keys(obj).filter(k => !k.startsWith('_')).map(k => ({\n    [k]: true\n  }));\n  props = objProps.length ? Object.assign(...objProps, ...props) : Object.assign({}, ...props);\n  const out = {};\n  for (let [prop, newProp] of Object.entries(props)) {\n    if (!newProp) continue;\n    newProp = newProp === true ? prop : newProp;\n    const element = obj[prop];\n    const elemIsObj = isObject(element);\n    const valueOf = elemIsObj && typeof element.valueOf === 'function' ? element.valueOf() : null;\n    const hasToJSON = elemIsObj && typeof element.toJSON === 'function';\n\n    // If it's a Collection, make the array of keys\n    if (element instanceof Collection) out[newProp] = Array.from(element.keys());\n    // If the valueOf is a Collection, use its array of keys\n    else if (valueOf instanceof Collection) out[newProp] = Array.from(valueOf.keys());\n    // If it's an array, call toJSON function on each element if present, otherwise flatten each element\n    else if (Array.isArray(element)) out[newProp] = element.map(e => e.toJSON?.() ?? flatten(e));\n    // If it's an object with a primitive `valueOf`, use that value\n    else if (typeof valueOf !== 'object') out[newProp] = valueOf;\n    // If it's an object with a toJSON function, use the return value of it\n    else if (hasToJSON) out[newProp] = element.toJSON();\n    // If element is an object, use the flattened version of it\n    else if (typeof element === 'object') out[newProp] = flatten(element);\n    // If it's a primitive\n    else if (!elemIsObj) out[newProp] = element;\n  }\n  return out;\n}\n\n/**\n * @typedef {Object} FetchRecommendedShardCountOptions\n * @property {number} [guildsPerShard=1000] Number of guilds assigned per shard\n * @property {number} [multipleOf=1] The multiple the shard count should round up to. (16 for large bot sharding)\n */\n\n/**\n * Gets the recommended shard count from Discord.\n * @param {string} token Discord auth token\n * @param {FetchRecommendedShardCountOptions} [options] Options for fetching the recommended shard count\n * @returns {Promise<number>} The recommended number of shards\n */\nasync function fetchRecommendedShardCount(token, {\n  guildsPerShard = 1_000,\n  multipleOf = 1\n} = {}) {\n  if (!token) throw new DiscordjsError(ErrorCodes.TokenMissing);\n  const response = await fetch(RouteBases.api + Routes.gatewayBot(), {\n    method: 'GET',\n    headers: {\n      Authorization: `Bot ${token.replace(/^Bot\\s*/i, '')}`\n    }\n  });\n  if (!response.ok) {\n    if (response.status === 401) throw new DiscordjsError(ErrorCodes.TokenInvalid);\n    throw response;\n  }\n  const {\n    shards\n  } = await response.json();\n  return Math.ceil(shards * (1_000 / guildsPerShard) / multipleOf) * multipleOf;\n}\n\n/**\n * Parses emoji info out of a string. The string must be one of:\n * * A UTF-8 emoji (no id)\n * * A URL-encoded UTF-8 emoji (no id)\n * * A Discord custom emoji (`<:name:id>` or `<a:name:id>`)\n * @param {string} text Emoji string to parse\n * @returns {APIEmoji} Object with `animated`, `name`, and `id` properties\n */\nfunction parseEmoji(text) {\n  if (text.includes('%')) text = decodeURIComponent(text);\n  if (!text.includes(':')) return {\n    animated: false,\n    name: text,\n    id: undefined\n  };\n  const match = text.match(/<?(?:(a):)?(\\w{2,32}):(\\d{17,19})?>?/);\n  return match && {\n    animated: Boolean(match[1]),\n    name: match[2],\n    id: match[3]\n  };\n}\n\n/**\n * Resolves a partial emoji object from an {@link EmojiIdentifierResolvable}, without checking a Client.\n * @param {EmojiIdentifierResolvable} emoji Emoji identifier to resolve\n * @returns {?RawEmoji}\n * @private\n */\nfunction resolvePartialEmoji(emoji) {\n  if (!emoji) return null;\n  if (typeof emoji === 'string') return /^\\d{17,19}$/.test(emoji) ? {\n    id: emoji\n  } : parseEmoji(emoji);\n  const {\n    id,\n    name,\n    animated\n  } = emoji;\n  if (!id && !name) return null;\n  return {\n    id,\n    name,\n    animated: Boolean(animated)\n  };\n}\n\n/**\n * Sets default properties on an object that aren't already specified.\n * @param {Object} def Default properties\n * @param {Object} given Object to assign defaults to\n * @returns {Object}\n * @private\n */\nfunction mergeDefault(def, given) {\n  if (!given) return def;\n  for (const key in def) {\n    if (!Object.hasOwn(given, key) || given[key] === undefined) {\n      given[key] = def[key];\n    } else if (given[key] === Object(given[key])) {\n      given[key] = mergeDefault(def[key], given[key]);\n    }\n  }\n  return given;\n}\n\n/**\n * Options used to make an error object.\n * @typedef {Object} MakeErrorOptions\n * @property {string} name Error type\n * @property {string} message Message for the error\n * @property {string} stack Stack for the error\n */\n\n/**\n * Makes an Error from a plain info object.\n * @param {MakeErrorOptions} obj Error info\n * @returns {Error}\n * @private\n */\nfunction makeError(obj) {\n  const err = new Error(obj.message);\n  err.name = obj.name;\n  err.stack = obj.stack;\n  return err;\n}\n\n/**\n * Makes a plain error info object from an Error.\n * @param {Error} err Error to get info from\n * @returns {MakeErrorOptions}\n * @private\n */\nfunction makePlainError(err) {\n  return {\n    name: err.name,\n    message: err.message,\n    stack: err.stack\n  };\n}\nconst TextSortableGroupTypes = [ChannelType.GuildText, ChannelType.GuildAnnouncement, ChannelType.GuildForum];\nconst VoiceSortableGroupTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];\nconst CategorySortableGroupTypes = [ChannelType.GuildCategory];\n\n/**\n * Gets an array of the channel types that can be moved in the channel group. For example, a GuildText channel would\n * return an array containing the types that can be ordered within the text channels (always at the top), and a voice\n * channel would return an array containing the types that can be ordered within the voice channels (always at the\n * bottom).\n * @param {ChannelType} type The type of the channel\n * @returns {ChannelType[]}\n * @private\n */\nfunction getSortableGroupTypes(type) {\n  switch (type) {\n    case ChannelType.GuildText:\n    case ChannelType.GuildAnnouncement:\n    case ChannelType.GuildForum:\n      return TextSortableGroupTypes;\n    case ChannelType.GuildVoice:\n    case ChannelType.GuildStageVoice:\n      return VoiceSortableGroupTypes;\n    case ChannelType.GuildCategory:\n      return CategorySortableGroupTypes;\n    default:\n      return [type];\n  }\n}\n\n/**\n * Moves an element in an array *in place*.\n * @param {Array<*>} array Array to modify\n * @param {*} element Element to move\n * @param {number} newIndex Index or offset to move the element to\n * @param {boolean} [offset=false] Move the element by an offset amount rather than to a set index\n * @returns {number}\n * @private\n */\nfunction moveElementInArray(array, element, newIndex, offset = false) {\n  const index = array.indexOf(element);\n  newIndex = (offset ? index : 0) + newIndex;\n  if (newIndex > -1 && newIndex < array.length) {\n    const removedElement = array.splice(index, 1)[0];\n    array.splice(newIndex, 0, removedElement);\n  }\n  return array.indexOf(element);\n}\n\n/**\n * Verifies the provided data is a string, otherwise throws provided error.\n * @param {string} data The string resolvable to resolve\n * @param {Function} [error] The Error constructor to instantiate. Defaults to Error\n * @param {string} [errorMessage] The error message to throw with. Defaults to \"Expected string, got <data> instead.\"\n * @param {boolean} [allowEmpty=true] Whether an empty string should be allowed\n * @returns {string}\n */\nfunction verifyString(data, error = Error, errorMessage = `Expected a string, got ${data} instead.`, allowEmpty = true) {\n  if (typeof data !== 'string') throw new error(errorMessage);\n  if (!allowEmpty && data.length === 0) throw new error(errorMessage);\n  return data;\n}\n\n/**\n * Can be a number, hex string, an RGB array like:\n * ```js\n * [255, 0, 255] // purple\n * ```\n * or one of the following strings:\n * - `Default`\n * - `White`\n * - `Aqua`\n * - `Green`\n * - `Blue`\n * - `Yellow`\n * - `Purple`\n * - `LuminousVividPink`\n * - `Fuchsia`\n * - `Gold`\n * - `Orange`\n * - `Red`\n * - `Grey`\n * - `Navy`\n * - `DarkAqua`\n * - `DarkGreen`\n * - `DarkBlue`\n * - `DarkPurple`\n * - `DarkVividPink`\n * - `DarkGold`\n * - `DarkOrange`\n * - `DarkRed`\n * - `DarkGrey`\n * - `DarkerGrey`\n * - `LightGrey`\n * - `DarkNavy`\n * - `Blurple`\n * - `Greyple`\n * - `DarkButNotBlack`\n * - `NotQuiteBlack`\n * - `Random`\n * @typedef {string|number|number[]} ColorResolvable\n */\n\n/**\n * Resolves a ColorResolvable into a color number.\n * @param {ColorResolvable} color Color to resolve\n * @returns {number} A color\n */\nfunction resolveColor(color) {\n  if (typeof color === 'string') {\n    if (color === 'Random') return Math.floor(Math.random() * (0xffffff + 1));\n    if (color === 'Default') return 0;\n    if (/^#?[\\da-f]{6}$/i.test(color)) return parseInt(color.replace('#', ''), 16);\n    color = Colors[color];\n  } else if (Array.isArray(color)) {\n    color = (color[0] << 16) + (color[1] << 8) + color[2];\n  }\n  if (color < 0 || color > 0xffffff) throw new DiscordjsRangeError(ErrorCodes.ColorRange);\n  if (typeof color !== 'number' || Number.isNaN(color)) throw new DiscordjsTypeError(ErrorCodes.ColorConvert);\n  return color;\n}\n\n/**\n * Sorts by Discord's position and id.\n * @param {Collection} collection Collection of objects to sort\n * @returns {Collection}\n */\nfunction discordSort(collection) {\n  const isGuildChannel = collection.first() instanceof GuildChannel;\n  return collection.sorted(isGuildChannel ? (a, b) => a.rawPosition - b.rawPosition || Number(BigInt(a.id) - BigInt(b.id)) : (a, b) => a.rawPosition - b.rawPosition || Number(BigInt(b.id) - BigInt(a.id)));\n}\n\n/**\n * Sets the position of a Channel or Role.\n * @param {BaseChannel|Role} item Object to set the position of\n * @param {number} position New position for the object\n * @param {boolean} relative Whether `position` is relative to its current position\n * @param {Collection<string, BaseChannel|Role>} sorted A collection of the objects sorted properly\n * @param {Client} client The client to use to patch the data\n * @param {string} route Route to call PATCH on\n * @param {string} [reason] Reason for the change\n * @returns {Promise<BaseChannel[]|Role[]>} Updated item list, with `id` and `position` properties\n * @private\n */\nasync function setPosition(item, position, relative, sorted, client, route, reason) {\n  let updatedItems = [...sorted.values()];\n  moveElementInArray(updatedItems, item, position, relative);\n  updatedItems = updatedItems.map((r, i) => ({\n    id: r.id,\n    position: i\n  }));\n  await client.rest.patch(route, {\n    body: updatedItems,\n    reason\n  });\n  return updatedItems;\n}\n\n/**\n * Alternative to Node's `path.basename`, removing query string after the extension if it exists.\n * @param {string} path Path to get the basename of\n * @param {string} [ext] File extension to remove\n * @returns {string} Basename of the path\n * @private\n */\nfunction basename(path, ext) {\n  const res = parse(path);\n  return ext && res.ext.startsWith(ext) ? res.name : res.base.split('?')[0];\n}\n\n/**\n * The content to have all mentions replaced by the equivalent text.\n * @param {string} str The string to be converted\n * @param {TextBasedChannels} channel The channel the string was sent in\n * @returns {string}\n */\nfunction cleanContent(str, channel) {\n  return str.replaceAll(/<(@[!&]?|#)(\\d{17,19})>/g, (match, type, id) => {\n    switch (type) {\n      case '@':\n      case '@!':\n        {\n          const member = channel.guild?.members.cache.get(id);\n          if (member) {\n            return `@${member.displayName}`;\n          }\n          const user = channel.client.users.cache.get(id);\n          return user ? `@${user.username}` : match;\n        }\n      case '@&':\n        {\n          if (channel.type === ChannelType.DM) return match;\n          const role = channel.guild.roles.cache.get(id);\n          return role ? `@${role.name}` : match;\n        }\n      case '#':\n        {\n          const mentionedChannel = channel.client.channels.cache.get(id);\n          return mentionedChannel ? `#${mentionedChannel.name}` : match;\n        }\n      default:\n        {\n          return match;\n        }\n    }\n  });\n}\n\n/**\n * The content to put in a code block with all code block fences replaced by the equivalent backticks.\n * @param {string} text The string to be converted\n * @returns {string}\n */\nfunction cleanCodeBlockContent(text) {\n  return text.replaceAll('```', '`\\u200b``');\n}\n\n/**\n * Parses a webhook URL for the id and token.\n * @param {string} url The URL to parse\n * @returns {?WebhookClientDataIdWithToken} `null` if the URL is invalid, otherwise the id and the token\n */\nfunction parseWebhookURL(url) {\n  const matches = url.match(/https?:\\/\\/(?:ptb\\.|canary\\.)?discord\\.com\\/api(?:\\/v\\d{1,2})?\\/webhooks\\/(\\d{17,19})\\/([\\w-]{68})/i);\n  if (!matches || matches.length <= 2) return null;\n  const [, id, token] = matches;\n  return {\n    id,\n    token\n  };\n}\nmodule.exports = {\n  flatten,\n  fetchRecommendedShardCount,\n  parseEmoji,\n  resolvePartialEmoji,\n  mergeDefault,\n  makeError,\n  makePlainError,\n  getSortableGroupTypes,\n  moveElementInArray,\n  verifyString,\n  resolveColor,\n  discordSort,\n  setPosition,\n  basename,\n  cleanContent,\n  cleanCodeBlockContent,\n  parseWebhookURL\n};\n\n// Fixes Circular\nconst GuildChannel = require('../structures/GuildChannel');","map":{"version":3,"names":["parse","require","Collection","ChannelType","RouteBases","Routes","fetch","Colors","DiscordjsError","DiscordjsRangeError","DiscordjsTypeError","ErrorCodes","isObject","d","flatten","obj","props","objProps","Object","keys","filter","k","startsWith","map","length","assign","out","prop","newProp","entries","element","elemIsObj","valueOf","hasToJSON","toJSON","Array","from","isArray","e","fetchRecommendedShardCount","token","guildsPerShard","multipleOf","TokenMissing","response","api","gatewayBot","method","headers","Authorization","replace","ok","status","TokenInvalid","shards","json","Math","ceil","parseEmoji","text","includes","decodeURIComponent","animated","name","id","undefined","match","Boolean","resolvePartialEmoji","emoji","test","mergeDefault","def","given","key","hasOwn","makeError","err","Error","message","stack","makePlainError","TextSortableGroupTypes","GuildText","GuildAnnouncement","GuildForum","VoiceSortableGroupTypes","GuildVoice","GuildStageVoice","CategorySortableGroupTypes","GuildCategory","getSortableGroupTypes","type","moveElementInArray","array","newIndex","offset","index","indexOf","removedElement","splice","verifyString","data","error","errorMessage","allowEmpty","resolveColor","color","floor","random","parseInt","ColorRange","Number","isNaN","ColorConvert","discordSort","collection","isGuildChannel","first","GuildChannel","sorted","a","b","rawPosition","BigInt","setPosition","item","position","relative","client","route","reason","updatedItems","values","r","i","rest","patch","body","basename","path","ext","res","base","split","cleanContent","str","channel","replaceAll","member","guild","members","cache","get","displayName","user","users","username","DM","role","roles","mentionedChannel","channels","cleanCodeBlockContent","parseWebhookURL","url","matches","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/util/Util.js"],"sourcesContent":["'use strict';\n\nconst { parse } = require('node:path');\nconst { Collection } = require('@discordjs/collection');\nconst { ChannelType, RouteBases, Routes } = require('discord-api-types/v10');\nconst { fetch } = require('undici');\nconst Colors = require('./Colors');\nconst { DiscordjsError, DiscordjsRangeError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst isObject = d => typeof d === 'object' && d !== null;\n\n/**\n * Flatten an object. Any properties that are collections will get converted to an array of keys.\n * @param {Object} obj The object to flatten.\n * @param {...Object<string, boolean|string>} [props] Specific properties to include/exclude.\n * @returns {Object}\n */\nfunction flatten(obj, ...props) {\n  if (!isObject(obj)) return obj;\n\n  const objProps = Object.keys(obj)\n    .filter(k => !k.startsWith('_'))\n    .map(k => ({ [k]: true }));\n\n  props = objProps.length ? Object.assign(...objProps, ...props) : Object.assign({}, ...props);\n\n  const out = {};\n\n  for (let [prop, newProp] of Object.entries(props)) {\n    if (!newProp) continue;\n    newProp = newProp === true ? prop : newProp;\n\n    const element = obj[prop];\n    const elemIsObj = isObject(element);\n    const valueOf = elemIsObj && typeof element.valueOf === 'function' ? element.valueOf() : null;\n    const hasToJSON = elemIsObj && typeof element.toJSON === 'function';\n\n    // If it's a Collection, make the array of keys\n    if (element instanceof Collection) out[newProp] = Array.from(element.keys());\n    // If the valueOf is a Collection, use its array of keys\n    else if (valueOf instanceof Collection) out[newProp] = Array.from(valueOf.keys());\n    // If it's an array, call toJSON function on each element if present, otherwise flatten each element\n    else if (Array.isArray(element)) out[newProp] = element.map(e => e.toJSON?.() ?? flatten(e));\n    // If it's an object with a primitive `valueOf`, use that value\n    else if (typeof valueOf !== 'object') out[newProp] = valueOf;\n    // If it's an object with a toJSON function, use the return value of it\n    else if (hasToJSON) out[newProp] = element.toJSON();\n    // If element is an object, use the flattened version of it\n    else if (typeof element === 'object') out[newProp] = flatten(element);\n    // If it's a primitive\n    else if (!elemIsObj) out[newProp] = element;\n  }\n\n  return out;\n}\n\n/**\n * @typedef {Object} FetchRecommendedShardCountOptions\n * @property {number} [guildsPerShard=1000] Number of guilds assigned per shard\n * @property {number} [multipleOf=1] The multiple the shard count should round up to. (16 for large bot sharding)\n */\n\n/**\n * Gets the recommended shard count from Discord.\n * @param {string} token Discord auth token\n * @param {FetchRecommendedShardCountOptions} [options] Options for fetching the recommended shard count\n * @returns {Promise<number>} The recommended number of shards\n */\nasync function fetchRecommendedShardCount(token, { guildsPerShard = 1_000, multipleOf = 1 } = {}) {\n  if (!token) throw new DiscordjsError(ErrorCodes.TokenMissing);\n  const response = await fetch(RouteBases.api + Routes.gatewayBot(), {\n    method: 'GET',\n    headers: { Authorization: `Bot ${token.replace(/^Bot\\s*/i, '')}` },\n  });\n  if (!response.ok) {\n    if (response.status === 401) throw new DiscordjsError(ErrorCodes.TokenInvalid);\n    throw response;\n  }\n  const { shards } = await response.json();\n  return Math.ceil((shards * (1_000 / guildsPerShard)) / multipleOf) * multipleOf;\n}\n\n/**\n * Parses emoji info out of a string. The string must be one of:\n * * A UTF-8 emoji (no id)\n * * A URL-encoded UTF-8 emoji (no id)\n * * A Discord custom emoji (`<:name:id>` or `<a:name:id>`)\n * @param {string} text Emoji string to parse\n * @returns {APIEmoji} Object with `animated`, `name`, and `id` properties\n */\nfunction parseEmoji(text) {\n  if (text.includes('%')) text = decodeURIComponent(text);\n  if (!text.includes(':')) return { animated: false, name: text, id: undefined };\n  const match = text.match(/<?(?:(a):)?(\\w{2,32}):(\\d{17,19})?>?/);\n  return match && { animated: Boolean(match[1]), name: match[2], id: match[3] };\n}\n\n/**\n * Resolves a partial emoji object from an {@link EmojiIdentifierResolvable}, without checking a Client.\n * @param {EmojiIdentifierResolvable} emoji Emoji identifier to resolve\n * @returns {?RawEmoji}\n * @private\n */\nfunction resolvePartialEmoji(emoji) {\n  if (!emoji) return null;\n  if (typeof emoji === 'string') return /^\\d{17,19}$/.test(emoji) ? { id: emoji } : parseEmoji(emoji);\n  const { id, name, animated } = emoji;\n  if (!id && !name) return null;\n  return { id, name, animated: Boolean(animated) };\n}\n\n/**\n * Sets default properties on an object that aren't already specified.\n * @param {Object} def Default properties\n * @param {Object} given Object to assign defaults to\n * @returns {Object}\n * @private\n */\nfunction mergeDefault(def, given) {\n  if (!given) return def;\n  for (const key in def) {\n    if (!Object.hasOwn(given, key) || given[key] === undefined) {\n      given[key] = def[key];\n    } else if (given[key] === Object(given[key])) {\n      given[key] = mergeDefault(def[key], given[key]);\n    }\n  }\n\n  return given;\n}\n\n/**\n * Options used to make an error object.\n * @typedef {Object} MakeErrorOptions\n * @property {string} name Error type\n * @property {string} message Message for the error\n * @property {string} stack Stack for the error\n */\n\n/**\n * Makes an Error from a plain info object.\n * @param {MakeErrorOptions} obj Error info\n * @returns {Error}\n * @private\n */\nfunction makeError(obj) {\n  const err = new Error(obj.message);\n  err.name = obj.name;\n  err.stack = obj.stack;\n  return err;\n}\n\n/**\n * Makes a plain error info object from an Error.\n * @param {Error} err Error to get info from\n * @returns {MakeErrorOptions}\n * @private\n */\nfunction makePlainError(err) {\n  return {\n    name: err.name,\n    message: err.message,\n    stack: err.stack,\n  };\n}\n\nconst TextSortableGroupTypes = [ChannelType.GuildText, ChannelType.GuildAnnouncement, ChannelType.GuildForum];\nconst VoiceSortableGroupTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];\nconst CategorySortableGroupTypes = [ChannelType.GuildCategory];\n\n/**\n * Gets an array of the channel types that can be moved in the channel group. For example, a GuildText channel would\n * return an array containing the types that can be ordered within the text channels (always at the top), and a voice\n * channel would return an array containing the types that can be ordered within the voice channels (always at the\n * bottom).\n * @param {ChannelType} type The type of the channel\n * @returns {ChannelType[]}\n * @private\n */\nfunction getSortableGroupTypes(type) {\n  switch (type) {\n    case ChannelType.GuildText:\n    case ChannelType.GuildAnnouncement:\n    case ChannelType.GuildForum:\n      return TextSortableGroupTypes;\n    case ChannelType.GuildVoice:\n    case ChannelType.GuildStageVoice:\n      return VoiceSortableGroupTypes;\n    case ChannelType.GuildCategory:\n      return CategorySortableGroupTypes;\n    default:\n      return [type];\n  }\n}\n\n/**\n * Moves an element in an array *in place*.\n * @param {Array<*>} array Array to modify\n * @param {*} element Element to move\n * @param {number} newIndex Index or offset to move the element to\n * @param {boolean} [offset=false] Move the element by an offset amount rather than to a set index\n * @returns {number}\n * @private\n */\nfunction moveElementInArray(array, element, newIndex, offset = false) {\n  const index = array.indexOf(element);\n  newIndex = (offset ? index : 0) + newIndex;\n  if (newIndex > -1 && newIndex < array.length) {\n    const removedElement = array.splice(index, 1)[0];\n    array.splice(newIndex, 0, removedElement);\n  }\n  return array.indexOf(element);\n}\n\n/**\n * Verifies the provided data is a string, otherwise throws provided error.\n * @param {string} data The string resolvable to resolve\n * @param {Function} [error] The Error constructor to instantiate. Defaults to Error\n * @param {string} [errorMessage] The error message to throw with. Defaults to \"Expected string, got <data> instead.\"\n * @param {boolean} [allowEmpty=true] Whether an empty string should be allowed\n * @returns {string}\n */\nfunction verifyString(\n  data,\n  error = Error,\n  errorMessage = `Expected a string, got ${data} instead.`,\n  allowEmpty = true,\n) {\n  if (typeof data !== 'string') throw new error(errorMessage);\n  if (!allowEmpty && data.length === 0) throw new error(errorMessage);\n  return data;\n}\n\n/**\n * Can be a number, hex string, an RGB array like:\n * ```js\n * [255, 0, 255] // purple\n * ```\n * or one of the following strings:\n * - `Default`\n * - `White`\n * - `Aqua`\n * - `Green`\n * - `Blue`\n * - `Yellow`\n * - `Purple`\n * - `LuminousVividPink`\n * - `Fuchsia`\n * - `Gold`\n * - `Orange`\n * - `Red`\n * - `Grey`\n * - `Navy`\n * - `DarkAqua`\n * - `DarkGreen`\n * - `DarkBlue`\n * - `DarkPurple`\n * - `DarkVividPink`\n * - `DarkGold`\n * - `DarkOrange`\n * - `DarkRed`\n * - `DarkGrey`\n * - `DarkerGrey`\n * - `LightGrey`\n * - `DarkNavy`\n * - `Blurple`\n * - `Greyple`\n * - `DarkButNotBlack`\n * - `NotQuiteBlack`\n * - `Random`\n * @typedef {string|number|number[]} ColorResolvable\n */\n\n/**\n * Resolves a ColorResolvable into a color number.\n * @param {ColorResolvable} color Color to resolve\n * @returns {number} A color\n */\nfunction resolveColor(color) {\n  if (typeof color === 'string') {\n    if (color === 'Random') return Math.floor(Math.random() * (0xffffff + 1));\n    if (color === 'Default') return 0;\n    if (/^#?[\\da-f]{6}$/i.test(color)) return parseInt(color.replace('#', ''), 16);\n    color = Colors[color];\n  } else if (Array.isArray(color)) {\n    color = (color[0] << 16) + (color[1] << 8) + color[2];\n  }\n\n  if (color < 0 || color > 0xffffff) throw new DiscordjsRangeError(ErrorCodes.ColorRange);\n  if (typeof color !== 'number' || Number.isNaN(color)) throw new DiscordjsTypeError(ErrorCodes.ColorConvert);\n\n  return color;\n}\n\n/**\n * Sorts by Discord's position and id.\n * @param {Collection} collection Collection of objects to sort\n * @returns {Collection}\n */\nfunction discordSort(collection) {\n  const isGuildChannel = collection.first() instanceof GuildChannel;\n  return collection.sorted(\n    isGuildChannel\n      ? (a, b) => a.rawPosition - b.rawPosition || Number(BigInt(a.id) - BigInt(b.id))\n      : (a, b) => a.rawPosition - b.rawPosition || Number(BigInt(b.id) - BigInt(a.id)),\n  );\n}\n\n/**\n * Sets the position of a Channel or Role.\n * @param {BaseChannel|Role} item Object to set the position of\n * @param {number} position New position for the object\n * @param {boolean} relative Whether `position` is relative to its current position\n * @param {Collection<string, BaseChannel|Role>} sorted A collection of the objects sorted properly\n * @param {Client} client The client to use to patch the data\n * @param {string} route Route to call PATCH on\n * @param {string} [reason] Reason for the change\n * @returns {Promise<BaseChannel[]|Role[]>} Updated item list, with `id` and `position` properties\n * @private\n */\nasync function setPosition(item, position, relative, sorted, client, route, reason) {\n  let updatedItems = [...sorted.values()];\n  moveElementInArray(updatedItems, item, position, relative);\n  updatedItems = updatedItems.map((r, i) => ({ id: r.id, position: i }));\n  await client.rest.patch(route, { body: updatedItems, reason });\n  return updatedItems;\n}\n\n/**\n * Alternative to Node's `path.basename`, removing query string after the extension if it exists.\n * @param {string} path Path to get the basename of\n * @param {string} [ext] File extension to remove\n * @returns {string} Basename of the path\n * @private\n */\nfunction basename(path, ext) {\n  const res = parse(path);\n  return ext && res.ext.startsWith(ext) ? res.name : res.base.split('?')[0];\n}\n\n/**\n * The content to have all mentions replaced by the equivalent text.\n * @param {string} str The string to be converted\n * @param {TextBasedChannels} channel The channel the string was sent in\n * @returns {string}\n */\nfunction cleanContent(str, channel) {\n  return str.replaceAll(/<(@[!&]?|#)(\\d{17,19})>/g, (match, type, id) => {\n    switch (type) {\n      case '@':\n      case '@!': {\n        const member = channel.guild?.members.cache.get(id);\n        if (member) {\n          return `@${member.displayName}`;\n        }\n\n        const user = channel.client.users.cache.get(id);\n        return user ? `@${user.username}` : match;\n      }\n      case '@&': {\n        if (channel.type === ChannelType.DM) return match;\n        const role = channel.guild.roles.cache.get(id);\n        return role ? `@${role.name}` : match;\n      }\n      case '#': {\n        const mentionedChannel = channel.client.channels.cache.get(id);\n        return mentionedChannel ? `#${mentionedChannel.name}` : match;\n      }\n      default: {\n        return match;\n      }\n    }\n  });\n}\n\n/**\n * The content to put in a code block with all code block fences replaced by the equivalent backticks.\n * @param {string} text The string to be converted\n * @returns {string}\n */\nfunction cleanCodeBlockContent(text) {\n  return text.replaceAll('```', '`\\u200b``');\n}\n\n/**\n * Parses a webhook URL for the id and token.\n * @param {string} url The URL to parse\n * @returns {?WebhookClientDataIdWithToken} `null` if the URL is invalid, otherwise the id and the token\n */\nfunction parseWebhookURL(url) {\n  const matches = url.match(\n    /https?:\\/\\/(?:ptb\\.|canary\\.)?discord\\.com\\/api(?:\\/v\\d{1,2})?\\/webhooks\\/(\\d{17,19})\\/([\\w-]{68})/i,\n  );\n\n  if (!matches || matches.length <= 2) return null;\n\n  const [, id, token] = matches;\n  return {\n    id,\n    token,\n  };\n}\n\nmodule.exports = {\n  flatten,\n  fetchRecommendedShardCount,\n  parseEmoji,\n  resolvePartialEmoji,\n  mergeDefault,\n  makeError,\n  makePlainError,\n  getSortableGroupTypes,\n  moveElementInArray,\n  verifyString,\n  resolveColor,\n  discordSort,\n  setPosition,\n  basename,\n  cleanContent,\n  cleanCodeBlockContent,\n  parseWebhookURL,\n};\n\n// Fixes Circular\nconst GuildChannel = require('../structures/GuildChannel');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}