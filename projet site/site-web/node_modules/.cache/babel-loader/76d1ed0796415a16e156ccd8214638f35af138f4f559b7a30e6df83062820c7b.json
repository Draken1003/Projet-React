{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst Base = require('./Base');\nconst {\n  _transformAPIAutoModerationAction\n} = require('../util/Transformers');\n\n/**\n * Represents an auto moderation rule.\n * @extends {Base}\n */\nclass AutoModerationRule extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The id of this auto moderation rule.\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The guild this auto moderation rule is for.\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The user that created this auto moderation rule.\n     * @type {Snowflake}\n     */\n    this.creatorId = data.creator_id;\n\n    /**\n     * The trigger type of this auto moderation rule.\n     * @type {AutoModerationRuleTriggerType}\n     */\n    this.triggerType = data.trigger_type;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('name' in data) {\n      /**\n       * The name of this auto moderation rule.\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n    if ('event_type' in data) {\n      /**\n       * The event type of this auto moderation rule.\n       * @type {AutoModerationRuleEventType}\n       */\n      this.eventType = data.event_type;\n    }\n    if ('trigger_metadata' in data) {\n      /**\n       * Additional data used to determine whether an auto moderation rule should be triggered.\n       * @typedef {Object} AutoModerationTriggerMetadata\n       * @property {string[]} keywordFilter The substrings that will be searched for in the content\n       * @property {string[]} regexPatterns The regular expression patterns which will be matched against the content\n       * <info>Only Rust-flavored regular expressions are supported.</info>\n       * @property {AutoModerationRuleKeywordPresetType[]} presets\n       * The internally pre-defined wordsets which will be searched for in the content\n       * @property {string[]} allowList The substrings that will be exempt from triggering\n       * {@link AutoModerationRuleTriggerType.Keyword} and {@link AutoModerationRuleTriggerType.KeywordPreset}\n       * @property {?number} mentionTotalLimit The total number of role & user mentions allowed per message\n       * @property {boolean} mentionRaidProtectionEnabled Whether mention raid protection is enabled\n       */\n\n      /**\n       * The trigger metadata of the rule.\n       * @type {AutoModerationTriggerMetadata}\n       */\n      this.triggerMetadata = {\n        keywordFilter: data.trigger_metadata.keyword_filter ?? [],\n        regexPatterns: data.trigger_metadata.regex_patterns ?? [],\n        presets: data.trigger_metadata.presets ?? [],\n        allowList: data.trigger_metadata.allow_list ?? [],\n        mentionTotalLimit: data.trigger_metadata.mention_total_limit ?? null,\n        mentionRaidProtectionEnabled: data.trigger_metadata.mention_raid_protection_enabled ?? false\n      };\n    }\n    if ('actions' in data) {\n      /**\n       * An object containing information about an auto moderation rule action.\n       * @typedef {Object} AutoModerationAction\n       * @property {AutoModerationActionType} type The type of this auto moderation rule action\n       * @property {AutoModerationActionMetadata} metadata Additional metadata needed during execution\n       */\n\n      /**\n       * Additional data used when an auto moderation rule is executed.\n       * @typedef {Object} AutoModerationActionMetadata\n       * @property {?Snowflake} channelId The id of the channel to which content will be logged\n       * @property {?number} durationSeconds The timeout duration in seconds\n       * @property {?string} customMessage The custom message that is shown whenever a message is blocked\n       */\n\n      /**\n       * The actions of this auto moderation rule.\n       * @type {AutoModerationAction[]}\n       */\n      this.actions = data.actions.map(action => _transformAPIAutoModerationAction(action));\n    }\n    if ('enabled' in data) {\n      /**\n       * Whether this auto moderation rule is enabled.\n       * @type {boolean}\n       */\n      this.enabled = data.enabled;\n    }\n    if ('exempt_roles' in data) {\n      /**\n       * The roles exempt by this auto moderation rule.\n       * @type {Collection<Snowflake, Role>}\n       */\n      this.exemptRoles = new Collection(data.exempt_roles.map(exemptRole => [exemptRole, this.guild.roles.cache.get(exemptRole)]));\n    }\n    if ('exempt_channels' in data) {\n      /**\n       * The channels exempt by this auto moderation rule.\n       * @type {Collection<Snowflake, GuildChannel|ThreadChannel>}\n       */\n      this.exemptChannels = new Collection(data.exempt_channels.map(exemptChannel => [exemptChannel, this.guild.channels.cache.get(exemptChannel)]));\n    }\n  }\n\n  /**\n   * Edits this auto moderation rule.\n   * @param {AutoModerationRuleEditOptions} options Options for editing this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  edit(options) {\n    return this.guild.autoModerationRules.edit(this.id, options);\n  }\n\n  /**\n   * Deletes this auto moderation rule.\n   * @param {string} [reason] The reason for deleting this auto moderation rule\n   * @returns {Promise<void>}\n   */\n  delete(reason) {\n    return this.guild.autoModerationRules.delete(this.id, reason);\n  }\n\n  /**\n   * Sets the name for this auto moderation rule.\n   * @param {string} name The name of this auto moderation rule\n   * @param {string} [reason] The reason for changing the name of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setName(name, reason) {\n    return this.edit({\n      name,\n      reason\n    });\n  }\n\n  /**\n   * Sets the event type for this auto moderation rule.\n   * @param {AutoModerationRuleEventType} eventType The event type of this auto moderation rule\n   * @param {string} [reason] The reason for changing the event type of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setEventType(eventType, reason) {\n    return this.edit({\n      eventType,\n      reason\n    });\n  }\n\n  /**\n   * Sets the keyword filter for this auto moderation rule.\n   * @param {string[]} keywordFilter The keyword filter of this auto moderation rule\n   * @param {string} [reason] The reason for changing the keyword filter of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setKeywordFilter(keywordFilter, reason) {\n    return this.edit({\n      triggerMetadata: {\n        ...this.triggerMetadata,\n        keywordFilter\n      },\n      reason\n    });\n  }\n\n  /**\n   * Sets the regular expression patterns for this auto moderation rule.\n   * @param {string[]} regexPatterns The regular expression patterns of this auto moderation rule\n   * <info>Only Rust-flavored regular expressions are supported.</info>\n   * @param {string} [reason] The reason for changing the regular expression patterns of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setRegexPatterns(regexPatterns, reason) {\n    return this.edit({\n      triggerMetadata: {\n        ...this.triggerMetadata,\n        regexPatterns\n      },\n      reason\n    });\n  }\n\n  /**\n   * Sets the presets for this auto moderation rule.\n   * @param {AutoModerationRuleKeywordPresetType[]} presets The presets of this auto moderation rule\n   * @param {string} [reason] The reason for changing the presets of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setPresets(presets, reason) {\n    return this.edit({\n      triggerMetadata: {\n        ...this.triggerMetadata,\n        presets\n      },\n      reason\n    });\n  }\n\n  /**\n   * Sets the allow list for this auto moderation rule.\n   * @param {string[]} allowList The substrings that will be exempt from triggering\n   * {@link AutoModerationRuleTriggerType.Keyword} and {@link AutoModerationRuleTriggerType.KeywordPreset}\n   * @param {string} [reason] The reason for changing the allow list of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setAllowList(allowList, reason) {\n    return this.edit({\n      triggerMetadata: {\n        ...this.triggerMetadata,\n        allowList\n      },\n      reason\n    });\n  }\n\n  /**\n   * Sets the mention total limit for this auto moderation rule.\n   * @param {number} mentionTotalLimit The total number of unique role and user mentions allowed per message\n   * @param {string} [reason] The reason for changing the mention total limit of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setMentionTotalLimit(mentionTotalLimit, reason) {\n    return this.edit({\n      triggerMetadata: {\n        ...this.triggerMetadata,\n        mentionTotalLimit\n      },\n      reason\n    });\n  }\n\n  /**\n   * Sets whether to enable mention raid protection for this auto moderation rule.\n   * @param {boolean} mentionRaidProtectionEnabled\n   * Whether to enable mention raid protection for this auto moderation rule\n   * @param {string} [reason] The reason for changing the mention raid protection of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setMentionRaidProtectionEnabled(mentionRaidProtectionEnabled, reason) {\n    return this.edit({\n      triggerMetadata: {\n        ...this.triggerMetadata,\n        mentionRaidProtectionEnabled\n      },\n      reason\n    });\n  }\n\n  /**\n   * Sets the actions for this auto moderation rule.\n   * @param {AutoModerationActionOptions[]} actions The actions of this auto moderation rule\n   * @param {string} [reason] The reason for changing the actions of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setActions(actions, reason) {\n    return this.edit({\n      actions,\n      reason\n    });\n  }\n\n  /**\n   * Sets whether this auto moderation rule should be enabled.\n   * @param {boolean} [enabled=true] Whether to enable this auto moderation rule\n   * @param {string} [reason] The reason for enabling or disabling this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setEnabled(enabled = true, reason) {\n    return this.edit({\n      enabled,\n      reason\n    });\n  }\n\n  /**\n   * Sets the exempt roles for this auto moderation rule.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [exemptRoles]\n   * The roles that should not be affected by the auto moderation rule\n   * @param {string} [reason] The reason for changing the exempt roles of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setExemptRoles(exemptRoles, reason) {\n    return this.edit({\n      exemptRoles,\n      reason\n    });\n  }\n\n  /**\n   * Sets the exempt channels for this auto moderation rule.\n   * @param {Collection<Snowflake, GuildChannel|ThreadChannel>|GuildChannelResolvable[]} [exemptChannels]\n   * The channels that should not be affected by the auto moderation rule\n   * @param {string} [reason] The reason for changing the exempt channels of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setExemptChannels(exemptChannels, reason) {\n    return this.edit({\n      exemptChannels,\n      reason\n    });\n  }\n}\nmodule.exports = AutoModerationRule;","map":{"version":3,"names":["Collection","require","Base","_transformAPIAutoModerationAction","AutoModerationRule","constructor","client","data","guild","id","creatorId","creator_id","triggerType","trigger_type","_patch","name","eventType","event_type","triggerMetadata","keywordFilter","trigger_metadata","keyword_filter","regexPatterns","regex_patterns","presets","allowList","allow_list","mentionTotalLimit","mention_total_limit","mentionRaidProtectionEnabled","mention_raid_protection_enabled","actions","map","action","enabled","exemptRoles","exempt_roles","exemptRole","roles","cache","get","exemptChannels","exempt_channels","exemptChannel","channels","edit","options","autoModerationRules","delete","reason","setName","setEventType","setKeywordFilter","setRegexPatterns","setPresets","setAllowList","setMentionTotalLimit","setMentionRaidProtectionEnabled","setActions","setEnabled","setExemptRoles","setExemptChannels","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/AutoModerationRule.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\nconst { _transformAPIAutoModerationAction } = require('../util/Transformers');\n\n/**\n * Represents an auto moderation rule.\n * @extends {Base}\n */\nclass AutoModerationRule extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The id of this auto moderation rule.\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The guild this auto moderation rule is for.\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The user that created this auto moderation rule.\n     * @type {Snowflake}\n     */\n    this.creatorId = data.creator_id;\n\n    /**\n     * The trigger type of this auto moderation rule.\n     * @type {AutoModerationRuleTriggerType}\n     */\n    this.triggerType = data.trigger_type;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('name' in data) {\n      /**\n       * The name of this auto moderation rule.\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('event_type' in data) {\n      /**\n       * The event type of this auto moderation rule.\n       * @type {AutoModerationRuleEventType}\n       */\n      this.eventType = data.event_type;\n    }\n\n    if ('trigger_metadata' in data) {\n      /**\n       * Additional data used to determine whether an auto moderation rule should be triggered.\n       * @typedef {Object} AutoModerationTriggerMetadata\n       * @property {string[]} keywordFilter The substrings that will be searched for in the content\n       * @property {string[]} regexPatterns The regular expression patterns which will be matched against the content\n       * <info>Only Rust-flavored regular expressions are supported.</info>\n       * @property {AutoModerationRuleKeywordPresetType[]} presets\n       * The internally pre-defined wordsets which will be searched for in the content\n       * @property {string[]} allowList The substrings that will be exempt from triggering\n       * {@link AutoModerationRuleTriggerType.Keyword} and {@link AutoModerationRuleTriggerType.KeywordPreset}\n       * @property {?number} mentionTotalLimit The total number of role & user mentions allowed per message\n       * @property {boolean} mentionRaidProtectionEnabled Whether mention raid protection is enabled\n       */\n\n      /**\n       * The trigger metadata of the rule.\n       * @type {AutoModerationTriggerMetadata}\n       */\n      this.triggerMetadata = {\n        keywordFilter: data.trigger_metadata.keyword_filter ?? [],\n        regexPatterns: data.trigger_metadata.regex_patterns ?? [],\n        presets: data.trigger_metadata.presets ?? [],\n        allowList: data.trigger_metadata.allow_list ?? [],\n        mentionTotalLimit: data.trigger_metadata.mention_total_limit ?? null,\n        mentionRaidProtectionEnabled: data.trigger_metadata.mention_raid_protection_enabled ?? false,\n      };\n    }\n\n    if ('actions' in data) {\n      /**\n       * An object containing information about an auto moderation rule action.\n       * @typedef {Object} AutoModerationAction\n       * @property {AutoModerationActionType} type The type of this auto moderation rule action\n       * @property {AutoModerationActionMetadata} metadata Additional metadata needed during execution\n       */\n\n      /**\n       * Additional data used when an auto moderation rule is executed.\n       * @typedef {Object} AutoModerationActionMetadata\n       * @property {?Snowflake} channelId The id of the channel to which content will be logged\n       * @property {?number} durationSeconds The timeout duration in seconds\n       * @property {?string} customMessage The custom message that is shown whenever a message is blocked\n       */\n\n      /**\n       * The actions of this auto moderation rule.\n       * @type {AutoModerationAction[]}\n       */\n      this.actions = data.actions.map(action => _transformAPIAutoModerationAction(action));\n    }\n\n    if ('enabled' in data) {\n      /**\n       * Whether this auto moderation rule is enabled.\n       * @type {boolean}\n       */\n      this.enabled = data.enabled;\n    }\n\n    if ('exempt_roles' in data) {\n      /**\n       * The roles exempt by this auto moderation rule.\n       * @type {Collection<Snowflake, Role>}\n       */\n      this.exemptRoles = new Collection(\n        data.exempt_roles.map(exemptRole => [exemptRole, this.guild.roles.cache.get(exemptRole)]),\n      );\n    }\n\n    if ('exempt_channels' in data) {\n      /**\n       * The channels exempt by this auto moderation rule.\n       * @type {Collection<Snowflake, GuildChannel|ThreadChannel>}\n       */\n      this.exemptChannels = new Collection(\n        data.exempt_channels.map(exemptChannel => [exemptChannel, this.guild.channels.cache.get(exemptChannel)]),\n      );\n    }\n  }\n\n  /**\n   * Edits this auto moderation rule.\n   * @param {AutoModerationRuleEditOptions} options Options for editing this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  edit(options) {\n    return this.guild.autoModerationRules.edit(this.id, options);\n  }\n\n  /**\n   * Deletes this auto moderation rule.\n   * @param {string} [reason] The reason for deleting this auto moderation rule\n   * @returns {Promise<void>}\n   */\n  delete(reason) {\n    return this.guild.autoModerationRules.delete(this.id, reason);\n  }\n\n  /**\n   * Sets the name for this auto moderation rule.\n   * @param {string} name The name of this auto moderation rule\n   * @param {string} [reason] The reason for changing the name of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Sets the event type for this auto moderation rule.\n   * @param {AutoModerationRuleEventType} eventType The event type of this auto moderation rule\n   * @param {string} [reason] The reason for changing the event type of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setEventType(eventType, reason) {\n    return this.edit({ eventType, reason });\n  }\n\n  /**\n   * Sets the keyword filter for this auto moderation rule.\n   * @param {string[]} keywordFilter The keyword filter of this auto moderation rule\n   * @param {string} [reason] The reason for changing the keyword filter of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setKeywordFilter(keywordFilter, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, keywordFilter }, reason });\n  }\n\n  /**\n   * Sets the regular expression patterns for this auto moderation rule.\n   * @param {string[]} regexPatterns The regular expression patterns of this auto moderation rule\n   * <info>Only Rust-flavored regular expressions are supported.</info>\n   * @param {string} [reason] The reason for changing the regular expression patterns of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setRegexPatterns(regexPatterns, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, regexPatterns }, reason });\n  }\n\n  /**\n   * Sets the presets for this auto moderation rule.\n   * @param {AutoModerationRuleKeywordPresetType[]} presets The presets of this auto moderation rule\n   * @param {string} [reason] The reason for changing the presets of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setPresets(presets, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, presets }, reason });\n  }\n\n  /**\n   * Sets the allow list for this auto moderation rule.\n   * @param {string[]} allowList The substrings that will be exempt from triggering\n   * {@link AutoModerationRuleTriggerType.Keyword} and {@link AutoModerationRuleTriggerType.KeywordPreset}\n   * @param {string} [reason] The reason for changing the allow list of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setAllowList(allowList, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, allowList }, reason });\n  }\n\n  /**\n   * Sets the mention total limit for this auto moderation rule.\n   * @param {number} mentionTotalLimit The total number of unique role and user mentions allowed per message\n   * @param {string} [reason] The reason for changing the mention total limit of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setMentionTotalLimit(mentionTotalLimit, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, mentionTotalLimit }, reason });\n  }\n\n  /**\n   * Sets whether to enable mention raid protection for this auto moderation rule.\n   * @param {boolean} mentionRaidProtectionEnabled\n   * Whether to enable mention raid protection for this auto moderation rule\n   * @param {string} [reason] The reason for changing the mention raid protection of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setMentionRaidProtectionEnabled(mentionRaidProtectionEnabled, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, mentionRaidProtectionEnabled }, reason });\n  }\n\n  /**\n   * Sets the actions for this auto moderation rule.\n   * @param {AutoModerationActionOptions[]} actions The actions of this auto moderation rule\n   * @param {string} [reason] The reason for changing the actions of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setActions(actions, reason) {\n    return this.edit({ actions, reason });\n  }\n\n  /**\n   * Sets whether this auto moderation rule should be enabled.\n   * @param {boolean} [enabled=true] Whether to enable this auto moderation rule\n   * @param {string} [reason] The reason for enabling or disabling this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setEnabled(enabled = true, reason) {\n    return this.edit({ enabled, reason });\n  }\n\n  /**\n   * Sets the exempt roles for this auto moderation rule.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [exemptRoles]\n   * The roles that should not be affected by the auto moderation rule\n   * @param {string} [reason] The reason for changing the exempt roles of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setExemptRoles(exemptRoles, reason) {\n    return this.edit({ exemptRoles, reason });\n  }\n\n  /**\n   * Sets the exempt channels for this auto moderation rule.\n   * @param {Collection<Snowflake, GuildChannel|ThreadChannel>|GuildChannelResolvable[]} [exemptChannels]\n   * The channels that should not be affected by the auto moderation rule\n   * @param {string} [reason] The reason for changing the exempt channels of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setExemptChannels(exemptChannels, reason) {\n    return this.edit({ exemptChannels, reason });\n  }\n}\n\nmodule.exports = AutoModerationRule;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}