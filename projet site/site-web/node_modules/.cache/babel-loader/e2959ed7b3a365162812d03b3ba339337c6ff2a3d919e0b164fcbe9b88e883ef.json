{"ast":null,"code":"'use strict';\n\nconst AttachmentFlagsBitField = require('../util/AttachmentFlagsBitField.js');\nconst {\n  basename,\n  flatten\n} = require('../util/Util');\n\n/**\n * @typedef {Object} AttachmentPayload\n * @property {?string} name The name of the attachment\n * @property {Stream|BufferResolvable} attachment The attachment in this payload\n * @property {?string} description The description of the attachment\n */\n\n/**\n * Represents an attachment\n */\nclass Attachment {\n  constructor(data) {\n    this.attachment = data.url;\n    /**\n     * The name of this attachment\n     * @type {string}\n     */\n    this.name = data.filename;\n    this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The attachment's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('size' in data) {\n      /**\n       * The size of this attachment in bytes\n       * @type {number}\n       */\n      this.size = data.size;\n    }\n    if ('url' in data) {\n      /**\n       * The URL to this attachment\n       * @type {string}\n       */\n      this.url = data.url;\n    }\n    if ('proxy_url' in data) {\n      /**\n       * The Proxy URL to this attachment\n       * @type {string}\n       */\n      this.proxyURL = data.proxy_url;\n    }\n    if ('height' in data) {\n      /**\n       * The height of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.height = data.height;\n    } else {\n      this.height ??= null;\n    }\n    if ('width' in data) {\n      /**\n       * The width of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.width = data.width;\n    } else {\n      this.width ??= null;\n    }\n    if ('content_type' in data) {\n      /**\n       * The media type of this attachment\n       * @type {?string}\n       */\n      this.contentType = data.content_type;\n    } else {\n      this.contentType ??= null;\n    }\n    if ('description' in data) {\n      /**\n       * The description (alt text) of this attachment\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    /**\n     * Whether this attachment is ephemeral\n     * @type {boolean}\n     */\n    this.ephemeral = data.ephemeral ?? false;\n    if ('duration_secs' in data) {\n      /**\n       * The duration of this attachment in seconds\n       * <info>This will only be available if the attachment is an audio file.</info>\n       * @type {?number}\n       */\n      this.duration = data.duration_secs;\n    } else {\n      this.duration ??= null;\n    }\n    if ('waveform' in data) {\n      /**\n       * The base64 encoded byte array representing a sampled waveform\n       * <info>This will only be available if the attachment is an audio file.</info>\n       * @type {?string}\n       */\n      this.waveform = data.waveform;\n    } else {\n      this.waveform ??= null;\n    }\n    if ('flags' in data) {\n      /**\n       * The flags of this attachment\n       * @type {Readonly<AttachmentFlagsBitField>}\n       */\n      this.flags = new AttachmentFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new AttachmentFlagsBitField().freeze();\n    }\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return basename(this.url ?? this.name).startsWith('SPOILER_');\n  }\n  toJSON() {\n    return flatten(this);\n  }\n}\nmodule.exports = Attachment;","map":{"version":3,"names":["AttachmentFlagsBitField","require","basename","flatten","Attachment","constructor","data","attachment","url","name","filename","_patch","id","size","proxyURL","proxy_url","height","width","contentType","content_type","description","ephemeral","duration","duration_secs","waveform","flags","freeze","spoiler","startsWith","toJSON","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/Attachment.js"],"sourcesContent":["'use strict';\n\nconst AttachmentFlagsBitField = require('../util/AttachmentFlagsBitField.js');\nconst { basename, flatten } = require('../util/Util');\n\n/**\n * @typedef {Object} AttachmentPayload\n * @property {?string} name The name of the attachment\n * @property {Stream|BufferResolvable} attachment The attachment in this payload\n * @property {?string} description The description of the attachment\n */\n\n/**\n * Represents an attachment\n */\nclass Attachment {\n  constructor(data) {\n    this.attachment = data.url;\n    /**\n     * The name of this attachment\n     * @type {string}\n     */\n    this.name = data.filename;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The attachment's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('size' in data) {\n      /**\n       * The size of this attachment in bytes\n       * @type {number}\n       */\n      this.size = data.size;\n    }\n\n    if ('url' in data) {\n      /**\n       * The URL to this attachment\n       * @type {string}\n       */\n      this.url = data.url;\n    }\n\n    if ('proxy_url' in data) {\n      /**\n       * The Proxy URL to this attachment\n       * @type {string}\n       */\n      this.proxyURL = data.proxy_url;\n    }\n\n    if ('height' in data) {\n      /**\n       * The height of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.height = data.height;\n    } else {\n      this.height ??= null;\n    }\n\n    if ('width' in data) {\n      /**\n       * The width of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.width = data.width;\n    } else {\n      this.width ??= null;\n    }\n\n    if ('content_type' in data) {\n      /**\n       * The media type of this attachment\n       * @type {?string}\n       */\n      this.contentType = data.content_type;\n    } else {\n      this.contentType ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description (alt text) of this attachment\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    /**\n     * Whether this attachment is ephemeral\n     * @type {boolean}\n     */\n    this.ephemeral = data.ephemeral ?? false;\n\n    if ('duration_secs' in data) {\n      /**\n       * The duration of this attachment in seconds\n       * <info>This will only be available if the attachment is an audio file.</info>\n       * @type {?number}\n       */\n      this.duration = data.duration_secs;\n    } else {\n      this.duration ??= null;\n    }\n\n    if ('waveform' in data) {\n      /**\n       * The base64 encoded byte array representing a sampled waveform\n       * <info>This will only be available if the attachment is an audio file.</info>\n       * @type {?string}\n       */\n      this.waveform = data.waveform;\n    } else {\n      this.waveform ??= null;\n    }\n\n    if ('flags' in data) {\n      /**\n       * The flags of this attachment\n       * @type {Readonly<AttachmentFlagsBitField>}\n       */\n      this.flags = new AttachmentFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new AttachmentFlagsBitField().freeze();\n    }\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return basename(this.url ?? this.name).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n}\n\nmodule.exports = Attachment;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}