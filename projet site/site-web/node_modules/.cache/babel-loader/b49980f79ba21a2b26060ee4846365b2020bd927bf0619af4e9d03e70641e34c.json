{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  ApplicationCommandOptionType\n} = require('discord-api-types/v10');\nconst isEqual = require('fast-deep-equal');\nconst Base = require('./Base');\nconst ApplicationCommandPermissionsManager = require('../managers/ApplicationCommandPermissionsManager');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents an application command.\n * @extends {Base}\n */\nclass ApplicationCommand extends Base {\n  constructor(client, data, guild, guildId) {\n    super(client);\n\n    /**\n     * The command's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The parent application's id\n     * @type {Snowflake}\n     */\n    this.applicationId = data.application_id;\n\n    /**\n     * The guild this command is part of\n     * @type {?Guild}\n     */\n    this.guild = guild ?? null;\n\n    /**\n     * The guild's id this command is part of, this may be non-null when `guild` is `null` if the command\n     * was fetched from the `ApplicationCommandManager`\n     * @type {?Snowflake}\n     */\n    this.guildId = guild?.id ?? guildId ?? null;\n\n    /**\n     * The manager for permissions of this command on its guild or arbitrary guilds when the command is global\n     * @type {ApplicationCommandPermissionsManager}\n     */\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n\n    /**\n     * The type of this application command\n     * @type {ApplicationCommandType}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this command is age-restricted (18+)\n     * @type {boolean}\n     */\n    this.nsfw = data.nsfw ?? false;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('name' in data) {\n      /**\n       * The name of this command\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n    if ('name_localizations' in data) {\n      /**\n       * The name localizations for this command\n       * @type {?Object<Locale, string>}\n       */\n      this.nameLocalizations = data.name_localizations;\n    } else {\n      this.nameLocalizations ??= null;\n    }\n    if ('name_localized' in data) {\n      /**\n       * The localized name for this command\n       * @type {?string}\n       */\n      this.nameLocalized = data.name_localized;\n    } else {\n      this.nameLocalized ??= null;\n    }\n    if ('description' in data) {\n      /**\n       * The description of this command\n       * @type {string}\n       */\n      this.description = data.description;\n    }\n    if ('description_localizations' in data) {\n      /**\n       * The description localizations for this command\n       * @type {?Object<Locale, string>}\n       */\n      this.descriptionLocalizations = data.description_localizations;\n    } else {\n      this.descriptionLocalizations ??= null;\n    }\n    if ('description_localized' in data) {\n      /**\n       * The localized description for this command\n       * @type {?string}\n       */\n      this.descriptionLocalized = data.description_localized;\n    } else {\n      this.descriptionLocalized ??= null;\n    }\n    if ('options' in data) {\n      /**\n       * The options of this command\n       * @type {ApplicationCommandOption[]}\n       */\n      this.options = data.options.map(o => this.constructor.transformOption(o, true));\n    } else {\n      this.options ??= [];\n    }\n    if ('default_member_permissions' in data) {\n      /**\n       * The default bitfield used to determine whether this command be used in a guild\n       * @type {?Readonly<PermissionsBitField>}\n       */\n      this.defaultMemberPermissions = data.default_member_permissions ? new PermissionsBitField(BigInt(data.default_member_permissions)).freeze() : null;\n    } else {\n      this.defaultMemberPermissions ??= null;\n    }\n    if ('dm_permission' in data) {\n      /**\n       * Whether the command can be used in DMs\n       * <info>This property is always `null` on guild commands</info>\n       * @type {boolean|null}\n       */\n      this.dmPermission = data.dm_permission;\n    } else {\n      this.dmPermission ??= null;\n    }\n    if ('version' in data) {\n      /**\n       * Autoincrementing version identifier updated during substantial record changes\n       * @type {Snowflake}\n       */\n      this.version = data.version;\n    }\n  }\n\n  /**\n   * The timestamp the command was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the command was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The manager that this command belongs to\n   * @type {ApplicationCommandManager}\n   * @readonly\n   */\n  get manager() {\n    return (this.guild ?? this.client.application).commands;\n  }\n\n  /**\n   * Data for creating or editing an application command.\n   * @typedef {Object} ApplicationCommandData\n   * @property {string} name The name of the command, must be in all lowercase if type is\n   * {@link ApplicationCommandType.ChatInput}\n   * @property {Object<Locale, string>} [nameLocalizations] The localizations for the command name\n   * @property {string} description The description of the command, if type is {@link ApplicationCommandType.ChatInput}\n   * @property {boolean} [nsfw] Whether the command is age-restricted\n   * @property {Object<Locale, string>} [descriptionLocalizations] The localizations for the command description,\n   * if type is {@link ApplicationCommandType.ChatInput}\n   * @property {ApplicationCommandType} [type=ApplicationCommandType.ChatInput] The type of the command\n   * @property {ApplicationCommandOptionData[]} [options] Options for the command\n   * @property {?PermissionResolvable} [defaultMemberPermissions] The bitfield used to determine the default permissions\n   * a member needs in order to run the command\n   * @property {boolean} [dmPermission] Whether the command is enabled in DMs\n   */\n\n  /**\n   * An option for an application command or subcommand.\n   * <info>In addition to the listed properties, when used as a parameter,\n   * API style `snake_case` properties can be used for compatibility with generators like `@discordjs/builders`.</info>\n   * <warn>Note that providing a value for the `camelCase` counterpart for any `snake_case` property\n   * will discard the provided `snake_case` property.</warn>\n   * @typedef {Object} ApplicationCommandOptionData\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string} name The name of the option\n   * @property {Object<Locale, string>} [nameLocalizations] The name localizations for the option\n   * @property {string} description The description of the option\n   * @property {Object<Locale, string>} [descriptionLocalizations] The description localizations for the option\n   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a\n   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {boolean} [required] Whether the option is required\n   * @property {ApplicationCommandOptionChoiceData[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOptionData[]} [options] Additional options if this option is a subcommand (group)\n   * @property {ChannelType[]} [channelTypes] When the option type is channel,\n   * the allowed types of channels that can be selected\n   * @property {number} [minValue] The minimum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [maxValue] The maximum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [minLength] The minimum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   * @property {number} [maxLength] The maximum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   */\n\n  /**\n   * @typedef {Object} ApplicationCommandOptionChoiceData\n   * @property {string} name The name of the choice\n   * @property {Object<Locale, string>} [nameLocalizations] The localized names for this choice\n   * @property {string|number} value The value of the choice\n   */\n\n  /**\n   * Edits this application command.\n   * @param {Partial<ApplicationCommandData>} data The data to update the command with\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the description of this command\n   * command.edit({\n   *   description: 'New description',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.manager.edit(this, data, this.guildId);\n  }\n\n  /**\n   * Edits the name of this ApplicationCommand\n   * @param {string} name The new name of the command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setName(name) {\n    return this.edit({\n      name\n    });\n  }\n\n  /**\n   * Edits the localized names of this ApplicationCommand\n   * @param {Object<Locale, string>} nameLocalizations The new localized names for the command\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the name localizations of this command\n   * command.setLocalizedNames({\n   *   'en-GB': 'test',\n   *   'pt-BR': 'teste',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  setNameLocalizations(nameLocalizations) {\n    return this.edit({\n      nameLocalizations\n    });\n  }\n\n  /**\n   * Edits the description of this ApplicationCommand\n   * @param {string} description The new description of the command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDescription(description) {\n    return this.edit({\n      description\n    });\n  }\n\n  /**\n   * Edits the localized descriptions of this ApplicationCommand\n   * @param {Object<Locale, string>} descriptionLocalizations The new localized descriptions for the command\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the description localizations of this command\n   * command.setDescriptionLocalizations({\n   *   'en-GB': 'A test command',\n   *   'pt-BR': 'Um comando de teste',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  setDescriptionLocalizations(descriptionLocalizations) {\n    return this.edit({\n      descriptionLocalizations\n    });\n  }\n\n  /**\n   * Edits the default member permissions of this ApplicationCommand\n   * @param {?PermissionResolvable} defaultMemberPermissions The default member permissions required to run this command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDefaultMemberPermissions(defaultMemberPermissions) {\n    return this.edit({\n      defaultMemberPermissions\n    });\n  }\n\n  /**\n   * Edits the DM permission of this ApplicationCommand\n   * @param {boolean} [dmPermission=true] Whether the command can be used in DMs\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDMPermission(dmPermission = true) {\n    return this.edit({\n      dmPermission\n    });\n  }\n\n  /**\n   * Edits the options of this ApplicationCommand\n   * @param {ApplicationCommandOptionData[]} options The options to set for this command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setOptions(options) {\n    return this.edit({\n      options\n    });\n  }\n\n  /**\n   * Deletes this command.\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Delete this command\n   * command.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.manager.delete(this, this.guildId);\n  }\n\n  /**\n   * Whether this command equals another command. It compares all properties, so for most operations\n   * it is advisable to just compare `command.id === command2.id` as it is much faster and is often\n   * what most users need.\n   * @param {ApplicationCommand|ApplicationCommandData|APIApplicationCommand} command The command to compare with\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options and choices are in the same\n   * order in the array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   */\n  equals(command, enforceOptionOrder = false) {\n    // If given an id, check if the id matches\n    if (command.id && this.id !== command.id) return false;\n    let defaultMemberPermissions = null;\n    let dmPermission = command.dmPermission ?? command.dm_permission;\n    if ('default_member_permissions' in command) {\n      defaultMemberPermissions = command.default_member_permissions ? new PermissionsBitField(BigInt(command.default_member_permissions)).bitfield : null;\n    }\n    if ('defaultMemberPermissions' in command) {\n      defaultMemberPermissions = command.defaultMemberPermissions !== null ? new PermissionsBitField(command.defaultMemberPermissions).bitfield : null;\n    }\n\n    // Check top level parameters\n    if (command.name !== this.name || 'description' in command && command.description !== this.description || 'version' in command && command.version !== this.version || command.type && command.type !== this.type || 'nsfw' in command && command.nsfw !== this.nsfw ||\n    // Future proof for options being nullable\n    // TODO: remove ?? 0 on each when nullable\n    (command.options?.length ?? 0) !== (this.options?.length ?? 0) || defaultMemberPermissions !== (this.defaultMemberPermissions?.bitfield ?? null) || dmPermission !== undefined && dmPermission !== this.dmPermission || !isEqual(command.nameLocalizations ?? command.name_localizations ?? {}, this.nameLocalizations ?? {}) || !isEqual(command.descriptionLocalizations ?? command.description_localizations ?? {}, this.descriptionLocalizations ?? {})) {\n      return false;\n    }\n    if (command.options) {\n      return this.constructor.optionsEqual(this.options, command.options, enforceOptionOrder);\n    }\n    return true;\n  }\n\n  /**\n   * Recursively checks that all options for an {@link ApplicationCommand} are equal to the provided options.\n   * In most cases it is better to compare using {@link ApplicationCommand#equals}\n   * @param {ApplicationCommandOptionData[]} existing The options on the existing command,\n   * should be {@link ApplicationCommand#options}\n   * @param {ApplicationCommandOptionData[]|APIApplicationCommandOption[]} options The options to compare against\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options and choices are in the same\n   * order in the array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   */\n  static optionsEqual(existing, options, enforceOptionOrder = false) {\n    if (existing.length !== options.length) return false;\n    if (enforceOptionOrder) {\n      return existing.every((option, index) => this._optionEquals(option, options[index], enforceOptionOrder));\n    }\n    const newOptions = new Map(options.map(option => [option.name, option]));\n    for (const option of existing) {\n      const foundOption = newOptions.get(option.name);\n      if (!foundOption || !this._optionEquals(option, foundOption)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Checks that an option for an {@link ApplicationCommand} is equal to the provided option\n   * In most cases it is better to compare using {@link ApplicationCommand#equals}\n   * @param {ApplicationCommandOptionData} existing The option on the existing command,\n   * should be from {@link ApplicationCommand#options}\n   * @param {ApplicationCommandOptionData|APIApplicationCommandOption} option The option to compare against\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options or choices are in the same\n   * order in their array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   * @private\n   */\n  static _optionEquals(existing, option, enforceOptionOrder = false) {\n    if (option.name !== existing.name || option.type !== existing.type || option.description !== existing.description || option.autocomplete !== existing.autocomplete || (option.required ?? ([ApplicationCommandOptionType.Subcommand, ApplicationCommandOptionType.SubcommandGroup].includes(option.type) ? undefined : false)) !== existing.required || option.choices?.length !== existing.choices?.length || option.options?.length !== existing.options?.length || (option.channelTypes ?? option.channel_types)?.length !== existing.channelTypes?.length || (option.minValue ?? option.min_value) !== existing.minValue || (option.maxValue ?? option.max_value) !== existing.maxValue || (option.minLength ?? option.min_length) !== existing.minLength || (option.maxLength ?? option.max_length) !== existing.maxLength || !isEqual(option.nameLocalizations ?? option.name_localizations ?? {}, existing.nameLocalizations ?? {}) || !isEqual(option.descriptionLocalizations ?? option.description_localizations ?? {}, existing.descriptionLocalizations ?? {})) {\n      return false;\n    }\n    if (existing.choices) {\n      if (enforceOptionOrder && !existing.choices.every((choice, index) => choice.name === option.choices[index].name && choice.value === option.choices[index].value && isEqual(choice.nameLocalizations ?? {}, option.choices[index].nameLocalizations ?? option.choices[index].name_localizations ?? {}))) {\n        return false;\n      }\n      if (!enforceOptionOrder) {\n        const newChoices = new Map(option.choices.map(choice => [choice.name, choice]));\n        for (const choice of existing.choices) {\n          const foundChoice = newChoices.get(choice.name);\n          if (!foundChoice || foundChoice.value !== choice.value) return false;\n        }\n      }\n    }\n    if (existing.channelTypes) {\n      const newTypes = option.channelTypes ?? option.channel_types;\n      for (const type of existing.channelTypes) {\n        if (!newTypes.includes(type)) return false;\n      }\n    }\n    if (existing.options) {\n      return this.optionsEqual(existing.options, option.options, enforceOptionOrder);\n    }\n    return true;\n  }\n\n  /**\n   * An option for an application command or subcommand.\n   * @typedef {Object} ApplicationCommandOption\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string} name The name of the option\n   * @property {Object<Locale, string>} [nameLocalizations] The localizations for the option name\n   * @property {string} [nameLocalized] The localized name for this option\n   * @property {string} description The description of the option\n   * @property {Object<Locale, string>} [descriptionLocalizations] The localizations for the option description\n   * @property {string} [descriptionLocalized] The localized description for this option\n   * @property {boolean} [required] Whether the option is required\n   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a\n   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {ApplicationCommandOptionChoice[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOption[]} [options] Additional options if this option is a subcommand (group)\n   * @property {ApplicationCommandOptionAllowedChannelTypes[]} [channelTypes] When the option type is channel,\n   * the allowed types of channels that can be selected\n   * @property {number} [minValue] The minimum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [maxValue] The maximum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [minLength] The minimum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   * @property {number} [maxLength] The maximum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   */\n\n  /**\n   * A choice for an application command option.\n   * @typedef {Object} ApplicationCommandOptionChoice\n   * @property {string} name The name of the choice\n   * @property {?string} nameLocalized The localized name of the choice in the provided locale, if any\n   * @property {?Object<string, string>} [nameLocalizations] The localized names for this choice\n   * @property {string|number} value The value of the choice\n   */\n\n  /**\n   * Transforms an {@link ApplicationCommandOptionData} object into something that can be used with the API.\n   * @param {ApplicationCommandOptionData|ApplicationCommandOption} option The option to transform\n   * @param {boolean} [received] Whether this option has been received from Discord\n   * @returns {APIApplicationCommandOption}\n   * @private\n   */\n  static transformOption(option, received) {\n    const channelTypesKey = received ? 'channelTypes' : 'channel_types';\n    const minValueKey = received ? 'minValue' : 'min_value';\n    const maxValueKey = received ? 'maxValue' : 'max_value';\n    const minLengthKey = received ? 'minLength' : 'min_length';\n    const maxLengthKey = received ? 'maxLength' : 'max_length';\n    const nameLocalizationsKey = received ? 'nameLocalizations' : 'name_localizations';\n    const nameLocalizedKey = received ? 'nameLocalized' : 'name_localized';\n    const descriptionLocalizationsKey = received ? 'descriptionLocalizations' : 'description_localizations';\n    const descriptionLocalizedKey = received ? 'descriptionLocalized' : 'description_localized';\n    return {\n      type: option.type,\n      name: option.name,\n      [nameLocalizationsKey]: option.nameLocalizations ?? option.name_localizations,\n      [nameLocalizedKey]: option.nameLocalized ?? option.name_localized,\n      description: option.description,\n      [descriptionLocalizationsKey]: option.descriptionLocalizations ?? option.description_localizations,\n      [descriptionLocalizedKey]: option.descriptionLocalized ?? option.description_localized,\n      required: option.required ?? (option.type === ApplicationCommandOptionType.Subcommand || option.type === ApplicationCommandOptionType.SubcommandGroup ? undefined : false),\n      autocomplete: option.autocomplete,\n      choices: option.choices?.map(choice => ({\n        name: choice.name,\n        [nameLocalizedKey]: choice.nameLocalized ?? choice.name_localized,\n        [nameLocalizationsKey]: choice.nameLocalizations ?? choice.name_localizations,\n        value: choice.value\n      })),\n      options: option.options?.map(o => this.transformOption(o, received)),\n      [channelTypesKey]: option.channelTypes ?? option.channel_types,\n      [minValueKey]: option.minValue ?? option.min_value,\n      [maxValueKey]: option.maxValue ?? option.max_value,\n      [minLengthKey]: option.minLength ?? option.min_length,\n      [maxLengthKey]: option.maxLength ?? option.max_length\n    };\n  }\n}\nmodule.exports = ApplicationCommand;\n\n/* eslint-disable max-len */\n/**\n * @external APIApplicationCommand\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-structure}\n */\n\n/**\n * @external APIApplicationCommandOption\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-structure}\n */\n\n/**\n * @external ApplicationCommandOptionAllowedChannelTypes\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ApplicationCommandOptionAllowedChannelTypes:TypeAlias}\n */","map":{"version":3,"names":["DiscordSnowflake","require","ApplicationCommandOptionType","isEqual","Base","ApplicationCommandPermissionsManager","PermissionsBitField","ApplicationCommand","constructor","client","data","guild","guildId","id","applicationId","application_id","permissions","type","nsfw","_patch","name","nameLocalizations","name_localizations","nameLocalized","name_localized","description","descriptionLocalizations","description_localizations","descriptionLocalized","description_localized","options","map","o","transformOption","defaultMemberPermissions","default_member_permissions","BigInt","freeze","dmPermission","dm_permission","version","createdTimestamp","timestampFrom","createdAt","Date","manager","application","commands","edit","setName","setNameLocalizations","setDescription","setDescriptionLocalizations","setDefaultMemberPermissions","setDMPermission","setOptions","delete","equals","command","enforceOptionOrder","bitfield","length","undefined","optionsEqual","existing","every","option","index","_optionEquals","newOptions","Map","foundOption","get","autocomplete","required","Subcommand","SubcommandGroup","includes","choices","channelTypes","channel_types","minValue","min_value","maxValue","max_value","minLength","min_length","maxLength","max_length","choice","value","newChoices","foundChoice","newTypes","received","channelTypesKey","minValueKey","maxValueKey","minLengthKey","maxLengthKey","nameLocalizationsKey","nameLocalizedKey","descriptionLocalizationsKey","descriptionLocalizedKey","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/ApplicationCommand.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { ApplicationCommandOptionType } = require('discord-api-types/v10');\nconst isEqual = require('fast-deep-equal');\nconst Base = require('./Base');\nconst ApplicationCommandPermissionsManager = require('../managers/ApplicationCommandPermissionsManager');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents an application command.\n * @extends {Base}\n */\nclass ApplicationCommand extends Base {\n  constructor(client, data, guild, guildId) {\n    super(client);\n\n    /**\n     * The command's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The parent application's id\n     * @type {Snowflake}\n     */\n    this.applicationId = data.application_id;\n\n    /**\n     * The guild this command is part of\n     * @type {?Guild}\n     */\n    this.guild = guild ?? null;\n\n    /**\n     * The guild's id this command is part of, this may be non-null when `guild` is `null` if the command\n     * was fetched from the `ApplicationCommandManager`\n     * @type {?Snowflake}\n     */\n    this.guildId = guild?.id ?? guildId ?? null;\n\n    /**\n     * The manager for permissions of this command on its guild or arbitrary guilds when the command is global\n     * @type {ApplicationCommandPermissionsManager}\n     */\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n\n    /**\n     * The type of this application command\n     * @type {ApplicationCommandType}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this command is age-restricted (18+)\n     * @type {boolean}\n     */\n    this.nsfw = data.nsfw ?? false;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('name' in data) {\n      /**\n       * The name of this command\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('name_localizations' in data) {\n      /**\n       * The name localizations for this command\n       * @type {?Object<Locale, string>}\n       */\n      this.nameLocalizations = data.name_localizations;\n    } else {\n      this.nameLocalizations ??= null;\n    }\n\n    if ('name_localized' in data) {\n      /**\n       * The localized name for this command\n       * @type {?string}\n       */\n      this.nameLocalized = data.name_localized;\n    } else {\n      this.nameLocalized ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description of this command\n       * @type {string}\n       */\n      this.description = data.description;\n    }\n\n    if ('description_localizations' in data) {\n      /**\n       * The description localizations for this command\n       * @type {?Object<Locale, string>}\n       */\n      this.descriptionLocalizations = data.description_localizations;\n    } else {\n      this.descriptionLocalizations ??= null;\n    }\n\n    if ('description_localized' in data) {\n      /**\n       * The localized description for this command\n       * @type {?string}\n       */\n      this.descriptionLocalized = data.description_localized;\n    } else {\n      this.descriptionLocalized ??= null;\n    }\n\n    if ('options' in data) {\n      /**\n       * The options of this command\n       * @type {ApplicationCommandOption[]}\n       */\n      this.options = data.options.map(o => this.constructor.transformOption(o, true));\n    } else {\n      this.options ??= [];\n    }\n\n    if ('default_member_permissions' in data) {\n      /**\n       * The default bitfield used to determine whether this command be used in a guild\n       * @type {?Readonly<PermissionsBitField>}\n       */\n      this.defaultMemberPermissions = data.default_member_permissions\n        ? new PermissionsBitField(BigInt(data.default_member_permissions)).freeze()\n        : null;\n    } else {\n      this.defaultMemberPermissions ??= null;\n    }\n\n    if ('dm_permission' in data) {\n      /**\n       * Whether the command can be used in DMs\n       * <info>This property is always `null` on guild commands</info>\n       * @type {boolean|null}\n       */\n      this.dmPermission = data.dm_permission;\n    } else {\n      this.dmPermission ??= null;\n    }\n\n    if ('version' in data) {\n      /**\n       * Autoincrementing version identifier updated during substantial record changes\n       * @type {Snowflake}\n       */\n      this.version = data.version;\n    }\n  }\n\n  /**\n   * The timestamp the command was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the command was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The manager that this command belongs to\n   * @type {ApplicationCommandManager}\n   * @readonly\n   */\n  get manager() {\n    return (this.guild ?? this.client.application).commands;\n  }\n\n  /**\n   * Data for creating or editing an application command.\n   * @typedef {Object} ApplicationCommandData\n   * @property {string} name The name of the command, must be in all lowercase if type is\n   * {@link ApplicationCommandType.ChatInput}\n   * @property {Object<Locale, string>} [nameLocalizations] The localizations for the command name\n   * @property {string} description The description of the command, if type is {@link ApplicationCommandType.ChatInput}\n   * @property {boolean} [nsfw] Whether the command is age-restricted\n   * @property {Object<Locale, string>} [descriptionLocalizations] The localizations for the command description,\n   * if type is {@link ApplicationCommandType.ChatInput}\n   * @property {ApplicationCommandType} [type=ApplicationCommandType.ChatInput] The type of the command\n   * @property {ApplicationCommandOptionData[]} [options] Options for the command\n   * @property {?PermissionResolvable} [defaultMemberPermissions] The bitfield used to determine the default permissions\n   * a member needs in order to run the command\n   * @property {boolean} [dmPermission] Whether the command is enabled in DMs\n   */\n\n  /**\n   * An option for an application command or subcommand.\n   * <info>In addition to the listed properties, when used as a parameter,\n   * API style `snake_case` properties can be used for compatibility with generators like `@discordjs/builders`.</info>\n   * <warn>Note that providing a value for the `camelCase` counterpart for any `snake_case` property\n   * will discard the provided `snake_case` property.</warn>\n   * @typedef {Object} ApplicationCommandOptionData\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string} name The name of the option\n   * @property {Object<Locale, string>} [nameLocalizations] The name localizations for the option\n   * @property {string} description The description of the option\n   * @property {Object<Locale, string>} [descriptionLocalizations] The description localizations for the option\n   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a\n   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {boolean} [required] Whether the option is required\n   * @property {ApplicationCommandOptionChoiceData[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOptionData[]} [options] Additional options if this option is a subcommand (group)\n   * @property {ChannelType[]} [channelTypes] When the option type is channel,\n   * the allowed types of channels that can be selected\n   * @property {number} [minValue] The minimum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [maxValue] The maximum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [minLength] The minimum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   * @property {number} [maxLength] The maximum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   */\n\n  /**\n   * @typedef {Object} ApplicationCommandOptionChoiceData\n   * @property {string} name The name of the choice\n   * @property {Object<Locale, string>} [nameLocalizations] The localized names for this choice\n   * @property {string|number} value The value of the choice\n   */\n\n  /**\n   * Edits this application command.\n   * @param {Partial<ApplicationCommandData>} data The data to update the command with\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the description of this command\n   * command.edit({\n   *   description: 'New description',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.manager.edit(this, data, this.guildId);\n  }\n\n  /**\n   * Edits the name of this ApplicationCommand\n   * @param {string} name The new name of the command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setName(name) {\n    return this.edit({ name });\n  }\n\n  /**\n   * Edits the localized names of this ApplicationCommand\n   * @param {Object<Locale, string>} nameLocalizations The new localized names for the command\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the name localizations of this command\n   * command.setLocalizedNames({\n   *   'en-GB': 'test',\n   *   'pt-BR': 'teste',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  setNameLocalizations(nameLocalizations) {\n    return this.edit({ nameLocalizations });\n  }\n\n  /**\n   * Edits the description of this ApplicationCommand\n   * @param {string} description The new description of the command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDescription(description) {\n    return this.edit({ description });\n  }\n\n  /**\n   * Edits the localized descriptions of this ApplicationCommand\n   * @param {Object<Locale, string>} descriptionLocalizations The new localized descriptions for the command\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the description localizations of this command\n   * command.setDescriptionLocalizations({\n   *   'en-GB': 'A test command',\n   *   'pt-BR': 'Um comando de teste',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  setDescriptionLocalizations(descriptionLocalizations) {\n    return this.edit({ descriptionLocalizations });\n  }\n\n  /**\n   * Edits the default member permissions of this ApplicationCommand\n   * @param {?PermissionResolvable} defaultMemberPermissions The default member permissions required to run this command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDefaultMemberPermissions(defaultMemberPermissions) {\n    return this.edit({ defaultMemberPermissions });\n  }\n\n  /**\n   * Edits the DM permission of this ApplicationCommand\n   * @param {boolean} [dmPermission=true] Whether the command can be used in DMs\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDMPermission(dmPermission = true) {\n    return this.edit({ dmPermission });\n  }\n\n  /**\n   * Edits the options of this ApplicationCommand\n   * @param {ApplicationCommandOptionData[]} options The options to set for this command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setOptions(options) {\n    return this.edit({ options });\n  }\n\n  /**\n   * Deletes this command.\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Delete this command\n   * command.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.manager.delete(this, this.guildId);\n  }\n\n  /**\n   * Whether this command equals another command. It compares all properties, so for most operations\n   * it is advisable to just compare `command.id === command2.id` as it is much faster and is often\n   * what most users need.\n   * @param {ApplicationCommand|ApplicationCommandData|APIApplicationCommand} command The command to compare with\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options and choices are in the same\n   * order in the array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   */\n  equals(command, enforceOptionOrder = false) {\n    // If given an id, check if the id matches\n    if (command.id && this.id !== command.id) return false;\n\n    let defaultMemberPermissions = null;\n    let dmPermission = command.dmPermission ?? command.dm_permission;\n\n    if ('default_member_permissions' in command) {\n      defaultMemberPermissions = command.default_member_permissions\n        ? new PermissionsBitField(BigInt(command.default_member_permissions)).bitfield\n        : null;\n    }\n\n    if ('defaultMemberPermissions' in command) {\n      defaultMemberPermissions =\n        command.defaultMemberPermissions !== null\n          ? new PermissionsBitField(command.defaultMemberPermissions).bitfield\n          : null;\n    }\n\n    // Check top level parameters\n    if (\n      command.name !== this.name ||\n      ('description' in command && command.description !== this.description) ||\n      ('version' in command && command.version !== this.version) ||\n      (command.type && command.type !== this.type) ||\n      ('nsfw' in command && command.nsfw !== this.nsfw) ||\n      // Future proof for options being nullable\n      // TODO: remove ?? 0 on each when nullable\n      (command.options?.length ?? 0) !== (this.options?.length ?? 0) ||\n      defaultMemberPermissions !== (this.defaultMemberPermissions?.bitfield ?? null) ||\n      (dmPermission !== undefined && dmPermission !== this.dmPermission) ||\n      !isEqual(command.nameLocalizations ?? command.name_localizations ?? {}, this.nameLocalizations ?? {}) ||\n      !isEqual(\n        command.descriptionLocalizations ?? command.description_localizations ?? {},\n        this.descriptionLocalizations ?? {},\n      )\n    ) {\n      return false;\n    }\n\n    if (command.options) {\n      return this.constructor.optionsEqual(this.options, command.options, enforceOptionOrder);\n    }\n    return true;\n  }\n\n  /**\n   * Recursively checks that all options for an {@link ApplicationCommand} are equal to the provided options.\n   * In most cases it is better to compare using {@link ApplicationCommand#equals}\n   * @param {ApplicationCommandOptionData[]} existing The options on the existing command,\n   * should be {@link ApplicationCommand#options}\n   * @param {ApplicationCommandOptionData[]|APIApplicationCommandOption[]} options The options to compare against\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options and choices are in the same\n   * order in the array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   */\n  static optionsEqual(existing, options, enforceOptionOrder = false) {\n    if (existing.length !== options.length) return false;\n    if (enforceOptionOrder) {\n      return existing.every((option, index) => this._optionEquals(option, options[index], enforceOptionOrder));\n    }\n    const newOptions = new Map(options.map(option => [option.name, option]));\n    for (const option of existing) {\n      const foundOption = newOptions.get(option.name);\n      if (!foundOption || !this._optionEquals(option, foundOption)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Checks that an option for an {@link ApplicationCommand} is equal to the provided option\n   * In most cases it is better to compare using {@link ApplicationCommand#equals}\n   * @param {ApplicationCommandOptionData} existing The option on the existing command,\n   * should be from {@link ApplicationCommand#options}\n   * @param {ApplicationCommandOptionData|APIApplicationCommandOption} option The option to compare against\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options or choices are in the same\n   * order in their array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   * @private\n   */\n  static _optionEquals(existing, option, enforceOptionOrder = false) {\n    if (\n      option.name !== existing.name ||\n      option.type !== existing.type ||\n      option.description !== existing.description ||\n      option.autocomplete !== existing.autocomplete ||\n      (option.required ??\n        ([ApplicationCommandOptionType.Subcommand, ApplicationCommandOptionType.SubcommandGroup].includes(option.type)\n          ? undefined\n          : false)) !== existing.required ||\n      option.choices?.length !== existing.choices?.length ||\n      option.options?.length !== existing.options?.length ||\n      (option.channelTypes ?? option.channel_types)?.length !== existing.channelTypes?.length ||\n      (option.minValue ?? option.min_value) !== existing.minValue ||\n      (option.maxValue ?? option.max_value) !== existing.maxValue ||\n      (option.minLength ?? option.min_length) !== existing.minLength ||\n      (option.maxLength ?? option.max_length) !== existing.maxLength ||\n      !isEqual(option.nameLocalizations ?? option.name_localizations ?? {}, existing.nameLocalizations ?? {}) ||\n      !isEqual(\n        option.descriptionLocalizations ?? option.description_localizations ?? {},\n        existing.descriptionLocalizations ?? {},\n      )\n    ) {\n      return false;\n    }\n\n    if (existing.choices) {\n      if (\n        enforceOptionOrder &&\n        !existing.choices.every(\n          (choice, index) =>\n            choice.name === option.choices[index].name &&\n            choice.value === option.choices[index].value &&\n            isEqual(\n              choice.nameLocalizations ?? {},\n              option.choices[index].nameLocalizations ?? option.choices[index].name_localizations ?? {},\n            ),\n        )\n      ) {\n        return false;\n      }\n      if (!enforceOptionOrder) {\n        const newChoices = new Map(option.choices.map(choice => [choice.name, choice]));\n        for (const choice of existing.choices) {\n          const foundChoice = newChoices.get(choice.name);\n          if (!foundChoice || foundChoice.value !== choice.value) return false;\n        }\n      }\n    }\n\n    if (existing.channelTypes) {\n      const newTypes = option.channelTypes ?? option.channel_types;\n      for (const type of existing.channelTypes) {\n        if (!newTypes.includes(type)) return false;\n      }\n    }\n\n    if (existing.options) {\n      return this.optionsEqual(existing.options, option.options, enforceOptionOrder);\n    }\n    return true;\n  }\n\n  /**\n   * An option for an application command or subcommand.\n   * @typedef {Object} ApplicationCommandOption\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string} name The name of the option\n   * @property {Object<Locale, string>} [nameLocalizations] The localizations for the option name\n   * @property {string} [nameLocalized] The localized name for this option\n   * @property {string} description The description of the option\n   * @property {Object<Locale, string>} [descriptionLocalizations] The localizations for the option description\n   * @property {string} [descriptionLocalized] The localized description for this option\n   * @property {boolean} [required] Whether the option is required\n   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a\n   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {ApplicationCommandOptionChoice[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOption[]} [options] Additional options if this option is a subcommand (group)\n   * @property {ApplicationCommandOptionAllowedChannelTypes[]} [channelTypes] When the option type is channel,\n   * the allowed types of channels that can be selected\n   * @property {number} [minValue] The minimum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [maxValue] The maximum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [minLength] The minimum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   * @property {number} [maxLength] The maximum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   */\n\n  /**\n   * A choice for an application command option.\n   * @typedef {Object} ApplicationCommandOptionChoice\n   * @property {string} name The name of the choice\n   * @property {?string} nameLocalized The localized name of the choice in the provided locale, if any\n   * @property {?Object<string, string>} [nameLocalizations] The localized names for this choice\n   * @property {string|number} value The value of the choice\n   */\n\n  /**\n   * Transforms an {@link ApplicationCommandOptionData} object into something that can be used with the API.\n   * @param {ApplicationCommandOptionData|ApplicationCommandOption} option The option to transform\n   * @param {boolean} [received] Whether this option has been received from Discord\n   * @returns {APIApplicationCommandOption}\n   * @private\n   */\n  static transformOption(option, received) {\n    const channelTypesKey = received ? 'channelTypes' : 'channel_types';\n    const minValueKey = received ? 'minValue' : 'min_value';\n    const maxValueKey = received ? 'maxValue' : 'max_value';\n    const minLengthKey = received ? 'minLength' : 'min_length';\n    const maxLengthKey = received ? 'maxLength' : 'max_length';\n    const nameLocalizationsKey = received ? 'nameLocalizations' : 'name_localizations';\n    const nameLocalizedKey = received ? 'nameLocalized' : 'name_localized';\n    const descriptionLocalizationsKey = received ? 'descriptionLocalizations' : 'description_localizations';\n    const descriptionLocalizedKey = received ? 'descriptionLocalized' : 'description_localized';\n    return {\n      type: option.type,\n      name: option.name,\n      [nameLocalizationsKey]: option.nameLocalizations ?? option.name_localizations,\n      [nameLocalizedKey]: option.nameLocalized ?? option.name_localized,\n      description: option.description,\n      [descriptionLocalizationsKey]: option.descriptionLocalizations ?? option.description_localizations,\n      [descriptionLocalizedKey]: option.descriptionLocalized ?? option.description_localized,\n      required:\n        option.required ??\n        (option.type === ApplicationCommandOptionType.Subcommand ||\n        option.type === ApplicationCommandOptionType.SubcommandGroup\n          ? undefined\n          : false),\n      autocomplete: option.autocomplete,\n      choices: option.choices?.map(choice => ({\n        name: choice.name,\n        [nameLocalizedKey]: choice.nameLocalized ?? choice.name_localized,\n        [nameLocalizationsKey]: choice.nameLocalizations ?? choice.name_localizations,\n        value: choice.value,\n      })),\n      options: option.options?.map(o => this.transformOption(o, received)),\n      [channelTypesKey]: option.channelTypes ?? option.channel_types,\n      [minValueKey]: option.minValue ?? option.min_value,\n      [maxValueKey]: option.maxValue ?? option.max_value,\n      [minLengthKey]: option.minLength ?? option.min_length,\n      [maxLengthKey]: option.maxLength ?? option.max_length,\n    };\n  }\n}\n\nmodule.exports = ApplicationCommand;\n\n/* eslint-disable max-len */\n/**\n * @external APIApplicationCommand\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-structure}\n */\n\n/**\n * @external APIApplicationCommandOption\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-structure}\n */\n\n/**\n * @external ApplicationCommandOptionAllowedChannelTypes\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ApplicationCommandOptionAllowedChannelTypes:TypeAlias}\n */\n"],"mappings":"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ACA;MACM,IAAI,CAAC4B,YAAY,GAAG5B,IAAI,CAAC6B,aAAa;IACxC,CAAC,MAAM;MACL,IAAI,CAACD,YAAY,KAAK,IAAI;IAC5B;IAEA,IAAI,SAAS,IAAI5B,IAAI,EAAE;MACrB;AACN;AACA;AACA;MACM,IAAI,CAAC8B,OAAO,GAAG9B,IAAI,CAAC8B,OAAO;IAC7B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,gBAAgBA,CAAA,EAAG;IACrB,OAAOzC,gBAAgB,CAAC0C,aAAa,CAAC,IAAI,CAAC7B,EAAE,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAI8B,SAASA,CAAA,EAAG;IACd,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAII,OAAOA,CAAA,EAAG;IACZ,OAAO,CAAC,IAAI,CAAClC,KAAK,IAAI,IAAI,CAACF,MAAM,CAACqC,WAAW,EAAEC,QAAQ;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,IAAIA,CAACtC,IAAI,EAAE;IACT,OAAO,IAAI,CAACmC,OAAO,CAACG,IAAI,CAAC,IAAI,EAAEtC,IAAI,EAAE,IAAI,CAACE,OAAO,CAAC;EACpD;;EAEA;AACF;AACA;AACA;AACA;EACEqC,OAAOA,CAAC7B,IAAI,EAAE;IACZ,OAAO,IAAI,CAAC4B,IAAI,CAAC;MAAE5B;IAAK,CAAC,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;E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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}