{"ast":null,"code":"'use strict';\n\nconst {\n  ChannelType,\n  Routes\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst {\n  DiscordjsError,\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents the voice state for a Guild Member.\n * @extends {Base}\n */\nclass VoiceState extends Base {\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n    this.guild = guild;\n    /**\n     * The id of the member of this voice state\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('deaf' in data) {\n      /**\n       * Whether this member is deafened server-wide\n       * @type {?boolean}\n       */\n      this.serverDeaf = data.deaf;\n    } else {\n      this.serverDeaf ??= null;\n    }\n    if ('mute' in data) {\n      /**\n       * Whether this member is muted server-wide\n       * @type {?boolean}\n       */\n      this.serverMute = data.mute;\n    } else {\n      this.serverMute ??= null;\n    }\n    if ('self_deaf' in data) {\n      /**\n       * Whether this member is self-deafened\n       * @type {?boolean}\n       */\n      this.selfDeaf = data.self_deaf;\n    } else {\n      this.selfDeaf ??= null;\n    }\n    if ('self_mute' in data) {\n      /**\n       * Whether this member is self-muted\n       * @type {?boolean}\n       */\n      this.selfMute = data.self_mute;\n    } else {\n      this.selfMute ??= null;\n    }\n    if ('self_video' in data) {\n      /**\n       * Whether this member's camera is enabled\n       * @type {?boolean}\n       */\n      this.selfVideo = data.self_video;\n    } else {\n      this.selfVideo ??= null;\n    }\n    if ('session_id' in data) {\n      /**\n       * The session id for this member's connection\n       * @type {?string}\n       */\n      this.sessionId = data.session_id;\n    } else {\n      this.sessionId ??= null;\n    }\n\n    // The self_stream is property is omitted if false, check for another property\n    // here to avoid incorrectly clearing this when partial data is specified\n    if ('self_video' in data) {\n      /**\n       * Whether this member is streaming using \"Screen Share\"\n       * @type {?boolean}\n       */\n      this.streaming = data.self_stream ?? false;\n    } else {\n      this.streaming ??= null;\n    }\n    if ('channel_id' in data) {\n      /**\n       * The {@link VoiceChannel} or {@link StageChannel} id the member is in\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n    if ('suppress' in data) {\n      /**\n       * Whether this member is suppressed from speaking. This property is specific to stage channels only.\n       * @type {?boolean}\n       */\n      this.suppress = data.suppress;\n    } else {\n      this.suppress ??= null;\n    }\n    if ('request_to_speak_timestamp' in data) {\n      /**\n       * The time at which the member requested to speak. This property is specific to stage channels only.\n       * @type {?number}\n       */\n      this.requestToSpeakTimestamp = data.request_to_speak_timestamp && Date.parse(data.request_to_speak_timestamp);\n    } else {\n      this.requestToSpeakTimestamp ??= null;\n    }\n    return this;\n  }\n\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * The channel that the member is connected to\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} [mute=true] Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute = true, reason) {\n    return this.guild.members.edit(this.id, {\n      mute,\n      reason\n    });\n  }\n\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} [deaf=true] Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf = true, reason) {\n    return this.guild.members.edit(this.id, {\n      deaf,\n      reason\n    });\n  }\n\n  /**\n   * Disconnects the member from the channel.\n   * @param {string} [reason] Reason for disconnecting the member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n  disconnect(reason) {\n    return this.setChannel(null, reason);\n  }\n\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {GuildVoiceChannelResolvable|null} channel Channel to move the member to, or `null` if you want to\n   * disconnect them from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n  setChannel(channel, reason) {\n    return this.guild.members.edit(this.id, {\n      channel,\n      reason\n    });\n  }\n\n  /**\n   * Data to edit the logged in user's own voice state with, when in a stage channel\n   * @typedef {Object} VoiceStateEditOptions\n   * @property {boolean} [requestToSpeak] Whether or not the client is requesting to become a speaker.\n   * <info>Only available to the logged in user's own voice state.</info>\n   * @property {boolean} [suppressed] Whether or not the user should be suppressed.\n   */\n\n  /**\n   * Edits this voice state. Currently only available when in a stage channel\n   * @param {VoiceStateEditOptions} options The options to provide\n   * @returns {Promise<VoiceState>}\n   */\n  async edit(options) {\n    if (this.channel?.type !== ChannelType.GuildStageVoice) throw new DiscordjsError(ErrorCodes.VoiceNotStageChannel);\n    const target = this.client.user.id === this.id ? '@me' : this.id;\n    if (target !== '@me' && options.requestToSpeak !== undefined) {\n      throw new DiscordjsError(ErrorCodes.VoiceStateNotOwn);\n    }\n    if (!['boolean', 'undefined'].includes(typeof options.requestToSpeak)) {\n      throw new DiscordjsTypeError(ErrorCodes.VoiceStateInvalidType, 'requestToSpeak');\n    }\n    if (!['boolean', 'undefined'].includes(typeof options.suppressed)) {\n      throw new DiscordjsTypeError(ErrorCodes.VoiceStateInvalidType, 'suppressed');\n    }\n    await this.client.rest.patch(Routes.guildVoiceState(this.guild.id, target), {\n      body: {\n        channel_id: this.channelId,\n        request_to_speak_timestamp: options.requestToSpeak ? new Date().toISOString() : options.requestToSpeak === false ? null : undefined,\n        suppress: options.suppressed\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Toggles the request to speak in the channel.\n   * Only applicable for stage channels and for the client's own voice state.\n   * @param {boolean} [requestToSpeak=true] Whether or not the client is requesting to become a speaker.\n   * @example\n   * // Making the client request to speak in a stage channel (raise its hand)\n   * guild.members.me.voice.setRequestToSpeak(true);\n   * @example\n   * // Making the client cancel a request to speak\n   * guild.members.me.voice.setRequestToSpeak(false);\n   * @returns {Promise<VoiceState>}\n   */\n  setRequestToSpeak(requestToSpeak = true) {\n    return this.edit({\n      requestToSpeak\n    });\n  }\n\n  /**\n   * Suppress/unsuppress the user. Only applicable for stage channels.\n   * @param {boolean} [suppressed=true] Whether or not the user should be suppressed.\n   * @example\n   * // Making the client a speaker\n   * guild.members.me.voice.setSuppressed(false);\n   * @example\n   * // Making the client an audience member\n   * guild.members.me.voice.setSuppressed(true);\n   * @example\n   * // Inviting another user to speak\n   * voiceState.setSuppressed(false);\n   * @example\n   * // Moving another user to the audience, or cancelling their invite to speak\n   * voiceState.setSuppressed(true);\n   * @returns {Promise<VoiceState>}\n   */\n  setSuppressed(suppressed = true) {\n    return this.edit({\n      suppressed\n    });\n  }\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionId: true,\n      channelId: 'channel'\n    });\n  }\n}\nmodule.exports = VoiceState;","map":{"version":3,"names":["ChannelType","Routes","require","Base","DiscordjsError","DiscordjsTypeError","ErrorCodes","VoiceState","constructor","guild","data","client","id","user_id","_patch","serverDeaf","deaf","serverMute","mute","selfDeaf","self_deaf","selfMute","self_mute","selfVideo","self_video","sessionId","session_id","streaming","self_stream","channelId","channel_id","suppress","requestToSpeakTimestamp","request_to_speak_timestamp","Date","parse","member","members","cache","get","channel","channels","setMute","reason","edit","setDeaf","disconnect","setChannel","options","type","GuildStageVoice","VoiceNotStageChannel","target","user","requestToSpeak","undefined","VoiceStateNotOwn","includes","VoiceStateInvalidType","suppressed","rest","patch","guildVoiceState","body","toISOString","setRequestToSpeak","setSuppressed","toJSON","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/VoiceState.js"],"sourcesContent":["'use strict';\n\nconst { ChannelType, Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Represents the voice state for a Guild Member.\n * @extends {Base}\n */\nclass VoiceState extends Base {\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n    this.guild = guild;\n    /**\n     * The id of the member of this voice state\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('deaf' in data) {\n      /**\n       * Whether this member is deafened server-wide\n       * @type {?boolean}\n       */\n      this.serverDeaf = data.deaf;\n    } else {\n      this.serverDeaf ??= null;\n    }\n\n    if ('mute' in data) {\n      /**\n       * Whether this member is muted server-wide\n       * @type {?boolean}\n       */\n      this.serverMute = data.mute;\n    } else {\n      this.serverMute ??= null;\n    }\n\n    if ('self_deaf' in data) {\n      /**\n       * Whether this member is self-deafened\n       * @type {?boolean}\n       */\n      this.selfDeaf = data.self_deaf;\n    } else {\n      this.selfDeaf ??= null;\n    }\n\n    if ('self_mute' in data) {\n      /**\n       * Whether this member is self-muted\n       * @type {?boolean}\n       */\n      this.selfMute = data.self_mute;\n    } else {\n      this.selfMute ??= null;\n    }\n\n    if ('self_video' in data) {\n      /**\n       * Whether this member's camera is enabled\n       * @type {?boolean}\n       */\n      this.selfVideo = data.self_video;\n    } else {\n      this.selfVideo ??= null;\n    }\n\n    if ('session_id' in data) {\n      /**\n       * The session id for this member's connection\n       * @type {?string}\n       */\n      this.sessionId = data.session_id;\n    } else {\n      this.sessionId ??= null;\n    }\n\n    // The self_stream is property is omitted if false, check for another property\n    // here to avoid incorrectly clearing this when partial data is specified\n    if ('self_video' in data) {\n      /**\n       * Whether this member is streaming using \"Screen Share\"\n       * @type {?boolean}\n       */\n      this.streaming = data.self_stream ?? false;\n    } else {\n      this.streaming ??= null;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The {@link VoiceChannel} or {@link StageChannel} id the member is in\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n\n    if ('suppress' in data) {\n      /**\n       * Whether this member is suppressed from speaking. This property is specific to stage channels only.\n       * @type {?boolean}\n       */\n      this.suppress = data.suppress;\n    } else {\n      this.suppress ??= null;\n    }\n\n    if ('request_to_speak_timestamp' in data) {\n      /**\n       * The time at which the member requested to speak. This property is specific to stage channels only.\n       * @type {?number}\n       */\n      this.requestToSpeakTimestamp = data.request_to_speak_timestamp && Date.parse(data.request_to_speak_timestamp);\n    } else {\n      this.requestToSpeakTimestamp ??= null;\n    }\n\n    return this;\n  }\n\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * The channel that the member is connected to\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} [mute=true] Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute = true, reason) {\n    return this.guild.members.edit(this.id, { mute, reason });\n  }\n\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} [deaf=true] Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf = true, reason) {\n    return this.guild.members.edit(this.id, { deaf, reason });\n  }\n\n  /**\n   * Disconnects the member from the channel.\n   * @param {string} [reason] Reason for disconnecting the member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n  disconnect(reason) {\n    return this.setChannel(null, reason);\n  }\n\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {GuildVoiceChannelResolvable|null} channel Channel to move the member to, or `null` if you want to\n   * disconnect them from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n  setChannel(channel, reason) {\n    return this.guild.members.edit(this.id, { channel, reason });\n  }\n\n  /**\n   * Data to edit the logged in user's own voice state with, when in a stage channel\n   * @typedef {Object} VoiceStateEditOptions\n   * @property {boolean} [requestToSpeak] Whether or not the client is requesting to become a speaker.\n   * <info>Only available to the logged in user's own voice state.</info>\n   * @property {boolean} [suppressed] Whether or not the user should be suppressed.\n   */\n\n  /**\n   * Edits this voice state. Currently only available when in a stage channel\n   * @param {VoiceStateEditOptions} options The options to provide\n   * @returns {Promise<VoiceState>}\n   */\n  async edit(options) {\n    if (this.channel?.type !== ChannelType.GuildStageVoice) throw new DiscordjsError(ErrorCodes.VoiceNotStageChannel);\n\n    const target = this.client.user.id === this.id ? '@me' : this.id;\n\n    if (target !== '@me' && options.requestToSpeak !== undefined) {\n      throw new DiscordjsError(ErrorCodes.VoiceStateNotOwn);\n    }\n\n    if (!['boolean', 'undefined'].includes(typeof options.requestToSpeak)) {\n      throw new DiscordjsTypeError(ErrorCodes.VoiceStateInvalidType, 'requestToSpeak');\n    }\n\n    if (!['boolean', 'undefined'].includes(typeof options.suppressed)) {\n      throw new DiscordjsTypeError(ErrorCodes.VoiceStateInvalidType, 'suppressed');\n    }\n\n    await this.client.rest.patch(Routes.guildVoiceState(this.guild.id, target), {\n      body: {\n        channel_id: this.channelId,\n        request_to_speak_timestamp: options.requestToSpeak\n          ? new Date().toISOString()\n          : options.requestToSpeak === false\n          ? null\n          : undefined,\n        suppress: options.suppressed,\n      },\n    });\n    return this;\n  }\n\n  /**\n   * Toggles the request to speak in the channel.\n   * Only applicable for stage channels and for the client's own voice state.\n   * @param {boolean} [requestToSpeak=true] Whether or not the client is requesting to become a speaker.\n   * @example\n   * // Making the client request to speak in a stage channel (raise its hand)\n   * guild.members.me.voice.setRequestToSpeak(true);\n   * @example\n   * // Making the client cancel a request to speak\n   * guild.members.me.voice.setRequestToSpeak(false);\n   * @returns {Promise<VoiceState>}\n   */\n  setRequestToSpeak(requestToSpeak = true) {\n    return this.edit({ requestToSpeak });\n  }\n\n  /**\n   * Suppress/unsuppress the user. Only applicable for stage channels.\n   * @param {boolean} [suppressed=true] Whether or not the user should be suppressed.\n   * @example\n   * // Making the client a speaker\n   * guild.members.me.voice.setSuppressed(false);\n   * @example\n   * // Making the client an audience member\n   * guild.members.me.voice.setSuppressed(true);\n   * @example\n   * // Inviting another user to speak\n   * voiceState.setSuppressed(false);\n   * @example\n   * // Moving another user to the audience, or cancelling their invite to speak\n   * voiceState.setSuppressed(true);\n   * @returns {Promise<VoiceState>}\n   */\n  setSuppressed(suppressed = true) {\n    return this.edit({ suppressed });\n  }\n\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionId: true,\n      channelId: 'channel',\n    });\n  }\n}\n\nmodule.exports = VoiceState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}