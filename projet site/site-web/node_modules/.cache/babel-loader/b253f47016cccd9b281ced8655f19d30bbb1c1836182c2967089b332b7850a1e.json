{"ast":null,"code":"'use strict';\n\nconst {\n  GatewayOpcodes,\n  ActivityType\n} = require('discord-api-types/v10');\nconst {\n  Presence\n} = require('./Presence');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents the client's presence.\n * @extends {Presence}\n */\nclass ClientPresence extends Presence {\n  constructor(client, data = {}) {\n    super(client, Object.assign(data, {\n      status: data.status ?? 'online',\n      user: {\n        id: null\n      }\n    }));\n  }\n\n  /**\n   * Sets the client's presence\n   * @param {PresenceData} presence The data to set the presence to\n   * @returns {ClientPresence}\n   */\n  set(presence) {\n    const packet = this._parse(presence);\n    this._patch(packet);\n    if (presence.shardId === undefined) {\n      this.client.ws.broadcast({\n        op: GatewayOpcodes.PresenceUpdate,\n        d: packet\n      });\n    } else if (Array.isArray(presence.shardId)) {\n      for (const shardId of presence.shardId) {\n        this.client.ws.shards.get(shardId).send({\n          op: GatewayOpcodes.PresenceUpdate,\n          d: packet\n        });\n      }\n    } else {\n      this.client.ws.shards.get(presence.shardId).send({\n        op: GatewayOpcodes.PresenceUpdate,\n        d: packet\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Parses presence data into a packet ready to be sent to Discord\n   * @param {PresenceData} presence The data to parse\n   * @returns {APIPresence}\n   * @private\n   */\n  _parse({\n    status,\n    since,\n    afk,\n    activities\n  }) {\n    const data = {\n      activities: [],\n      afk: typeof afk === 'boolean' ? afk : false,\n      since: typeof since === 'number' && !Number.isNaN(since) ? since : null,\n      status: status ?? this.status\n    };\n    if (activities?.length) {\n      for (const [i, activity] of activities.entries()) {\n        if (typeof activity.name !== 'string') {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidType, `activities[${i}].name`, 'string');\n        }\n        activity.type ??= ActivityType.Playing;\n        if (activity.type === ActivityType.Custom && !activity.state) {\n          activity.state = activity.name;\n          activity.name = 'Custom Status';\n        }\n        data.activities.push({\n          type: activity.type,\n          name: activity.name,\n          state: activity.state,\n          url: activity.url\n        });\n      }\n    } else if (!activities && (status || afk || since) && this.activities.length) {\n      data.activities.push(...this.activities.map(a => ({\n        name: a.name,\n        state: a.state ?? undefined,\n        type: a.type,\n        url: a.url ?? undefined\n      })));\n    }\n    return data;\n  }\n}\nmodule.exports = ClientPresence;\n\n/* eslint-disable max-len */\n/**\n * @external APIPresence\n * @see {@link https://discord.com/developers/docs/rich-presence/how-to#updating-presence-update-presence-payload-fields}\n */","map":{"version":3,"names":["GatewayOpcodes","ActivityType","require","Presence","DiscordjsTypeError","ErrorCodes","ClientPresence","constructor","client","data","Object","assign","status","user","id","set","presence","packet","_parse","_patch","shardId","undefined","ws","broadcast","op","PresenceUpdate","d","Array","isArray","shards","get","send","since","afk","activities","Number","isNaN","length","i","activity","entries","name","InvalidType","type","Playing","Custom","state","push","url","map","a","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/ClientPresence.js"],"sourcesContent":["'use strict';\n\nconst { GatewayOpcodes, ActivityType } = require('discord-api-types/v10');\nconst { Presence } = require('./Presence');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Represents the client's presence.\n * @extends {Presence}\n */\nclass ClientPresence extends Presence {\n  constructor(client, data = {}) {\n    super(client, Object.assign(data, { status: data.status ?? 'online', user: { id: null } }));\n  }\n\n  /**\n   * Sets the client's presence\n   * @param {PresenceData} presence The data to set the presence to\n   * @returns {ClientPresence}\n   */\n  set(presence) {\n    const packet = this._parse(presence);\n    this._patch(packet);\n    if (presence.shardId === undefined) {\n      this.client.ws.broadcast({ op: GatewayOpcodes.PresenceUpdate, d: packet });\n    } else if (Array.isArray(presence.shardId)) {\n      for (const shardId of presence.shardId) {\n        this.client.ws.shards.get(shardId).send({ op: GatewayOpcodes.PresenceUpdate, d: packet });\n      }\n    } else {\n      this.client.ws.shards.get(presence.shardId).send({ op: GatewayOpcodes.PresenceUpdate, d: packet });\n    }\n    return this;\n  }\n\n  /**\n   * Parses presence data into a packet ready to be sent to Discord\n   * @param {PresenceData} presence The data to parse\n   * @returns {APIPresence}\n   * @private\n   */\n  _parse({ status, since, afk, activities }) {\n    const data = {\n      activities: [],\n      afk: typeof afk === 'boolean' ? afk : false,\n      since: typeof since === 'number' && !Number.isNaN(since) ? since : null,\n      status: status ?? this.status,\n    };\n    if (activities?.length) {\n      for (const [i, activity] of activities.entries()) {\n        if (typeof activity.name !== 'string') {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidType, `activities[${i}].name`, 'string');\n        }\n\n        activity.type ??= ActivityType.Playing;\n\n        if (activity.type === ActivityType.Custom && !activity.state) {\n          activity.state = activity.name;\n          activity.name = 'Custom Status';\n        }\n\n        data.activities.push({\n          type: activity.type,\n          name: activity.name,\n          state: activity.state,\n          url: activity.url,\n        });\n      }\n    } else if (!activities && (status || afk || since) && this.activities.length) {\n      data.activities.push(\n        ...this.activities.map(a => ({\n          name: a.name,\n          state: a.state ?? undefined,\n          type: a.type,\n          url: a.url ?? undefined,\n        })),\n      );\n    }\n\n    return data;\n  }\n}\n\nmodule.exports = ClientPresence;\n\n/* eslint-disable max-len */\n/**\n * @external APIPresence\n * @see {@link https://discord.com/developers/docs/rich-presence/how-to#updating-presence-update-presence-payload-fields}\n */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}