{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  makeURLSearchParams\n} = require('@discordjs/rest');\nconst {\n  isJSONEncodable\n} = require('@discordjs/util');\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst ApplicationCommandPermissionsManager = require('./ApplicationCommandPermissionsManager');\nconst CachedManager = require('./CachedManager');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst ApplicationCommand = require('../structures/ApplicationCommand');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Manages API methods for application commands and stores their cache.\n * @extends {CachedManager}\n */\nclass ApplicationCommandManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, ApplicationCommand, iterable);\n\n    /**\n     * The manager for permissions of arbitrary commands on arbitrary guilds\n     * @type {ApplicationCommandPermissionsManager}\n     */\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, ApplicationCommand>}\n   * @name ApplicationCommandManager#cache\n   */\n\n  _add(data, cache, guildId) {\n    return super._add(data, cache, {\n      extras: [this.guild, guildId]\n    });\n  }\n\n  /**\n   * The APIRouter path to the commands\n   * @param {Snowflake} [options.id] The application command's id\n   * @param {Snowflake} [options.guildId] The guild's id to use in the path,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {string}\n   * @private\n   */\n  commandPath({\n    id,\n    guildId\n  } = {}) {\n    if (this.guild ?? guildId) {\n      if (id) {\n        return Routes.applicationGuildCommand(this.client.application.id, this.guild?.id ?? guildId, id);\n      }\n      return Routes.applicationGuildCommands(this.client.application.id, this.guild?.id ?? guildId);\n    }\n    if (id) {\n      return Routes.applicationCommand(this.client.application.id, id);\n    }\n    return Routes.applicationCommands(this.client.application.id);\n  }\n\n  /**\n   * Data that resolves to give an ApplicationCommand object. This can be:\n   * * An ApplicationCommand object\n   * * A Snowflake\n   * @typedef {ApplicationCommand|Snowflake} ApplicationCommandResolvable\n   */\n\n  /**\n   * Data that resolves to the data of an ApplicationCommand\n   * @typedef {ApplicationCommandData|APIApplicationCommand} ApplicationCommandDataResolvable\n   */\n\n  /**\n   * Options used to fetch data from Discord\n   * @typedef {Object} BaseFetchOptions\n   * @property {boolean} [cache=true] Whether to cache the fetched data if it wasn't already\n   * @property {boolean} [force=false] Whether to skip the cache check and request the API\n   */\n\n  /**\n   * Options used to fetch Application Commands from Discord\n   * @typedef {BaseFetchOptions} FetchApplicationCommandOptions\n   * @property {Snowflake} [guildId] The guild's id to fetch commands for, for when the guild is not cached\n   * @property {LocaleString} [locale] The locale to use when fetching this command\n   * @property {boolean} [withLocalizations] Whether to fetch all localization data\n   */\n\n  /**\n   * Obtains one or multiple application commands from Discord, or the cache if it's already available.\n   * @param {Snowflake} [id] The application command's id\n   * @param {FetchApplicationCommandOptions} [options] Additional options for this fetch\n   * @returns {Promise<ApplicationCommand|Collection<Snowflake, ApplicationCommand>>}\n   * @example\n   * // Fetch a single command\n   * client.application.commands.fetch('123456789012345678')\n   *   .then(command => console.log(`Fetched command ${command.name}`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch all commands\n   * guild.commands.fetch()\n   *   .then(commands => console.log(`Fetched ${commands.size} commands`))\n   *   .catch(console.error);\n   */\n  async fetch(id, {\n    guildId,\n    cache = true,\n    force = false,\n    locale,\n    withLocalizations\n  } = {}) {\n    if (typeof id === 'object') {\n      ({\n        guildId,\n        cache = true,\n        locale,\n        withLocalizations\n      } = id);\n    } else if (id) {\n      if (!force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n      const command = await this.client.rest.get(this.commandPath({\n        id,\n        guildId\n      }));\n      return this._add(command, cache);\n    }\n    const data = await this.client.rest.get(this.commandPath({\n      guildId\n    }), {\n      headers: {\n        'X-Discord-Locale': locale\n      },\n      query: makeURLSearchParams({\n        with_localizations: withLocalizations\n      })\n    });\n    return data.reduce((coll, command) => coll.set(command.id, this._add(command, cache, guildId)), new Collection());\n  }\n\n  /**\n   * Creates an application command.\n   * @param {ApplicationCommandDataResolvable} command The command\n   * @param {Snowflake} [guildId] The guild's id to create this command in,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Create a new command\n   * client.application.commands.create({\n   *   name: 'test',\n   *   description: 'A test command',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async create(command, guildId) {\n    const data = await this.client.rest.post(this.commandPath({\n      guildId\n    }), {\n      body: this.constructor.transformCommand(command)\n    });\n    return this._add(data, true, guildId);\n  }\n\n  /**\n   * Sets all the commands for this application or guild.\n   * @param {ApplicationCommandDataResolvable[]} commands The commands\n   * @param {Snowflake} [guildId] The guild's id to create the commands in,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<Collection<Snowflake, ApplicationCommand>>}\n   * @example\n   * // Set all commands to just this one\n   * client.application.commands.set([\n   *   {\n   *     name: 'test',\n   *     description: 'A test command',\n   *   },\n   * ])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all commands\n   * guild.commands.set([])\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async set(commands, guildId) {\n    const data = await this.client.rest.put(this.commandPath({\n      guildId\n    }), {\n      body: commands.map(c => this.constructor.transformCommand(c))\n    });\n    return data.reduce((coll, command) => coll.set(command.id, this._add(command, true, guildId)), new Collection());\n  }\n\n  /**\n   * Edits an application command.\n   * @param {ApplicationCommandResolvable} command The command to edit\n   * @param {Partial<ApplicationCommandDataResolvable>} data The data to update the command with\n   * @param {Snowflake} [guildId] The guild's id where the command registered,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit an existing command\n   * client.application.commands.edit('123456789012345678', {\n   *   description: 'New description',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async edit(command, data, guildId) {\n    const id = this.resolveId(command);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');\n    const patched = await this.client.rest.patch(this.commandPath({\n      id,\n      guildId\n    }), {\n      body: this.constructor.transformCommand(data)\n    });\n    return this._add(patched, true, guildId);\n  }\n\n  /**\n   * Deletes an application command.\n   * @param {ApplicationCommandResolvable} command The command to delete\n   * @param {Snowflake} [guildId] The guild's id where the command is registered,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<?ApplicationCommand>}\n   * @example\n   * // Delete a command\n   * guild.commands.delete('123456789012345678')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete(command, guildId) {\n    const id = this.resolveId(command);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');\n    await this.client.rest.delete(this.commandPath({\n      id,\n      guildId\n    }));\n    const cached = this.cache.get(id);\n    this.cache.delete(id);\n    return cached ?? null;\n  }\n\n  /**\n   * Transforms an {@link ApplicationCommandData} object into something that can be used with the API.\n   * @param {ApplicationCommandDataResolvable} command The command to transform\n   * @returns {APIApplicationCommand}\n   * @private\n   */\n  static transformCommand(command) {\n    if (isJSONEncodable(command)) return command.toJSON();\n    let default_member_permissions;\n    if ('default_member_permissions' in command) {\n      default_member_permissions = command.default_member_permissions ? new PermissionsBitField(BigInt(command.default_member_permissions)).bitfield.toString() : command.default_member_permissions;\n    }\n    if ('defaultMemberPermissions' in command) {\n      default_member_permissions = command.defaultMemberPermissions !== null ? new PermissionsBitField(command.defaultMemberPermissions).bitfield.toString() : command.defaultMemberPermissions;\n    }\n    return {\n      name: command.name,\n      name_localizations: command.nameLocalizations ?? command.name_localizations,\n      description: command.description,\n      nsfw: command.nsfw,\n      description_localizations: command.descriptionLocalizations ?? command.description_localizations,\n      type: command.type,\n      options: command.options?.map(o => ApplicationCommand.transformOption(o)),\n      default_member_permissions,\n      dm_permission: command.dmPermission ?? command.dm_permission\n    };\n  }\n}\nmodule.exports = ApplicationCommandManager;","map":{"version":3,"names":["Collection","require","makeURLSearchParams","isJSONEncodable","Routes","ApplicationCommandPermissionsManager","CachedManager","DiscordjsTypeError","ErrorCodes","ApplicationCommand","PermissionsBitField","ApplicationCommandManager","constructor","client","iterable","permissions","_add","data","cache","guildId","extras","guild","commandPath","id","applicationGuildCommand","application","applicationGuildCommands","applicationCommand","applicationCommands","fetch","force","locale","withLocalizations","existing","get","command","rest","headers","query","with_localizations","reduce","coll","set","create","post","body","transformCommand","commands","put","map","c","edit","resolveId","InvalidType","patched","patch","delete","cached","toJSON","default_member_permissions","BigInt","bitfield","toString","defaultMemberPermissions","name","name_localizations","nameLocalizations","description","nsfw","description_localizations","descriptionLocalizations","type","options","o","transformOption","dm_permission","dmPermission","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/managers/ApplicationCommandManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { Routes } = require('discord-api-types/v10');\nconst ApplicationCommandPermissionsManager = require('./ApplicationCommandPermissionsManager');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst ApplicationCommand = require('../structures/ApplicationCommand');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Manages API methods for application commands and stores their cache.\n * @extends {CachedManager}\n */\nclass ApplicationCommandManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, ApplicationCommand, iterable);\n\n    /**\n     * The manager for permissions of arbitrary commands on arbitrary guilds\n     * @type {ApplicationCommandPermissionsManager}\n     */\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, ApplicationCommand>}\n   * @name ApplicationCommandManager#cache\n   */\n\n  _add(data, cache, guildId) {\n    return super._add(data, cache, { extras: [this.guild, guildId] });\n  }\n\n  /**\n   * The APIRouter path to the commands\n   * @param {Snowflake} [options.id] The application command's id\n   * @param {Snowflake} [options.guildId] The guild's id to use in the path,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {string}\n   * @private\n   */\n  commandPath({ id, guildId } = {}) {\n    if (this.guild ?? guildId) {\n      if (id) {\n        return Routes.applicationGuildCommand(this.client.application.id, this.guild?.id ?? guildId, id);\n      }\n\n      return Routes.applicationGuildCommands(this.client.application.id, this.guild?.id ?? guildId);\n    }\n\n    if (id) {\n      return Routes.applicationCommand(this.client.application.id, id);\n    }\n\n    return Routes.applicationCommands(this.client.application.id);\n  }\n\n  /**\n   * Data that resolves to give an ApplicationCommand object. This can be:\n   * * An ApplicationCommand object\n   * * A Snowflake\n   * @typedef {ApplicationCommand|Snowflake} ApplicationCommandResolvable\n   */\n\n  /**\n   * Data that resolves to the data of an ApplicationCommand\n   * @typedef {ApplicationCommandData|APIApplicationCommand} ApplicationCommandDataResolvable\n   */\n\n  /**\n   * Options used to fetch data from Discord\n   * @typedef {Object} BaseFetchOptions\n   * @property {boolean} [cache=true] Whether to cache the fetched data if it wasn't already\n   * @property {boolean} [force=false] Whether to skip the cache check and request the API\n   */\n\n  /**\n   * Options used to fetch Application Commands from Discord\n   * @typedef {BaseFetchOptions} FetchApplicationCommandOptions\n   * @property {Snowflake} [guildId] The guild's id to fetch commands for, for when the guild is not cached\n   * @property {LocaleString} [locale] The locale to use when fetching this command\n   * @property {boolean} [withLocalizations] Whether to fetch all localization data\n   */\n\n  /**\n   * Obtains one or multiple application commands from Discord, or the cache if it's already available.\n   * @param {Snowflake} [id] The application command's id\n   * @param {FetchApplicationCommandOptions} [options] Additional options for this fetch\n   * @returns {Promise<ApplicationCommand|Collection<Snowflake, ApplicationCommand>>}\n   * @example\n   * // Fetch a single command\n   * client.application.commands.fetch('123456789012345678')\n   *   .then(command => console.log(`Fetched command ${command.name}`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch all commands\n   * guild.commands.fetch()\n   *   .then(commands => console.log(`Fetched ${commands.size} commands`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { guildId, cache = true, force = false, locale, withLocalizations } = {}) {\n    if (typeof id === 'object') {\n      ({ guildId, cache = true, locale, withLocalizations } = id);\n    } else if (id) {\n      if (!force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n      const command = await this.client.rest.get(this.commandPath({ id, guildId }));\n      return this._add(command, cache);\n    }\n\n    const data = await this.client.rest.get(this.commandPath({ guildId }), {\n      headers: {\n        'X-Discord-Locale': locale,\n      },\n      query: makeURLSearchParams({ with_localizations: withLocalizations }),\n    });\n    return data.reduce((coll, command) => coll.set(command.id, this._add(command, cache, guildId)), new Collection());\n  }\n\n  /**\n   * Creates an application command.\n   * @param {ApplicationCommandDataResolvable} command The command\n   * @param {Snowflake} [guildId] The guild's id to create this command in,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Create a new command\n   * client.application.commands.create({\n   *   name: 'test',\n   *   description: 'A test command',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async create(command, guildId) {\n    const data = await this.client.rest.post(this.commandPath({ guildId }), {\n      body: this.constructor.transformCommand(command),\n    });\n    return this._add(data, true, guildId);\n  }\n\n  /**\n   * Sets all the commands for this application or guild.\n   * @param {ApplicationCommandDataResolvable[]} commands The commands\n   * @param {Snowflake} [guildId] The guild's id to create the commands in,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<Collection<Snowflake, ApplicationCommand>>}\n   * @example\n   * // Set all commands to just this one\n   * client.application.commands.set([\n   *   {\n   *     name: 'test',\n   *     description: 'A test command',\n   *   },\n   * ])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all commands\n   * guild.commands.set([])\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async set(commands, guildId) {\n    const data = await this.client.rest.put(this.commandPath({ guildId }), {\n      body: commands.map(c => this.constructor.transformCommand(c)),\n    });\n    return data.reduce((coll, command) => coll.set(command.id, this._add(command, true, guildId)), new Collection());\n  }\n\n  /**\n   * Edits an application command.\n   * @param {ApplicationCommandResolvable} command The command to edit\n   * @param {Partial<ApplicationCommandDataResolvable>} data The data to update the command with\n   * @param {Snowflake} [guildId] The guild's id where the command registered,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit an existing command\n   * client.application.commands.edit('123456789012345678', {\n   *   description: 'New description',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async edit(command, data, guildId) {\n    const id = this.resolveId(command);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');\n\n    const patched = await this.client.rest.patch(this.commandPath({ id, guildId }), {\n      body: this.constructor.transformCommand(data),\n    });\n    return this._add(patched, true, guildId);\n  }\n\n  /**\n   * Deletes an application command.\n   * @param {ApplicationCommandResolvable} command The command to delete\n   * @param {Snowflake} [guildId] The guild's id where the command is registered,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<?ApplicationCommand>}\n   * @example\n   * // Delete a command\n   * guild.commands.delete('123456789012345678')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete(command, guildId) {\n    const id = this.resolveId(command);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');\n\n    await this.client.rest.delete(this.commandPath({ id, guildId }));\n\n    const cached = this.cache.get(id);\n    this.cache.delete(id);\n    return cached ?? null;\n  }\n\n  /**\n   * Transforms an {@link ApplicationCommandData} object into something that can be used with the API.\n   * @param {ApplicationCommandDataResolvable} command The command to transform\n   * @returns {APIApplicationCommand}\n   * @private\n   */\n  static transformCommand(command) {\n    if (isJSONEncodable(command)) return command.toJSON();\n\n    let default_member_permissions;\n\n    if ('default_member_permissions' in command) {\n      default_member_permissions = command.default_member_permissions\n        ? new PermissionsBitField(BigInt(command.default_member_permissions)).bitfield.toString()\n        : command.default_member_permissions;\n    }\n\n    if ('defaultMemberPermissions' in command) {\n      default_member_permissions =\n        command.defaultMemberPermissions !== null\n          ? new PermissionsBitField(command.defaultMemberPermissions).bitfield.toString()\n          : command.defaultMemberPermissions;\n    }\n\n    return {\n      name: command.name,\n      name_localizations: command.nameLocalizations ?? command.name_localizations,\n      description: command.description,\n      nsfw: command.nsfw,\n      description_localizations: command.descriptionLocalizations ?? command.description_localizations,\n      type: command.type,\n      options: command.options?.map(o => ApplicationCommand.transformOption(o)),\n      default_member_permissions,\n      dm_permission: command.dmPermission ?? command.dm_permission,\n    };\n  }\n}\n\nmodule.exports = ApplicationCommandManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}