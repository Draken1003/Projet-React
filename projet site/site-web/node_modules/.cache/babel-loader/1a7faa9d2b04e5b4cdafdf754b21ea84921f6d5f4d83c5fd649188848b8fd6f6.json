{"ast":null,"code":"'use strict';\n\nconst {\n  DefaultRestOptions,\n  DefaultUserAgentAppendix\n} = require('@discordjs/rest');\nconst {\n  toSnakeCase\n} = require('./Transformers');\nconst {\n  version\n} = require('../../package.json');\n\n// TODO(ckohen): switch order of params so full manager is first and \"type\" is optional\n/**\n * @typedef {Function} CacheFactory\n * @param {Function} managerType The base manager class the cache is being requested from.\n * @param {Function} holds The class that the cache will hold.\n * @param {Function} manager The fully extended manager class the cache is being requested from.\n * @returns {Collection} A Collection used to store the cache of the manager.\n */\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {number|number[]|string} [shards] The shard's id to run, or an array of shard ids. If not specified,\n * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\n * recommended amount of shards from Discord and spawn that amount\n * @property {number} [closeTimeout=5_000] The amount of time in milliseconds to wait for the close frame to be received\n * from the WebSocket. Don't have this too high/low. Its best to have it between 2_000-6_000 ms.\n * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot\n * (e.g. recommended shard count, shard count of the ShardingManager)\n * @property {CacheFactory} [makeCache] Function to create a cache.\n * You can use your own function, or the {@link Options} class to customize the Collection used for the cache.\n * <warn>Overriding the cache used in `GuildManager`, `ChannelManager`, `GuildChannelManager`, `RoleManager`,\n * and `PermissionOverwriteManager` is unsupported and **will** break functionality</warn>\n * @property {MessageMentionOptions} [allowedMentions] The default value for {@link BaseMessageOptions#allowedMentions}\n * @property {Partials[]} [partials] Structures allowed to be partial. This means events can be emitted even when\n * they're missing all the data for a particular structure. See the \"Partial Structures\" topic on the\n * [guide](https://discordjs.guide/popular-topics/partials.html) for some\n * important usage information, as partials require you to put checks in place when handling data.\n * @property {boolean} [failIfNotExists=true] The default value for {@link MessageReplyOptions#failIfNotExists}\n * @property {PresenceData} [presence={}] Presence data to use upon login\n * @property {IntentsResolvable} intents Intents to enable for this connection\n * @property {number} [waitGuildTimeout=15_000] Time in milliseconds that clients with the\n * {@link GatewayIntentBits.Guilds} gateway intent should wait for missing guilds to be received before being ready.\n * @property {SweeperOptions} [sweepers=this.DefaultSweeperSettings] Options for cache sweeping\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {RESTOptions} [rest] Options for the REST manager\n * @property {Function} [jsonTransformer] A function used to transform outgoing json data\n */\n\n/**\n * Options for {@link Sweepers} defining the behavior of cache sweeping\n * @typedef {Object<SweeperKey, SweepOptions>} SweeperOptions\n */\n\n/**\n * Options for sweeping a single type of item from cache\n * @typedef {Object} SweepOptions\n * @property {number} interval The interval (in seconds) at which to perform sweeping of the item\n * @property {number} [lifetime] How long an item should stay in cache until it is considered sweepable.\n * <warn>This property is only valid for the `invites`, `messages`, and `threads` keys. The `filter` property\n * is mutually exclusive to this property and takes priority</warn>\n * @property {GlobalSweepFilter} filter The function used to determine the function passed to the sweep method\n * <info>This property is optional when the key is `invites`, `messages`, or `threads` and `lifetime` is set</info>\n */\n\n/**\n * A function to determine what strategy to use for sharding internally.\n * ```js\n * (manager) => new WorkerShardingStrategy(manager, { shardsPerWorker: 2 })\n * ```\n * @typedef {Function} BuildStrategyFunction\n * @param {WSWebSocketManager} manager The WebSocketManager that is going to initiate the sharding\n * @returns {IShardingStrategy} The strategy to use for sharding\n */\n\n/**\n * A function to change the concurrency handling for shard identifies of this manager\n * ```js\n * async (manager) => {\n *   const gateway = await manager.fetchGatewayInformation();\n *   return new SimpleIdentifyThrottler(gateway.session_start_limit.max_concurrency);\n * }\n * ```\n * @typedef {Function} IdentifyThrottlerFunction\n * @param {WSWebSocketManager} manager The WebSocketManager that is going to initiate the sharding\n * @returns {Awaitable<IIdentifyThrottler>} The identify throttler that this ws manager will use\n */\n\n/**\n * WebSocket options (these are left as snake_case to match the API)\n * @typedef {Object} WebsocketOptions\n * @property {number} [large_threshold=50] Number of members in a guild after which offline users will no longer be\n * sent in the initial guild member list, must be between 50 and 250\n * @property {number} [version=10] The Discord gateway version to use <warn>Changing this can break the library;\n * only set this if you know what you are doing</warn>\n * @property {BuildStrategyFunction} [buildStrategy] Builds the strategy to use for sharding\n * @property {IdentifyThrottlerFunction} [buildIdentifyThrottler] Builds the identify throttler to use for sharding\n */\n\n/**\n * Contains various utilities for client options.\n */\nclass Options extends null {\n  /**\n   * The default user agent appendix.\n   * @type {string}\n   * @memberof Options\n   * @private\n   */\n  static userAgentAppendix = `discord.js/${version} ${DefaultUserAgentAppendix}`.trimEnd();\n\n  /**\n   * The default client options.\n   * @returns {ClientOptions}\n   */\n  static createDefault() {\n    return {\n      closeTimeout: 5_000,\n      waitGuildTimeout: 15_000,\n      shardCount: 1,\n      makeCache: this.cacheWithLimits(this.DefaultMakeCacheSettings),\n      partials: [],\n      failIfNotExists: true,\n      presence: {},\n      sweepers: this.DefaultSweeperSettings,\n      ws: {\n        large_threshold: 50,\n        version: 10\n      },\n      rest: {\n        ...DefaultRestOptions,\n        userAgentAppendix: this.userAgentAppendix\n      },\n      jsonTransformer: toSnakeCase\n    };\n  }\n\n  /**\n   * Create a cache factory using predefined settings to sweep or limit.\n   * @param {Object<string, LimitedCollectionOptions|number>} [settings={}] Settings passed to the relevant constructor.\n   * If no setting is provided for a manager, it uses Collection.\n   * If a number is provided for a manager, it uses that number as the max size for a LimitedCollection.\n   * If LimitedCollectionOptions are provided for a manager, it uses those settings to form a LimitedCollection.\n   * @returns {CacheFactory}\n   * @example\n   * // Store up to 200 messages per channel and 200 members per guild, always keeping the client member.\n   * Options.cacheWithLimits({\n   *    MessageManager: 200,\n   *    GuildMemberManager: {\n   *      maxSize: 200,\n   *      keepOverLimit: (member) => member.id === client.user.id,\n   *    },\n   *  });\n   */\n  static cacheWithLimits(settings = {}) {\n    const {\n      Collection\n    } = require('@discordjs/collection');\n    const LimitedCollection = require('./LimitedCollection');\n    return (managerType, _, manager) => {\n      const setting = settings[manager.name] ?? settings[managerType.name];\n      /* eslint-disable-next-line eqeqeq */\n      if (setting == null) {\n        return new Collection();\n      }\n      if (typeof setting === 'number') {\n        if (setting === Infinity) {\n          return new Collection();\n        }\n        return new LimitedCollection({\n          maxSize: setting\n        });\n      }\n      /* eslint-disable-next-line eqeqeq */\n      const noLimit = setting.maxSize == null || setting.maxSize === Infinity;\n      if (noLimit) {\n        return new Collection();\n      }\n      return new LimitedCollection(setting);\n    };\n  }\n\n  /**\n   * Create a cache factory that always caches everything.\n   * @returns {CacheFactory}\n   */\n  static cacheEverything() {\n    const {\n      Collection\n    } = require('@discordjs/collection');\n    return () => new Collection();\n  }\n\n  /**\n   * The default settings passed to {@link ClientOptions.makeCache}.\n   * The caches that this changes are:\n   * * `MessageManager` - Limit to 200 messages\n   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n   * `makeCache: Options.cacheWithLimits({ ...Options.DefaultMakeCacheSettings, ReactionManager: 0 })`</info>\n   * @type {Object<string, LimitedCollectionOptions|number>}\n   */\n  static get DefaultMakeCacheSettings() {\n    return {\n      MessageManager: 200\n    };\n  }\n\n  /**\n   * The default settings passed to {@link ClientOptions.sweepers}.\n   * The sweepers that this changes are:\n   * * `threads` - Sweep archived threads every hour, removing those archived more than 4 hours ago\n   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n   * `sweepers: { ...Options.DefaultSweeperSettings, messages: { interval: 300, lifetime: 600 } }`</info>\n   * @type {SweeperOptions}\n   */\n  static get DefaultSweeperSettings() {\n    return {\n      threads: {\n        interval: 3600,\n        lifetime: 14400\n      }\n    };\n  }\n}\nmodule.exports = Options;\n\n/**\n * @external RESTOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/RESTOptions:Interface}\n */\n\n/**\n * @external WSWebSocketManager\n * @see {@link https://discord.js.org/docs/packages/ws/stable/WebSocketManager:Class}\n */\n\n/**\n * @external IShardingStrategy\n * @see {@link https://discord.js.org/docs/packages/ws/stable/IShardingStrategy:Interface}\n */\n\n/**\n * @external IIdentifyThrottler\n * @see {@link https://discord.js.org/docs/packages/ws/stable/IIdentifyThrottler:Interface}\n */","map":{"version":3,"names":["DefaultRestOptions","DefaultUserAgentAppendix","require","toSnakeCase","version","Options","userAgentAppendix","trimEnd","createDefault","closeTimeout","waitGuildTimeout","shardCount","makeCache","cacheWithLimits","DefaultMakeCacheSettings","partials","failIfNotExists","presence","sweepers","DefaultSweeperSettings","ws","large_threshold","rest","jsonTransformer","settings","Collection","LimitedCollection","managerType","_","manager","setting","name","Infinity","maxSize","noLimit","cacheEverything","MessageManager","threads","interval","lifetime","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/util/Options.js"],"sourcesContent":["'use strict';\n\nconst { DefaultRestOptions, DefaultUserAgentAppendix } = require('@discordjs/rest');\nconst { toSnakeCase } = require('./Transformers');\nconst { version } = require('../../package.json');\n\n// TODO(ckohen): switch order of params so full manager is first and \"type\" is optional\n/**\n * @typedef {Function} CacheFactory\n * @param {Function} managerType The base manager class the cache is being requested from.\n * @param {Function} holds The class that the cache will hold.\n * @param {Function} manager The fully extended manager class the cache is being requested from.\n * @returns {Collection} A Collection used to store the cache of the manager.\n */\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {number|number[]|string} [shards] The shard's id to run, or an array of shard ids. If not specified,\n * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\n * recommended amount of shards from Discord and spawn that amount\n * @property {number} [closeTimeout=5_000] The amount of time in milliseconds to wait for the close frame to be received\n * from the WebSocket. Don't have this too high/low. Its best to have it between 2_000-6_000 ms.\n * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot\n * (e.g. recommended shard count, shard count of the ShardingManager)\n * @property {CacheFactory} [makeCache] Function to create a cache.\n * You can use your own function, or the {@link Options} class to customize the Collection used for the cache.\n * <warn>Overriding the cache used in `GuildManager`, `ChannelManager`, `GuildChannelManager`, `RoleManager`,\n * and `PermissionOverwriteManager` is unsupported and **will** break functionality</warn>\n * @property {MessageMentionOptions} [allowedMentions] The default value for {@link BaseMessageOptions#allowedMentions}\n * @property {Partials[]} [partials] Structures allowed to be partial. This means events can be emitted even when\n * they're missing all the data for a particular structure. See the \"Partial Structures\" topic on the\n * [guide](https://discordjs.guide/popular-topics/partials.html) for some\n * important usage information, as partials require you to put checks in place when handling data.\n * @property {boolean} [failIfNotExists=true] The default value for {@link MessageReplyOptions#failIfNotExists}\n * @property {PresenceData} [presence={}] Presence data to use upon login\n * @property {IntentsResolvable} intents Intents to enable for this connection\n * @property {number} [waitGuildTimeout=15_000] Time in milliseconds that clients with the\n * {@link GatewayIntentBits.Guilds} gateway intent should wait for missing guilds to be received before being ready.\n * @property {SweeperOptions} [sweepers=this.DefaultSweeperSettings] Options for cache sweeping\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {RESTOptions} [rest] Options for the REST manager\n * @property {Function} [jsonTransformer] A function used to transform outgoing json data\n */\n\n/**\n * Options for {@link Sweepers} defining the behavior of cache sweeping\n * @typedef {Object<SweeperKey, SweepOptions>} SweeperOptions\n */\n\n/**\n * Options for sweeping a single type of item from cache\n * @typedef {Object} SweepOptions\n * @property {number} interval The interval (in seconds) at which to perform sweeping of the item\n * @property {number} [lifetime] How long an item should stay in cache until it is considered sweepable.\n * <warn>This property is only valid for the `invites`, `messages`, and `threads` keys. The `filter` property\n * is mutually exclusive to this property and takes priority</warn>\n * @property {GlobalSweepFilter} filter The function used to determine the function passed to the sweep method\n * <info>This property is optional when the key is `invites`, `messages`, or `threads` and `lifetime` is set</info>\n */\n\n/**\n * A function to determine what strategy to use for sharding internally.\n * ```js\n * (manager) => new WorkerShardingStrategy(manager, { shardsPerWorker: 2 })\n * ```\n * @typedef {Function} BuildStrategyFunction\n * @param {WSWebSocketManager} manager The WebSocketManager that is going to initiate the sharding\n * @returns {IShardingStrategy} The strategy to use for sharding\n */\n\n/**\n * A function to change the concurrency handling for shard identifies of this manager\n * ```js\n * async (manager) => {\n *   const gateway = await manager.fetchGatewayInformation();\n *   return new SimpleIdentifyThrottler(gateway.session_start_limit.max_concurrency);\n * }\n * ```\n * @typedef {Function} IdentifyThrottlerFunction\n * @param {WSWebSocketManager} manager The WebSocketManager that is going to initiate the sharding\n * @returns {Awaitable<IIdentifyThrottler>} The identify throttler that this ws manager will use\n */\n\n/**\n * WebSocket options (these are left as snake_case to match the API)\n * @typedef {Object} WebsocketOptions\n * @property {number} [large_threshold=50] Number of members in a guild after which offline users will no longer be\n * sent in the initial guild member list, must be between 50 and 250\n * @property {number} [version=10] The Discord gateway version to use <warn>Changing this can break the library;\n * only set this if you know what you are doing</warn>\n * @property {BuildStrategyFunction} [buildStrategy] Builds the strategy to use for sharding\n * @property {IdentifyThrottlerFunction} [buildIdentifyThrottler] Builds the identify throttler to use for sharding\n */\n\n/**\n * Contains various utilities for client options.\n */\nclass Options extends null {\n  /**\n   * The default user agent appendix.\n   * @type {string}\n   * @memberof Options\n   * @private\n   */\n  static userAgentAppendix = `discord.js/${version} ${DefaultUserAgentAppendix}`.trimEnd();\n\n  /**\n   * The default client options.\n   * @returns {ClientOptions}\n   */\n  static createDefault() {\n    return {\n      closeTimeout: 5_000,\n      waitGuildTimeout: 15_000,\n      shardCount: 1,\n      makeCache: this.cacheWithLimits(this.DefaultMakeCacheSettings),\n      partials: [],\n      failIfNotExists: true,\n      presence: {},\n      sweepers: this.DefaultSweeperSettings,\n      ws: {\n        large_threshold: 50,\n        version: 10,\n      },\n      rest: {\n        ...DefaultRestOptions,\n        userAgentAppendix: this.userAgentAppendix,\n      },\n      jsonTransformer: toSnakeCase,\n    };\n  }\n\n  /**\n   * Create a cache factory using predefined settings to sweep or limit.\n   * @param {Object<string, LimitedCollectionOptions|number>} [settings={}] Settings passed to the relevant constructor.\n   * If no setting is provided for a manager, it uses Collection.\n   * If a number is provided for a manager, it uses that number as the max size for a LimitedCollection.\n   * If LimitedCollectionOptions are provided for a manager, it uses those settings to form a LimitedCollection.\n   * @returns {CacheFactory}\n   * @example\n   * // Store up to 200 messages per channel and 200 members per guild, always keeping the client member.\n   * Options.cacheWithLimits({\n   *    MessageManager: 200,\n   *    GuildMemberManager: {\n   *      maxSize: 200,\n   *      keepOverLimit: (member) => member.id === client.user.id,\n   *    },\n   *  });\n   */\n  static cacheWithLimits(settings = {}) {\n    const { Collection } = require('@discordjs/collection');\n    const LimitedCollection = require('./LimitedCollection');\n\n    return (managerType, _, manager) => {\n      const setting = settings[manager.name] ?? settings[managerType.name];\n      /* eslint-disable-next-line eqeqeq */\n      if (setting == null) {\n        return new Collection();\n      }\n      if (typeof setting === 'number') {\n        if (setting === Infinity) {\n          return new Collection();\n        }\n        return new LimitedCollection({ maxSize: setting });\n      }\n      /* eslint-disable-next-line eqeqeq */\n      const noLimit = setting.maxSize == null || setting.maxSize === Infinity;\n      if (noLimit) {\n        return new Collection();\n      }\n      return new LimitedCollection(setting);\n    };\n  }\n\n  /**\n   * Create a cache factory that always caches everything.\n   * @returns {CacheFactory}\n   */\n  static cacheEverything() {\n    const { Collection } = require('@discordjs/collection');\n    return () => new Collection();\n  }\n\n  /**\n   * The default settings passed to {@link ClientOptions.makeCache}.\n   * The caches that this changes are:\n   * * `MessageManager` - Limit to 200 messages\n   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n   * `makeCache: Options.cacheWithLimits({ ...Options.DefaultMakeCacheSettings, ReactionManager: 0 })`</info>\n   * @type {Object<string, LimitedCollectionOptions|number>}\n   */\n  static get DefaultMakeCacheSettings() {\n    return {\n      MessageManager: 200,\n    };\n  }\n\n  /**\n   * The default settings passed to {@link ClientOptions.sweepers}.\n   * The sweepers that this changes are:\n   * * `threads` - Sweep archived threads every hour, removing those archived more than 4 hours ago\n   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n   * `sweepers: { ...Options.DefaultSweeperSettings, messages: { interval: 300, lifetime: 600 } }`</info>\n   * @type {SweeperOptions}\n   */\n  static get DefaultSweeperSettings() {\n    return {\n      threads: {\n        interval: 3600,\n        lifetime: 14400,\n      },\n    };\n  }\n}\n\nmodule.exports = Options;\n\n/**\n * @external RESTOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/RESTOptions:Interface}\n */\n\n/**\n * @external WSWebSocketManager\n * @see {@link https://discord.js.org/docs/packages/ws/stable/WebSocketManager:Class}\n */\n\n/**\n * @external IShardingStrategy\n * @see {@link https://discord.js.org/docs/packages/ws/stable/IShardingStrategy:Interface}\n */\n\n/**\n * @external IIdentifyThrottler\n * @see {@link https://discord.js.org/docs/packages/ws/stable/IIdentifyThrottler:Interface}\n */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}