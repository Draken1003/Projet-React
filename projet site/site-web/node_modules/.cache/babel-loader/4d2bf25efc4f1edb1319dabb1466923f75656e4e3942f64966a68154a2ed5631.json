{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst Collector = require('./interfaces/Collector');\nconst Events = require('../util/Events');\n\n/**\n * @typedef {CollectorOptions} InteractionCollectorOptions\n * @property {TextBasedChannelsResolvable} [channel] The channel to listen to interactions from\n * @property {ComponentType} [componentType] The type of component to listen for\n * @property {GuildResolvable} [guild] The guild to listen to interactions from\n * @property {InteractionType} [interactionType] The type of interaction to listen for\n * @property {number} [max] The maximum total amount of interactions to collect\n * @property {number} [maxComponents] The maximum number of components to collect\n * @property {number} [maxUsers] The maximum number of users to interact\n * @property {Message|APIMessage} [message] The message to listen to interactions from\n * @property {InteractionResponse} [interactionResponse] The interaction response to listen\n * to message component interactions from\n */\n\n/**\n * Collects interactions.\n * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n * {@link Client#event:messageDeleteBulk messageDeleteBulk}),\n * channel ({@link Client#event:channelDelete channelDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * <info>Interaction collectors that do not specify `time` or `idle` may be prone to always running.\n * Ensure your interaction collectors end via either of these options or manual cancellation.</info>\n * @extends {Collector}\n */\nclass InteractionCollector extends Collector {\n  /**\n   * @param {Client} client The client on which to collect interactions\n   * @param {InteractionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(client, options = {}) {\n    super(client, options);\n\n    /**\n     * The message from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.messageId = options.message?.id ?? options.interactionResponse?.interaction.message?.id ?? null;\n\n    /**\n     * The message interaction id from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.messageInteractionId = options.interactionResponse?.id ?? null;\n\n    /**\n     * The channel from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.channelId = options.interactionResponse?.interaction.channelId ?? options.message?.channelId ?? options.message?.channel_id ?? this.client.channels.resolveId(options.channel);\n\n    /**\n     * The guild from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.guildId = options.interactionResponse?.interaction.guildId ?? options.message?.guildId ?? options.message?.guild_id ?? this.client.guilds.resolveId(options.channel?.guild) ?? this.client.guilds.resolveId(options.guild);\n\n    /**\n     * The type of interaction to collect\n     * @type {?InteractionType}\n     */\n    this.interactionType = options.interactionType ?? null;\n\n    /**\n     * The type of component to collect\n     * @type {?ComponentType}\n     */\n    this.componentType = options.componentType ?? null;\n\n    /**\n     * The users that have interacted with this collector\n     * @type {Collection<Snowflake, User>}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of interactions collected\n     * @type {number}\n     */\n    this.total = 0;\n    this.client.incrementMaxListeners();\n    const bulkDeleteListener = messages => {\n      if (messages.has(this.messageId)) this.stop('messageDelete');\n    };\n    if (this.messageId || this.messageInteractionId) {\n      this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n      this.client.on(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.on(Events.MessageBulkDelete, bulkDeleteListener);\n    }\n    if (this.channelId) {\n      this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n      this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n      this.client.on(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.on(Events.ThreadDelete, this._handleThreadDeletion);\n    }\n    if (this.guildId) {\n      this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n      this.client.on(Events.GuildDelete, this._handleGuildDeletion);\n    }\n    this.client.on(Events.InteractionCreate, this.handleCollect);\n    this.once('end', () => {\n      this.client.removeListener(Events.InteractionCreate, this.handleCollect);\n      this.client.removeListener(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);\n      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);\n      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n    this.on('collect', interaction => {\n      this.total++;\n      this.users.set(interaction.user.id, interaction.user);\n    });\n  }\n\n  /**\n   * Handles an incoming interaction for possible collection.\n   * @param {BaseInteraction} interaction The interaction to possibly collect\n   * @returns {?Snowflake}\n   * @private\n   */\n  collect(interaction) {\n    /**\n     * Emitted whenever an interaction is collected.\n     * @event InteractionCollector#collect\n     * @param {BaseInteraction} interaction The interaction that was collected\n     */\n\n    if (this.interactionType && interaction.type !== this.interactionType) return null;\n    if (this.componentType && interaction.componentType !== this.componentType) return null;\n    if (this.messageId && interaction.message?.id !== this.messageId) return null;\n    if (this.messageInteractionId && interaction.message?.interaction?.id && interaction.message.interaction.id !== this.messageInteractionId) {\n      return null;\n    }\n    if (this.channelId && interaction.channelId !== this.channelId) return null;\n    if (this.guildId && interaction.guildId !== this.guildId) return null;\n    return interaction.id;\n  }\n\n  /**\n   * Handles an interaction for possible disposal.\n   * @param {BaseInteraction} interaction The interaction that could be disposed of\n   * @returns {?Snowflake}\n   */\n  dispose(interaction) {\n    /**\n     * Emitted whenever an interaction is disposed of.\n     * @event InteractionCollector#dispose\n     * @param {BaseInteraction} interaction The interaction that was disposed of\n     */\n    if (this.type && interaction.type !== this.type) return null;\n    if (this.componentType && interaction.componentType !== this.componentType) return null;\n    if (this.messageId && interaction.message?.id !== this.messageId) return null;\n    if (this.messageInteractionId && interaction.message?.interaction?.id && interaction.message.interaction.id !== this.messageInteractionId) {\n      return null;\n    }\n    if (this.channelId && interaction.channelId !== this.channelId) return null;\n    if (this.guildId && interaction.guildId !== this.guildId) return null;\n    return interaction.id;\n  }\n\n  /**\n   * Empties this interaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxComponents && this.collected.size >= this.options.maxComponents) return 'componentLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return super.endReason;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.messageId) {\n      this.stop('messageDelete');\n    }\n    if (message.interaction?.id === this.messageInteractionId) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.channelId || channel.threads?.cache.has(this.channelId)) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.channelId) {\n      this.stop('threadDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.guildId) {\n      this.stop('guildDelete');\n    }\n  }\n}\nmodule.exports = InteractionCollector;","map":{"version":3,"names":["Collection","require","Collector","Events","InteractionCollector","constructor","client","options","messageId","message","id","interactionResponse","interaction","messageInteractionId","channelId","channel_id","channels","resolveId","channel","guildId","guild_id","guilds","guild","interactionType","componentType","users","total","incrementMaxListeners","bulkDeleteListener","messages","has","stop","_handleMessageDeletion","bind","on","MessageDelete","MessageBulkDelete","_handleChannelDeletion","_handleThreadDeletion","ChannelDelete","ThreadDelete","_handleGuildDeletion","GuildDelete","InteractionCreate","handleCollect","once","removeListener","decrementMaxListeners","set","user","collect","type","dispose","empty","collected","clear","checkEnd","endReason","max","maxComponents","size","maxUsers","threads","cache","thread","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/InteractionCollector.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Collector = require('./interfaces/Collector');\nconst Events = require('../util/Events');\n\n/**\n * @typedef {CollectorOptions} InteractionCollectorOptions\n * @property {TextBasedChannelsResolvable} [channel] The channel to listen to interactions from\n * @property {ComponentType} [componentType] The type of component to listen for\n * @property {GuildResolvable} [guild] The guild to listen to interactions from\n * @property {InteractionType} [interactionType] The type of interaction to listen for\n * @property {number} [max] The maximum total amount of interactions to collect\n * @property {number} [maxComponents] The maximum number of components to collect\n * @property {number} [maxUsers] The maximum number of users to interact\n * @property {Message|APIMessage} [message] The message to listen to interactions from\n * @property {InteractionResponse} [interactionResponse] The interaction response to listen\n * to message component interactions from\n */\n\n/**\n * Collects interactions.\n * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n * {@link Client#event:messageDeleteBulk messageDeleteBulk}),\n * channel ({@link Client#event:channelDelete channelDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * <info>Interaction collectors that do not specify `time` or `idle` may be prone to always running.\n * Ensure your interaction collectors end via either of these options or manual cancellation.</info>\n * @extends {Collector}\n */\nclass InteractionCollector extends Collector {\n  /**\n   * @param {Client} client The client on which to collect interactions\n   * @param {InteractionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(client, options = {}) {\n    super(client, options);\n\n    /**\n     * The message from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.messageId = options.message?.id ?? options.interactionResponse?.interaction.message?.id ?? null;\n\n    /**\n     * The message interaction id from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.messageInteractionId = options.interactionResponse?.id ?? null;\n\n    /**\n     * The channel from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.channelId =\n      options.interactionResponse?.interaction.channelId ??\n      options.message?.channelId ??\n      options.message?.channel_id ??\n      this.client.channels.resolveId(options.channel);\n\n    /**\n     * The guild from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.guildId =\n      options.interactionResponse?.interaction.guildId ??\n      options.message?.guildId ??\n      options.message?.guild_id ??\n      this.client.guilds.resolveId(options.channel?.guild) ??\n      this.client.guilds.resolveId(options.guild);\n\n    /**\n     * The type of interaction to collect\n     * @type {?InteractionType}\n     */\n    this.interactionType = options.interactionType ?? null;\n\n    /**\n     * The type of component to collect\n     * @type {?ComponentType}\n     */\n    this.componentType = options.componentType ?? null;\n\n    /**\n     * The users that have interacted with this collector\n     * @type {Collection<Snowflake, User>}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of interactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.client.incrementMaxListeners();\n\n    const bulkDeleteListener = messages => {\n      if (messages.has(this.messageId)) this.stop('messageDelete');\n    };\n\n    if (this.messageId || this.messageInteractionId) {\n      this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n      this.client.on(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.on(Events.MessageBulkDelete, bulkDeleteListener);\n    }\n\n    if (this.channelId) {\n      this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n      this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n      this.client.on(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.on(Events.ThreadDelete, this._handleThreadDeletion);\n    }\n\n    if (this.guildId) {\n      this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n      this.client.on(Events.GuildDelete, this._handleGuildDeletion);\n    }\n\n    this.client.on(Events.InteractionCreate, this.handleCollect);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.InteractionCreate, this.handleCollect);\n      this.client.removeListener(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);\n      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);\n      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n\n    this.on('collect', interaction => {\n      this.total++;\n      this.users.set(interaction.user.id, interaction.user);\n    });\n  }\n\n  /**\n   * Handles an incoming interaction for possible collection.\n   * @param {BaseInteraction} interaction The interaction to possibly collect\n   * @returns {?Snowflake}\n   * @private\n   */\n  collect(interaction) {\n    /**\n     * Emitted whenever an interaction is collected.\n     * @event InteractionCollector#collect\n     * @param {BaseInteraction} interaction The interaction that was collected\n     */\n\n    if (this.interactionType && interaction.type !== this.interactionType) return null;\n    if (this.componentType && interaction.componentType !== this.componentType) return null;\n    if (this.messageId && interaction.message?.id !== this.messageId) return null;\n    if (\n      this.messageInteractionId &&\n      interaction.message?.interaction?.id &&\n      interaction.message.interaction.id !== this.messageInteractionId\n    ) {\n      return null;\n    }\n    if (this.channelId && interaction.channelId !== this.channelId) return null;\n    if (this.guildId && interaction.guildId !== this.guildId) return null;\n\n    return interaction.id;\n  }\n\n  /**\n   * Handles an interaction for possible disposal.\n   * @param {BaseInteraction} interaction The interaction that could be disposed of\n   * @returns {?Snowflake}\n   */\n  dispose(interaction) {\n    /**\n     * Emitted whenever an interaction is disposed of.\n     * @event InteractionCollector#dispose\n     * @param {BaseInteraction} interaction The interaction that was disposed of\n     */\n    if (this.type && interaction.type !== this.type) return null;\n    if (this.componentType && interaction.componentType !== this.componentType) return null;\n    if (this.messageId && interaction.message?.id !== this.messageId) return null;\n    if (\n      this.messageInteractionId &&\n      interaction.message?.interaction?.id &&\n      interaction.message.interaction.id !== this.messageInteractionId\n    ) {\n      return null;\n    }\n    if (this.channelId && interaction.channelId !== this.channelId) return null;\n    if (this.guildId && interaction.guildId !== this.guildId) return null;\n\n    return interaction.id;\n  }\n\n  /**\n   * Empties this interaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxComponents && this.collected.size >= this.options.maxComponents) return 'componentLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return super.endReason;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.messageId) {\n      this.stop('messageDelete');\n    }\n\n    if (message.interaction?.id === this.messageInteractionId) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.channelId || channel.threads?.cache.has(this.channelId)) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.channelId) {\n      this.stop('threadDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.guildId) {\n      this.stop('guildDelete');\n    }\n  }\n}\n\nmodule.exports = InteractionCollector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}