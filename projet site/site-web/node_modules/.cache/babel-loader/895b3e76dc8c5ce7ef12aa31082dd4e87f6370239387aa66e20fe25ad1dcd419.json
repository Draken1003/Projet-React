{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--) if (decorator = decorators[i]) result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ActionRowBuilder: () => ActionRowBuilder,\n  ApplicationCommandNumericOptionMinMaxValueMixin: () => ApplicationCommandNumericOptionMinMaxValueMixin,\n  ApplicationCommandOptionBase: () => ApplicationCommandOptionBase,\n  ApplicationCommandOptionChannelTypesMixin: () => ApplicationCommandOptionChannelTypesMixin,\n  ApplicationCommandOptionWithChoicesAndAutocompleteMixin: () => ApplicationCommandOptionWithChoicesAndAutocompleteMixin,\n  BaseSelectMenuBuilder: () => BaseSelectMenuBuilder,\n  ButtonBuilder: () => ButtonBuilder,\n  ChannelSelectMenuBuilder: () => ChannelSelectMenuBuilder,\n  ComponentAssertions: () => Assertions_exports2,\n  ComponentBuilder: () => ComponentBuilder,\n  ContextMenuCommandAssertions: () => Assertions_exports6,\n  ContextMenuCommandBuilder: () => ContextMenuCommandBuilder,\n  EmbedAssertions: () => Assertions_exports,\n  EmbedBuilder: () => EmbedBuilder,\n  MentionableSelectMenuBuilder: () => MentionableSelectMenuBuilder,\n  ModalAssertions: () => Assertions_exports4,\n  ModalBuilder: () => ModalBuilder,\n  RoleSelectMenuBuilder: () => RoleSelectMenuBuilder,\n  SelectMenuBuilder: () => StringSelectMenuBuilder,\n  SelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,\n  SharedNameAndDescription: () => SharedNameAndDescription,\n  SharedSlashCommandOptions: () => SharedSlashCommandOptions,\n  SlashCommandAssertions: () => Assertions_exports5,\n  SlashCommandAttachmentOption: () => SlashCommandAttachmentOption,\n  SlashCommandBooleanOption: () => SlashCommandBooleanOption,\n  SlashCommandBuilder: () => SlashCommandBuilder,\n  SlashCommandChannelOption: () => SlashCommandChannelOption,\n  SlashCommandIntegerOption: () => SlashCommandIntegerOption,\n  SlashCommandMentionableOption: () => SlashCommandMentionableOption,\n  SlashCommandNumberOption: () => SlashCommandNumberOption,\n  SlashCommandRoleOption: () => SlashCommandRoleOption,\n  SlashCommandStringOption: () => SlashCommandStringOption,\n  SlashCommandSubcommandBuilder: () => SlashCommandSubcommandBuilder,\n  SlashCommandSubcommandGroupBuilder: () => SlashCommandSubcommandGroupBuilder,\n  SlashCommandUserOption: () => SlashCommandUserOption,\n  StringSelectMenuBuilder: () => StringSelectMenuBuilder,\n  StringSelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,\n  TextInputAssertions: () => Assertions_exports3,\n  TextInputBuilder: () => TextInputBuilder,\n  UserSelectMenuBuilder: () => UserSelectMenuBuilder,\n  createComponentBuilder: () => createComponentBuilder,\n  disableValidators: () => disableValidators,\n  embedLength: () => embedLength,\n  enableValidators: () => enableValidators,\n  isValidationEnabled: () => isValidationEnabled,\n  normalizeArray: () => normalizeArray,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/messages/embed/Assertions.ts\nvar Assertions_exports = {};\n__export(Assertions_exports, {\n  RGBPredicate: () => RGBPredicate,\n  authorNamePredicate: () => authorNamePredicate,\n  colorPredicate: () => colorPredicate,\n  descriptionPredicate: () => descriptionPredicate,\n  embedAuthorPredicate: () => embedAuthorPredicate,\n  embedFieldPredicate: () => embedFieldPredicate,\n  embedFieldsArrayPredicate: () => embedFieldsArrayPredicate,\n  embedFooterPredicate: () => embedFooterPredicate,\n  fieldInlinePredicate: () => fieldInlinePredicate,\n  fieldLengthPredicate: () => fieldLengthPredicate,\n  fieldNamePredicate: () => fieldNamePredicate,\n  fieldValuePredicate: () => fieldValuePredicate,\n  footerTextPredicate: () => footerTextPredicate,\n  imageURLPredicate: () => imageURLPredicate,\n  timestampPredicate: () => timestampPredicate,\n  titlePredicate: () => titlePredicate,\n  urlPredicate: () => urlPredicate,\n  validateFieldLength: () => validateFieldLength\n});\nvar import_shapeshift = require(\"@sapphire/shapeshift\");\n\n// src/util/validation.ts\nvar validate = true;\nfunction enableValidators() {\n  return validate = true;\n}\n__name(enableValidators, \"enableValidators\");\nfunction disableValidators() {\n  return validate = false;\n}\n__name(disableValidators, \"disableValidators\");\nfunction isValidationEnabled() {\n  return validate;\n}\n__name(isValidationEnabled, \"isValidationEnabled\");\n\n// src/messages/embed/Assertions.ts\nvar fieldNamePredicate = import_shapeshift.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(256).setValidationEnabled(isValidationEnabled);\nvar fieldValuePredicate = import_shapeshift.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(1024).setValidationEnabled(isValidationEnabled);\nvar fieldInlinePredicate = import_shapeshift.s.boolean.optional;\nvar embedFieldPredicate = import_shapeshift.s.object({\n  name: fieldNamePredicate,\n  value: fieldValuePredicate,\n  inline: fieldInlinePredicate\n}).setValidationEnabled(isValidationEnabled);\nvar embedFieldsArrayPredicate = embedFieldPredicate.array.setValidationEnabled(isValidationEnabled);\nvar fieldLengthPredicate = import_shapeshift.s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateFieldLength(amountAdding, fields) {\n  fieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);\n}\n__name(validateFieldLength, \"validateFieldLength\");\nvar authorNamePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\nvar imageURLPredicate = import_shapeshift.s.string.url({\n  allowedProtocols: [\"http:\", \"https:\", \"attachment:\"]\n}).nullish.setValidationEnabled(isValidationEnabled);\nvar urlPredicate = import_shapeshift.s.string.url({\n  allowedProtocols: [\"http:\", \"https:\"]\n}).nullish.setValidationEnabled(isValidationEnabled);\nvar embedAuthorPredicate = import_shapeshift.s.object({\n  name: authorNamePredicate,\n  iconURL: imageURLPredicate,\n  url: urlPredicate\n}).setValidationEnabled(isValidationEnabled);\nvar RGBPredicate = import_shapeshift.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(255).setValidationEnabled(isValidationEnabled);\nvar colorPredicate = import_shapeshift.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(16777215).or(import_shapeshift.s.tuple([RGBPredicate, RGBPredicate, RGBPredicate])).nullable.setValidationEnabled(isValidationEnabled);\nvar descriptionPredicate = import_shapeshift.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(4096).nullable.setValidationEnabled(isValidationEnabled);\nvar footerTextPredicate = import_shapeshift.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(2048).nullable.setValidationEnabled(isValidationEnabled);\nvar embedFooterPredicate = import_shapeshift.s.object({\n  text: footerTextPredicate,\n  iconURL: imageURLPredicate\n}).setValidationEnabled(isValidationEnabled);\nvar timestampPredicate = import_shapeshift.s.union(import_shapeshift.s.number, import_shapeshift.s.date).nullable.setValidationEnabled(isValidationEnabled);\nvar titlePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\n\n// src/util/normalizeArray.ts\nfunction normalizeArray(arr) {\n  if (Array.isArray(arr[0])) return arr[0];\n  return arr;\n}\n__name(normalizeArray, \"normalizeArray\");\n\n// src/messages/embed/Embed.ts\nvar EmbedBuilder = class {\n  static {\n    __name(this, \"EmbedBuilder\");\n  }\n  /**\n   * The API data associated with this embed.\n   */\n  data;\n  /**\n   * Creates a new embed from API data.\n   *\n   * @param data - The API data to create this embed with\n   */\n  constructor(data = {}) {\n    this.data = {\n      ...data\n    };\n    if (data.timestamp) this.data.timestamp = new Date(data.timestamp).toISOString();\n  }\n  /**\n   * Appends fields to the embed.\n   *\n   * @remarks\n   * This method accepts either an array of fields or a variable number of field parameters.\n   * The maximum amount of fields that can be added is 25.\n   * @example\n   * Using an array:\n   * ```ts\n   * const fields: APIEmbedField[] = ...;\n   * const embed = new EmbedBuilder()\n   * \t.addFields(fields);\n   * ```\n   * @example\n   * Using rest parameters (variadic):\n   * ```ts\n   * const embed = new EmbedBuilder()\n   * \t.addFields(\n   * \t\t{ name: 'Field 1', value: 'Value 1' },\n   * \t\t{ name: 'Field 2', value: 'Value 2' },\n   * \t);\n   * ```\n   * @param fields - The fields to add\n   */\n  addFields(...fields) {\n    const normalizedFields = normalizeArray(fields);\n    validateFieldLength(normalizedFields.length, this.data.fields);\n    embedFieldsArrayPredicate.parse(normalizedFields);\n    if (this.data.fields) this.data.fields.push(...normalizedFields);else this.data.fields = normalizedFields;\n    return this;\n  }\n  /**\n   * Removes, replaces, or inserts fields for this embed.\n   *\n   * @remarks\n   * This method behaves similarly\n   * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice | Array.prototype.splice()}.\n   * The maximum amount of fields that can be added is 25.\n   *\n   * It's useful for modifying and adjusting order of the already-existing fields of an embed.\n   * @example\n   * Remove the first field:\n   * ```ts\n   * embed.spliceFields(0, 1);\n   * ```\n   * @example\n   * Remove the first n fields:\n   * ```ts\n   * const n = 4;\n   * embed.spliceFields(0, n);\n   * ```\n   * @example\n   * Remove the last field:\n   * ```ts\n   * embed.spliceFields(-1, 1);\n   * ```\n   * @param index - The index to start at\n   * @param deleteCount - The number of fields to remove\n   * @param fields - The replacing field objects\n   */\n  spliceFields(index, deleteCount, ...fields) {\n    validateFieldLength(fields.length - deleteCount, this.data.fields);\n    embedFieldsArrayPredicate.parse(fields);\n    if (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);else this.data.fields = fields;\n    return this;\n  }\n  /**\n   * Sets the fields for this embed.\n   *\n   * @remarks\n   * This method is an alias for {@link EmbedBuilder.spliceFields}. More specifically,\n   * it splices the entire array of fields, replacing them with the provided fields.\n   *\n   * You can set a maximum of 25 fields.\n   * @param fields - The fields to set\n   */\n  setFields(...fields) {\n    this.spliceFields(0, this.data.fields?.length ?? 0, ...normalizeArray(fields));\n    return this;\n  }\n  /**\n   * Sets the author of this embed.\n   *\n   * @param options - The options to use\n   */\n  setAuthor(options) {\n    if (options === null) {\n      this.data.author = void 0;\n      return this;\n    }\n    embedAuthorPredicate.parse(options);\n    this.data.author = {\n      name: options.name,\n      url: options.url,\n      icon_url: options.iconURL\n    };\n    return this;\n  }\n  /**\n   * Sets the color of this embed.\n   *\n   * @param color - The color to use\n   */\n  setColor(color) {\n    colorPredicate.parse(color);\n    if (Array.isArray(color)) {\n      const [red, green, blue] = color;\n      this.data.color = (red << 16) + (green << 8) + blue;\n      return this;\n    }\n    this.data.color = color ?? void 0;\n    return this;\n  }\n  /**\n   * Sets the description of this embed.\n   *\n   * @param description - The description to use\n   */\n  setDescription(description) {\n    descriptionPredicate.parse(description);\n    this.data.description = description ?? void 0;\n    return this;\n  }\n  /**\n   * Sets the footer of this embed.\n   *\n   * @param options - The footer to use\n   */\n  setFooter(options) {\n    if (options === null) {\n      this.data.footer = void 0;\n      return this;\n    }\n    embedFooterPredicate.parse(options);\n    this.data.footer = {\n      text: options.text,\n      icon_url: options.iconURL\n    };\n    return this;\n  }\n  /**\n   * Sets the image of this embed.\n   *\n   * @param url - The image URL to use\n   */\n  setImage(url) {\n    imageURLPredicate.parse(url);\n    this.data.image = url ? {\n      url\n    } : void 0;\n    return this;\n  }\n  /**\n   * Sets the thumbnail of this embed.\n   *\n   * @param url - The thumbnail URL to use\n   */\n  setThumbnail(url) {\n    imageURLPredicate.parse(url);\n    this.data.thumbnail = url ? {\n      url\n    } : void 0;\n    return this;\n  }\n  /**\n   * Sets the timestamp of this embed.\n   *\n   * @param timestamp - The timestamp or date to use\n   */\n  setTimestamp(timestamp = Date.now()) {\n    timestampPredicate.parse(timestamp);\n    this.data.timestamp = timestamp ? new Date(timestamp).toISOString() : void 0;\n    return this;\n  }\n  /**\n   * Sets the title for this embed.\n   *\n   * @param title - The title to use\n   */\n  setTitle(title) {\n    titlePredicate.parse(title);\n    this.data.title = title ?? void 0;\n    return this;\n  }\n  /**\n   * Sets the URL of this embed.\n   *\n   * @param url - The URL to use\n   */\n  setURL(url) {\n    urlPredicate.parse(url);\n    this.data.url = url ?? void 0;\n    return this;\n  }\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/index.ts\n__reExport(src_exports, require(\"@discordjs/formatters\"), module.exports);\n\n// src/components/Assertions.ts\nvar Assertions_exports2 = {};\n__export(Assertions_exports2, {\n  buttonLabelValidator: () => buttonLabelValidator,\n  buttonStyleValidator: () => buttonStyleValidator,\n  channelTypesValidator: () => channelTypesValidator,\n  customIdValidator: () => customIdValidator,\n  defaultValidator: () => defaultValidator,\n  disabledValidator: () => disabledValidator,\n  emojiValidator: () => emojiValidator,\n  jsonOptionValidator: () => jsonOptionValidator,\n  labelValueDescriptionValidator: () => labelValueDescriptionValidator,\n  minMaxValidator: () => minMaxValidator,\n  optionValidator: () => optionValidator,\n  optionsLengthValidator: () => optionsLengthValidator,\n  optionsValidator: () => optionsValidator,\n  placeholderValidator: () => placeholderValidator,\n  urlValidator: () => urlValidator,\n  validateRequiredButtonParameters: () => validateRequiredButtonParameters,\n  validateRequiredSelectMenuOptionParameters: () => validateRequiredSelectMenuOptionParameters,\n  validateRequiredSelectMenuParameters: () => validateRequiredSelectMenuParameters\n});\nvar import_shapeshift2 = require(\"@sapphire/shapeshift\");\nvar import_v10 = require(\"discord-api-types/v10\");\n\n// src/components/selectMenu/StringSelectMenuOption.ts\nvar StringSelectMenuOptionBuilder = class {\n  /**\n   * Creates a new string select menu option from API data.\n   *\n   * @param data - The API data to create this string select menu option with\n   * @example\n   * Creating a string select menu option from an API data object:\n   * ```ts\n   * const selectMenuOption = new SelectMenuOptionBuilder({\n   * \tlabel: 'catchy label',\n   * \tvalue: '1',\n   * });\n   * ```\n   * @example\n   * Creating a string select menu option using setters and API data:\n   * ```ts\n   * const selectMenuOption = new SelectMenuOptionBuilder({\n   * \tdefault: true,\n   * \tvalue: '1',\n   * })\n   * \t.setLabel('woah');\n   * ```\n   */\n  constructor(data = {}) {\n    this.data = data;\n  }\n  static {\n    __name(this, \"StringSelectMenuOptionBuilder\");\n  }\n  /**\n   * Sets the label for this option.\n   *\n   * @param label - The label to use\n   */\n  setLabel(label) {\n    this.data.label = labelValueDescriptionValidator.parse(label);\n    return this;\n  }\n  /**\n   * Sets the value for this option.\n   *\n   * @param value - The value to use\n   */\n  setValue(value) {\n    this.data.value = labelValueDescriptionValidator.parse(value);\n    return this;\n  }\n  /**\n   * Sets the description for this option.\n   *\n   * @param description - The description to use\n   */\n  setDescription(description) {\n    this.data.description = labelValueDescriptionValidator.parse(description);\n    return this;\n  }\n  /**\n   * Sets whether this option is selected by default.\n   *\n   * @param isDefault - Whether this option is selected by default\n   */\n  setDefault(isDefault = true) {\n    this.data.default = defaultValidator.parse(isDefault);\n    return this;\n  }\n  /**\n   * Sets the emoji to display for this option.\n   *\n   * @param emoji - The emoji to use\n   */\n  setEmoji(emoji) {\n    this.data.emoji = emojiValidator.parse(emoji);\n    return this;\n  }\n  /**\n   * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/components/Assertions.ts\nvar customIdValidator = import_shapeshift2.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar emojiValidator = import_shapeshift2.s.object({\n  id: import_shapeshift2.s.string,\n  name: import_shapeshift2.s.string,\n  animated: import_shapeshift2.s.boolean\n}).partial.strict.setValidationEnabled(isValidationEnabled);\nvar disabledValidator = import_shapeshift2.s.boolean;\nvar buttonLabelValidator = import_shapeshift2.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(80).setValidationEnabled(isValidationEnabled);\nvar buttonStyleValidator = import_shapeshift2.s.nativeEnum(import_v10.ButtonStyle);\nvar placeholderValidator = import_shapeshift2.s.string.lengthLessThanOrEqual(150).setValidationEnabled(isValidationEnabled);\nvar minMaxValidator = import_shapeshift2.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nvar labelValueDescriptionValidator = import_shapeshift2.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar jsonOptionValidator = import_shapeshift2.s.object({\n  label: labelValueDescriptionValidator,\n  value: labelValueDescriptionValidator,\n  description: labelValueDescriptionValidator.optional,\n  emoji: emojiValidator.optional,\n  default: import_shapeshift2.s.boolean.optional\n}).setValidationEnabled(isValidationEnabled);\nvar optionValidator = import_shapeshift2.s.instance(StringSelectMenuOptionBuilder).setValidationEnabled(isValidationEnabled);\nvar optionsValidator = optionValidator.array.lengthGreaterThanOrEqual(0).setValidationEnabled(isValidationEnabled);\nvar optionsLengthValidator = import_shapeshift2.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredSelectMenuParameters(options, customId) {\n  customIdValidator.parse(customId);\n  optionsValidator.parse(options);\n}\n__name(validateRequiredSelectMenuParameters, \"validateRequiredSelectMenuParameters\");\nvar defaultValidator = import_shapeshift2.s.boolean;\nfunction validateRequiredSelectMenuOptionParameters(label, value) {\n  labelValueDescriptionValidator.parse(label);\n  labelValueDescriptionValidator.parse(value);\n}\n__name(validateRequiredSelectMenuOptionParameters, \"validateRequiredSelectMenuOptionParameters\");\nvar channelTypesValidator = import_shapeshift2.s.nativeEnum(import_v10.ChannelType).array.setValidationEnabled(isValidationEnabled);\nvar urlValidator = import_shapeshift2.s.string.url({\n  allowedProtocols: [\"http:\", \"https:\", \"discord:\"]\n}).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredButtonParameters(style, label, emoji, customId, url) {\n  if (url && customId) {\n    throw new RangeError(\"URL and custom id are mutually exclusive\");\n  }\n  if (!label && !emoji) {\n    throw new RangeError(\"Buttons must have a label and/or an emoji\");\n  }\n  if (style === import_v10.ButtonStyle.Link) {\n    if (!url) {\n      throw new RangeError(\"Link buttons must have a url\");\n    }\n  } else if (url) {\n    throw new RangeError(\"Non-link buttons cannot have a url\");\n  }\n}\n__name(validateRequiredButtonParameters, \"validateRequiredButtonParameters\");\n\n// src/components/ActionRow.ts\nvar import_v1011 = require(\"discord-api-types/v10\");\n\n// src/components/Component.ts\nvar ComponentBuilder = class {\n  static {\n    __name(this, \"ComponentBuilder\");\n  }\n  /**\n   * The API data associated with this component.\n   */\n  data;\n  /**\n   * Constructs a new kind of component.\n   *\n   * @param data - The data to construct a component out of\n   */\n  constructor(data) {\n    this.data = data;\n  }\n};\n\n// src/components/Components.ts\nvar import_v1010 = require(\"discord-api-types/v10\");\n\n// src/components/button/Button.ts\nvar import_v102 = require(\"discord-api-types/v10\");\nvar ButtonBuilder = class extends ComponentBuilder {\n  static {\n    __name(this, \"ButtonBuilder\");\n  }\n  /**\n   * Creates a new button from API data.\n   *\n   * @param data - The API data to create this button with\n   * @example\n   * Creating a button from an API data object:\n   * ```ts\n   * const button = new ButtonBuilder({\n   * \tcustom_id: 'a cool button',\n   * \tstyle: ButtonStyle.Primary,\n   * \tlabel: 'Click Me',\n   * \temoji: {\n   * \t\tname: 'smile',\n   * \t\tid: '123456789012345678',\n   * \t},\n   * });\n   * ```\n   * @example\n   * Creating a button using setters and API data:\n   * ```ts\n   * const button = new ButtonBuilder({\n   * \tstyle: ButtonStyle.Secondary,\n   * \tlabel: 'Click Me',\n   * })\n   * \t.setEmoji({ name: '🙂' })\n   * \t.setCustomId('another cool button');\n   * ```\n   */\n  constructor(data) {\n    super({\n      type: import_v102.ComponentType.Button,\n      ...data\n    });\n  }\n  /**\n   * Sets the style of this button.\n   *\n   * @param style - The style to use\n   */\n  setStyle(style) {\n    this.data.style = buttonStyleValidator.parse(style);\n    return this;\n  }\n  /**\n   * Sets the URL for this button.\n   *\n   * @remarks\n   * This method is only available to buttons using the `Link` button style.\n   * Only three types of URL schemes are currently supported: `https://`, `http://`, and `discord://`.\n   * @param url - The URL to use\n   */\n  setURL(url) {\n    this.data.url = urlValidator.parse(url);\n    return this;\n  }\n  /**\n   * Sets the custom id for this button.\n   *\n   * @remarks\n   * This method is only applicable to buttons that are not using the `Link` button style.\n   * @param customId - The custom id to use\n   */\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  /**\n   * Sets the emoji to display on this button.\n   *\n   * @param emoji - The emoji to use\n   */\n  setEmoji(emoji) {\n    this.data.emoji = emojiValidator.parse(emoji);\n    return this;\n  }\n  /**\n   * Sets whether this button is disabled.\n   *\n   * @param disabled - Whether to disable this button\n   */\n  setDisabled(disabled = true) {\n    this.data.disabled = disabledValidator.parse(disabled);\n    return this;\n  }\n  /**\n   * Sets the label for this button.\n   *\n   * @param label - The label to use\n   */\n  setLabel(label) {\n    this.data.label = buttonLabelValidator.parse(label);\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredButtonParameters(this.data.style, this.data.label, this.data.emoji, this.data.custom_id, this.data.url);\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/components/selectMenu/ChannelSelectMenu.ts\nvar import_v103 = require(\"discord-api-types/v10\");\n\n// src/components/selectMenu/BaseSelectMenu.ts\nvar BaseSelectMenuBuilder = class extends ComponentBuilder {\n  static {\n    __name(this, \"BaseSelectMenuBuilder\");\n  }\n  /**\n   * Sets the placeholder for this select menu.\n   *\n   * @param placeholder - The placeholder to use\n   */\n  setPlaceholder(placeholder) {\n    this.data.placeholder = placeholderValidator.parse(placeholder);\n    return this;\n  }\n  /**\n   * Sets the minimum values that must be selected in the select menu.\n   *\n   * @param minValues - The minimum values that must be selected\n   */\n  setMinValues(minValues) {\n    this.data.min_values = minMaxValidator.parse(minValues);\n    return this;\n  }\n  /**\n   * Sets the maximum values that must be selected in the select menu.\n   *\n   * @param maxValues - The maximum values that must be selected\n   */\n  setMaxValues(maxValues) {\n    this.data.max_values = minMaxValidator.parse(maxValues);\n    return this;\n  }\n  /**\n   * Sets the custom id for this select menu.\n   *\n   * @param customId - The custom id to use\n   */\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  /**\n   * Sets whether this select menu is disabled.\n   *\n   * @param disabled - Whether this select menu is disabled\n   */\n  setDisabled(disabled = true) {\n    this.data.disabled = disabledValidator.parse(disabled);\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    customIdValidator.parse(this.data.custom_id);\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/components/selectMenu/ChannelSelectMenu.ts\nvar ChannelSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"ChannelSelectMenuBuilder\");\n  }\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new ChannelSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new ChannelSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)\n   * \t.setMinValues(2);\n   * ```\n   */\n  constructor(data) {\n    super({\n      ...data,\n      type: import_v103.ComponentType.ChannelSelect\n    });\n  }\n  /**\n   * Adds channel types to this select menu.\n   *\n   * @param types - The channel types to use\n   */\n  addChannelTypes(...types) {\n    const normalizedTypes = normalizeArray(types);\n    this.data.channel_types ??= [];\n    this.data.channel_types.push(...channelTypesValidator.parse(normalizedTypes));\n    return this;\n  }\n  /**\n   * Sets channel types for this select menu.\n   *\n   * @param types - The channel types to use\n   */\n  setChannelTypes(...types) {\n    const normalizedTypes = normalizeArray(types);\n    this.data.channel_types ??= [];\n    this.data.channel_types.splice(0, this.data.channel_types.length, ...channelTypesValidator.parse(normalizedTypes));\n    return this;\n  }\n  /**\n   * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n   */\n  toJSON() {\n    customIdValidator.parse(this.data.custom_id);\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/components/selectMenu/MentionableSelectMenu.ts\nvar import_v104 = require(\"discord-api-types/v10\");\nvar MentionableSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"MentionableSelectMenuBuilder\");\n  }\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new MentionableSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new MentionableSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.setMinValues(1);\n   * ```\n   */\n  constructor(data) {\n    super({\n      ...data,\n      type: import_v104.ComponentType.MentionableSelect\n    });\n  }\n};\n\n// src/components/selectMenu/RoleSelectMenu.ts\nvar import_v105 = require(\"discord-api-types/v10\");\nvar RoleSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"RoleSelectMenuBuilder\");\n  }\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new RoleSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new RoleSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.setMinValues(1);\n   * ```\n   */\n  constructor(data) {\n    super({\n      ...data,\n      type: import_v105.ComponentType.RoleSelect\n    });\n  }\n};\n\n// src/components/selectMenu/StringSelectMenu.ts\nvar import_v106 = require(\"discord-api-types/v10\");\nvar StringSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"StringSelectMenuBuilder\");\n  }\n  /**\n   * The options within this select menu.\n   */\n  options;\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new StringSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * \toptions: [\n   * \t\t{ label: 'option 1', value: '1' },\n   * \t\t{ label: 'option 2', value: '2' },\n   * \t\t{ label: 'option 3', value: '3' },\n   * \t],\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new StringSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.setMinValues(1)\n   * \t.addOptions({\n   * \t\tlabel: 'Catchy',\n   * \t\tvalue: 'catch',\n   * \t});\n   * ```\n   */\n  constructor(data) {\n    const {\n      options,\n      ...initData\n    } = data ?? {};\n    super({\n      ...initData,\n      type: import_v106.ComponentType.StringSelect\n    });\n    this.options = options?.map(option => new StringSelectMenuOptionBuilder(option)) ?? [];\n  }\n  /**\n   * Adds options to this select menu.\n   *\n   * @param options - The options to add\n   */\n  addOptions(...options) {\n    const normalizedOptions = normalizeArray(options);\n    optionsLengthValidator.parse(this.options.length + normalizedOptions.length);\n    this.options.push(...normalizedOptions.map(normalizedOption => normalizedOption instanceof StringSelectMenuOptionBuilder ? normalizedOption : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption))));\n    return this;\n  }\n  /**\n   * Sets the options for this select menu.\n   *\n   * @param options - The options to set\n   */\n  setOptions(...options) {\n    return this.spliceOptions(0, this.options.length, ...options);\n  }\n  /**\n   * Removes, replaces, or inserts options for this select menu.\n   *\n   * @remarks\n   * This method behaves similarly\n   * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice()}.\n   * It's useful for modifying and adjusting the order of existing options.\n   * @example\n   * Remove the first option:\n   * ```ts\n   * selectMenu.spliceOptions(0, 1);\n   * ```\n   * @example\n   * Remove the first n option:\n   * ```ts\n   * const n = 4;\n   * selectMenu.spliceOptions(0, n);\n   * ```\n   * @example\n   * Remove the last option:\n   * ```ts\n   * selectMenu.spliceOptions(-1, 1);\n   * ```\n   * @param index - The index to start at\n   * @param deleteCount - The number of options to remove\n   * @param options - The replacing option objects or builders\n   */\n  spliceOptions(index, deleteCount, ...options) {\n    const normalizedOptions = normalizeArray(options);\n    const clone = [...this.options];\n    clone.splice(index, deleteCount, ...normalizedOptions.map(normalizedOption => normalizedOption instanceof StringSelectMenuOptionBuilder ? normalizedOption : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption))));\n    optionsLengthValidator.parse(clone.length);\n    this.options.splice(0, this.options.length, ...clone);\n    return this;\n  }\n  /**\n   * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredSelectMenuParameters(this.options, this.data.custom_id);\n    return {\n      ...this.data,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n};\n\n// src/components/selectMenu/UserSelectMenu.ts\nvar import_v107 = require(\"discord-api-types/v10\");\nvar UserSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"UserSelectMenuBuilder\");\n  }\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new UserSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new UserSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.setMinValues(1);\n   * ```\n   */\n  constructor(data) {\n    super({\n      ...data,\n      type: import_v107.ComponentType.UserSelect\n    });\n  }\n};\n\n// src/components/textInput/TextInput.ts\nvar import_util = require(\"@discordjs/util\");\nvar import_v109 = require(\"discord-api-types/v10\");\nvar import_fast_deep_equal = __toESM(require(\"fast-deep-equal\"));\n\n// src/components/textInput/Assertions.ts\nvar Assertions_exports3 = {};\n__export(Assertions_exports3, {\n  labelValidator: () => labelValidator,\n  maxLengthValidator: () => maxLengthValidator,\n  minLengthValidator: () => minLengthValidator,\n  placeholderValidator: () => placeholderValidator2,\n  requiredValidator: () => requiredValidator,\n  textInputStyleValidator: () => textInputStyleValidator,\n  validateRequiredParameters: () => validateRequiredParameters,\n  valueValidator: () => valueValidator\n});\nvar import_shapeshift3 = require(\"@sapphire/shapeshift\");\nvar import_v108 = require(\"discord-api-types/v10\");\nvar textInputStyleValidator = import_shapeshift3.s.nativeEnum(import_v108.TextInputStyle);\nvar minLengthValidator = import_shapeshift3.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar maxLengthValidator = import_shapeshift3.s.number.int.greaterThanOrEqual(1).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar requiredValidator = import_shapeshift3.s.boolean;\nvar valueValidator = import_shapeshift3.s.string.lengthLessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar placeholderValidator2 = import_shapeshift3.s.string.lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar labelValidator = import_shapeshift3.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredParameters(customId, style, label) {\n  customIdValidator.parse(customId);\n  textInputStyleValidator.parse(style);\n  labelValidator.parse(label);\n}\n__name(validateRequiredParameters, \"validateRequiredParameters\");\n\n// src/components/textInput/TextInput.ts\nvar TextInputBuilder = class extends ComponentBuilder {\n  static {\n    __name(this, \"TextInputBuilder\");\n  }\n  /**\n   * Creates a new text input from API data.\n   *\n   * @param data - The API data to create this text input with\n   * @example\n   * Creating a select menu option from an API data object:\n   * ```ts\n   * const textInput = new TextInputBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tlabel: 'Type something',\n   * \tstyle: TextInputStyle.Short,\n   * });\n   * ```\n   * @example\n   * Creating a select menu option using setters and API data:\n   * ```ts\n   * const textInput = new TextInputBuilder({\n   * \tlabel: 'Type something else',\n   * })\n   * \t.setCustomId('woah')\n   * \t.setStyle(TextInputStyle.Paragraph);\n   * ```\n   */\n  constructor(data) {\n    super({\n      type: import_v109.ComponentType.TextInput,\n      ...data\n    });\n  }\n  /**\n   * Sets the custom id for this text input.\n   *\n   * @param customId - The custom id to use\n   */\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  /**\n   * Sets the label for this text input.\n   *\n   * @param label - The label to use\n   */\n  setLabel(label) {\n    this.data.label = labelValidator.parse(label);\n    return this;\n  }\n  /**\n   * Sets the style for this text input.\n   *\n   * @param style - The style to use\n   */\n  setStyle(style) {\n    this.data.style = textInputStyleValidator.parse(style);\n    return this;\n  }\n  /**\n   * Sets the minimum length of text for this text input.\n   *\n   * @param minLength - The minimum length of text for this text input\n   */\n  setMinLength(minLength) {\n    this.data.min_length = minLengthValidator.parse(minLength);\n    return this;\n  }\n  /**\n   * Sets the maximum length of text for this text input.\n   *\n   * @param maxLength - The maximum length of text for this text input\n   */\n  setMaxLength(maxLength) {\n    this.data.max_length = maxLengthValidator.parse(maxLength);\n    return this;\n  }\n  /**\n   * Sets the placeholder for this text input.\n   *\n   * @param placeholder - The placeholder to use\n   */\n  setPlaceholder(placeholder) {\n    this.data.placeholder = placeholderValidator2.parse(placeholder);\n    return this;\n  }\n  /**\n   * Sets the value for this text input.\n   *\n   * @param value - The value to use\n   */\n  setValue(value) {\n    this.data.value = valueValidator.parse(value);\n    return this;\n  }\n  /**\n   * Sets whether this text input is required.\n   *\n   * @param required - Whether this text input is required\n   */\n  setRequired(required = true) {\n    this.data.required = requiredValidator.parse(required);\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);\n    return {\n      ...this.data\n    };\n  }\n  /**\n   * {@inheritDoc Equatable.equals}\n   */\n  equals(other) {\n    if ((0, import_util.isJSONEncodable)(other)) {\n      return (0, import_fast_deep_equal.default)(other.toJSON(), this.data);\n    }\n    return (0, import_fast_deep_equal.default)(other, this.data);\n  }\n};\n\n// src/components/Components.ts\nfunction createComponentBuilder(data) {\n  if (data instanceof ComponentBuilder) {\n    return data;\n  }\n  switch (data.type) {\n    case import_v1010.ComponentType.ActionRow:\n      return new ActionRowBuilder(data);\n    case import_v1010.ComponentType.Button:\n      return new ButtonBuilder(data);\n    case import_v1010.ComponentType.StringSelect:\n      return new StringSelectMenuBuilder(data);\n    case import_v1010.ComponentType.TextInput:\n      return new TextInputBuilder(data);\n    case import_v1010.ComponentType.UserSelect:\n      return new UserSelectMenuBuilder(data);\n    case import_v1010.ComponentType.RoleSelect:\n      return new RoleSelectMenuBuilder(data);\n    case import_v1010.ComponentType.MentionableSelect:\n      return new MentionableSelectMenuBuilder(data);\n    case import_v1010.ComponentType.ChannelSelect:\n      return new ChannelSelectMenuBuilder(data);\n    default:\n      throw new Error(`Cannot properly serialize component type: ${data.type}`);\n  }\n}\n__name(createComponentBuilder, \"createComponentBuilder\");\n\n// src/components/ActionRow.ts\nvar ActionRowBuilder = class extends ComponentBuilder {\n  static {\n    __name(this, \"ActionRowBuilder\");\n  }\n  /**\n   * The components within this action row.\n   */\n  components;\n  /**\n   * Creates a new action row from API data.\n   *\n   * @param data - The API data to create this action row with\n   * @example\n   * Creating an action row from an API data object:\n   * ```ts\n   * const actionRow = new ActionRowBuilder({\n   * \tcomponents: [\n   * \t\t{\n   * \t\t\tcustom_id: \"custom id\",\n   * \t\t\tlabel: \"Type something\",\n   * \t\t\tstyle: TextInputStyle.Short,\n   * \t\t\ttype: ComponentType.TextInput,\n   * \t\t},\n   * \t],\n   * });\n   * ```\n   * @example\n   * Creating an action row using setters and API data:\n   * ```ts\n   * const actionRow = new ActionRowBuilder({\n   * \tcomponents: [\n   * \t\t{\n   * \t\t\tcustom_id: \"custom id\",\n   * \t\t\tlabel: \"Click me\",\n   * \t\t\tstyle: ButtonStyle.Primary,\n   * \t\t\ttype: ComponentType.Button,\n   * \t\t},\n   * \t],\n   * })\n   * \t.addComponents(button2, button3);\n   * ```\n   */\n  constructor({\n    components,\n    ...data\n  } = {}) {\n    super({\n      type: import_v1011.ComponentType.ActionRow,\n      ...data\n    });\n    this.components = components?.map(component => createComponentBuilder(component)) ?? [];\n  }\n  /**\n   * Adds components to this action row.\n   *\n   * @param components - The components to add\n   */\n  addComponents(...components) {\n    this.components.push(...normalizeArray(components));\n    return this;\n  }\n  /**\n   * Sets components for this action row.\n   *\n   * @param components - The components to set\n   */\n  setComponents(...components) {\n    this.components.splice(0, this.components.length, ...normalizeArray(components));\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    return {\n      ...this.data,\n      components: this.components.map(component => component.toJSON())\n    };\n  }\n};\n\n// src/interactions/modals/Assertions.ts\nvar Assertions_exports4 = {};\n__export(Assertions_exports4, {\n  componentsValidator: () => componentsValidator,\n  titleValidator: () => titleValidator,\n  validateRequiredParameters: () => validateRequiredParameters2\n});\nvar import_shapeshift4 = require(\"@sapphire/shapeshift\");\nvar titleValidator = import_shapeshift4.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);\nvar componentsValidator = import_shapeshift4.s.instance(ActionRowBuilder).array.lengthGreaterThanOrEqual(1).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredParameters2(customId, title, components) {\n  customIdValidator.parse(customId);\n  titleValidator.parse(title);\n  componentsValidator.parse(components);\n}\n__name(validateRequiredParameters2, \"validateRequiredParameters\");\n\n// src/interactions/modals/Modal.ts\nvar ModalBuilder = class {\n  static {\n    __name(this, \"ModalBuilder\");\n  }\n  /**\n   * The API data associated with this modal.\n   */\n  data;\n  /**\n   * The components within this modal.\n   */\n  components = [];\n  /**\n   * Creates a new modal from API data.\n   *\n   * @param data - The API data to create this modal with\n   */\n  constructor({\n    components,\n    ...data\n  } = {}) {\n    this.data = {\n      ...data\n    };\n    this.components = components?.map(component => createComponentBuilder(component)) ?? [];\n  }\n  /**\n   * Sets the title of this modal.\n   *\n   * @param title - The title to use\n   */\n  setTitle(title) {\n    this.data.title = titleValidator.parse(title);\n    return this;\n  }\n  /**\n   * Sets the custom id of this modal.\n   *\n   * @param customId - The custom id to use\n   */\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  /**\n   * Adds components to this modal.\n   *\n   * @param components - The components to add\n   */\n  addComponents(...components) {\n    this.components.push(...normalizeArray(components).map(component => component instanceof ActionRowBuilder ? component : new ActionRowBuilder(component)));\n    return this;\n  }\n  /**\n   * Sets components for this modal.\n   *\n   * @param components - The components to set\n   */\n  setComponents(...components) {\n    this.components.splice(0, this.components.length, ...normalizeArray(components));\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredParameters2(this.data.custom_id, this.data.title, this.components);\n    return {\n      ...this.data,\n      components: this.components.map(component => component.toJSON())\n    };\n  }\n};\n\n// src/interactions/slashCommands/Assertions.ts\nvar Assertions_exports5 = {};\n__export(Assertions_exports5, {\n  assertReturnOfBuilder: () => assertReturnOfBuilder,\n  localizationMapPredicate: () => localizationMapPredicate,\n  validateChoicesLength: () => validateChoicesLength,\n  validateDMPermission: () => validateDMPermission,\n  validateDefaultMemberPermissions: () => validateDefaultMemberPermissions,\n  validateDefaultPermission: () => validateDefaultPermission,\n  validateDescription: () => validateDescription,\n  validateLocale: () => validateLocale,\n  validateLocalizationMap: () => validateLocalizationMap,\n  validateMaxOptionsLength: () => validateMaxOptionsLength,\n  validateNSFW: () => validateNSFW,\n  validateName: () => validateName,\n  validateRequired: () => validateRequired,\n  validateRequiredParameters: () => validateRequiredParameters3\n});\nvar import_shapeshift5 = require(\"@sapphire/shapeshift\");\nvar import_v1012 = require(\"discord-api-types/v10\");\nvar namePredicate = import_shapeshift5.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^[\\p{Ll}\\p{Lm}\\p{Lo}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+$/u).setValidationEnabled(isValidationEnabled);\nfunction validateName(name) {\n  namePredicate.parse(name);\n}\n__name(validateName, \"validateName\");\nvar descriptionPredicate2 = import_shapeshift5.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar localePredicate = import_shapeshift5.s.nativeEnum(import_v1012.Locale);\nfunction validateDescription(description) {\n  descriptionPredicate2.parse(description);\n}\n__name(validateDescription, \"validateDescription\");\nvar maxArrayLengthPredicate = import_shapeshift5.s.unknown.array.lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateLocale(locale) {\n  return localePredicate.parse(locale);\n}\n__name(validateLocale, \"validateLocale\");\nfunction validateMaxOptionsLength(options) {\n  maxArrayLengthPredicate.parse(options);\n}\n__name(validateMaxOptionsLength, \"validateMaxOptionsLength\");\nfunction validateRequiredParameters3(name, description, options) {\n  validateName(name);\n  validateDescription(description);\n  validateMaxOptionsLength(options);\n}\n__name(validateRequiredParameters3, \"validateRequiredParameters\");\nvar booleanPredicate = import_shapeshift5.s.boolean;\nfunction validateDefaultPermission(value) {\n  booleanPredicate.parse(value);\n}\n__name(validateDefaultPermission, \"validateDefaultPermission\");\nfunction validateRequired(required) {\n  booleanPredicate.parse(required);\n}\n__name(validateRequired, \"validateRequired\");\nvar choicesLengthPredicate = import_shapeshift5.s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateChoicesLength(amountAdding, choices) {\n  choicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);\n}\n__name(validateChoicesLength, \"validateChoicesLength\");\nfunction assertReturnOfBuilder(input, ExpectedInstanceOf) {\n  import_shapeshift5.s.instance(ExpectedInstanceOf).parse(input);\n}\n__name(assertReturnOfBuilder, \"assertReturnOfBuilder\");\nvar localizationMapPredicate = import_shapeshift5.s.object(Object.fromEntries(Object.values(import_v1012.Locale).map(locale => [locale, import_shapeshift5.s.string.nullish]))).strict.nullish.setValidationEnabled(isValidationEnabled);\nfunction validateLocalizationMap(value) {\n  localizationMapPredicate.parse(value);\n}\n__name(validateLocalizationMap, \"validateLocalizationMap\");\nvar dmPermissionPredicate = import_shapeshift5.s.boolean.nullish;\nfunction validateDMPermission(value) {\n  dmPermissionPredicate.parse(value);\n}\n__name(validateDMPermission, \"validateDMPermission\");\nvar memberPermissionPredicate = import_shapeshift5.s.union(import_shapeshift5.s.bigint.transform(value => value.toString()), import_shapeshift5.s.number.safeInt.transform(value => value.toString()), import_shapeshift5.s.string.regex(/^\\d+$/)).nullish;\nfunction validateDefaultMemberPermissions(permissions) {\n  return memberPermissionPredicate.parse(permissions);\n}\n__name(validateDefaultMemberPermissions, \"validateDefaultMemberPermissions\");\nfunction validateNSFW(value) {\n  booleanPredicate.parse(value);\n}\n__name(validateNSFW, \"validateNSFW\");\n\n// src/interactions/slashCommands/SlashCommandBuilder.ts\nvar import_ts_mixer6 = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/SlashCommandSubcommands.ts\nvar import_v1024 = require(\"discord-api-types/v10\");\nvar import_ts_mixer5 = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/NameAndDescription.ts\nvar SharedNameAndDescription = class {\n  static {\n    __name(this, \"SharedNameAndDescription\");\n  }\n  /**\n   * The name of this command.\n   */\n  name;\n  /**\n   * The name localizations of this command.\n   */\n  name_localizations;\n  /**\n   * The description of this command.\n   */\n  description;\n  /**\n   * The description localizations of this command.\n   */\n  description_localizations;\n  /**\n   * Sets the name of this command.\n   *\n   * @param name - The name to use\n   */\n  setName(name) {\n    validateName(name);\n    Reflect.set(this, \"name\", name);\n    return this;\n  }\n  /**\n   * Sets the description of this command.\n   *\n   * @param description - The description to use\n   */\n  setDescription(description) {\n    validateDescription(description);\n    Reflect.set(this, \"description\", description);\n    return this;\n  }\n  /**\n   * Sets a name localization for this command.\n   *\n   * @param locale - The locale to set\n   * @param localizedName - The localized name for the given `locale`\n   */\n  setNameLocalization(locale, localizedName) {\n    if (!this.name_localizations) {\n      Reflect.set(this, \"name_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedName === null) {\n      this.name_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateName(localizedName);\n    this.name_localizations[parsedLocale] = localizedName;\n    return this;\n  }\n  /**\n   * Sets the name localizations for this command.\n   *\n   * @param localizedNames - The object of localized names to set\n   */\n  setNameLocalizations(localizedNames) {\n    if (localizedNames === null) {\n      Reflect.set(this, \"name_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"name_localizations\", {});\n    for (const args of Object.entries(localizedNames)) {\n      this.setNameLocalization(...args);\n    }\n    return this;\n  }\n  /**\n   * Sets a description localization for this command.\n   *\n   * @param locale - The locale to set\n   * @param localizedDescription - The localized description for the given locale\n   */\n  setDescriptionLocalization(locale, localizedDescription) {\n    if (!this.description_localizations) {\n      Reflect.set(this, \"description_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedDescription === null) {\n      this.description_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateDescription(localizedDescription);\n    this.description_localizations[parsedLocale] = localizedDescription;\n    return this;\n  }\n  /**\n   * Sets the description localizations for this command.\n   *\n   * @param localizedDescriptions - The object of localized descriptions to set\n   */\n  setDescriptionLocalizations(localizedDescriptions) {\n    if (localizedDescriptions === null) {\n      Reflect.set(this, \"description_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"description_localizations\", {});\n    for (const args of Object.entries(localizedDescriptions)) {\n      this.setDescriptionLocalization(...args);\n    }\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/options/attachment.ts\nvar import_v1013 = require(\"discord-api-types/v10\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionBase.ts\nvar ApplicationCommandOptionBase = class extends SharedNameAndDescription {\n  static {\n    __name(this, \"ApplicationCommandOptionBase\");\n  }\n  /**\n   * Whether this option is required.\n   *\n   * @defaultValue `false`\n   */\n  required = false;\n  /**\n   * Sets whether this option is required.\n   *\n   * @param required - Whether this option should be required\n   */\n  setRequired(required) {\n    validateRequired(required);\n    Reflect.set(this, \"required\", required);\n    return this;\n  }\n  /**\n   * This method runs required validators on this builder.\n   */\n  runRequiredValidations() {\n    validateRequiredParameters3(this.name, this.description, []);\n    validateLocalizationMap(this.name_localizations);\n    validateLocalizationMap(this.description_localizations);\n    validateRequired(this.required);\n  }\n};\n\n// src/interactions/slashCommands/options/attachment.ts\nvar SlashCommandAttachmentOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandAttachmentOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1013.ApplicationCommandOptionType.Attachment;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n\n// src/interactions/slashCommands/options/boolean.ts\nvar import_v1014 = require(\"discord-api-types/v10\");\nvar SlashCommandBooleanOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandBooleanOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1014.ApplicationCommandOptionType.Boolean;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n\n// src/interactions/slashCommands/options/channel.ts\nvar import_v1016 = require(\"discord-api-types/v10\");\nvar import_ts_mixer = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts\nvar import_shapeshift6 = require(\"@sapphire/shapeshift\");\nvar import_v1015 = require(\"discord-api-types/v10\");\nvar allowedChannelTypes = [import_v1015.ChannelType.GuildText, import_v1015.ChannelType.GuildVoice, import_v1015.ChannelType.GuildCategory, import_v1015.ChannelType.GuildAnnouncement, import_v1015.ChannelType.AnnouncementThread, import_v1015.ChannelType.PublicThread, import_v1015.ChannelType.PrivateThread, import_v1015.ChannelType.GuildStageVoice, import_v1015.ChannelType.GuildForum];\nvar channelTypesPredicate = import_shapeshift6.s.array(import_shapeshift6.s.union(...allowedChannelTypes.map(type => import_shapeshift6.s.literal(type))));\nvar ApplicationCommandOptionChannelTypesMixin = class {\n  static {\n    __name(this, \"ApplicationCommandOptionChannelTypesMixin\");\n  }\n  /**\n   * The channel types of this option.\n   */\n  channel_types;\n  /**\n   * Adds channel types to this option.\n   *\n   * @param channelTypes - The channel types\n   */\n  addChannelTypes(...channelTypes) {\n    if (this.channel_types === void 0) {\n      Reflect.set(this, \"channel_types\", []);\n    }\n    this.channel_types.push(...channelTypesPredicate.parse(channelTypes));\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/options/channel.ts\nvar SlashCommandChannelOption = class extends ApplicationCommandOptionBase {\n  /**\n   * The type of this option.\n   */\n  type = import_v1016.ApplicationCommandOptionType.Channel;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandChannelOption, \"SlashCommandChannelOption\");\nSlashCommandChannelOption = __decorateClass([(0, import_ts_mixer.mix)(ApplicationCommandOptionChannelTypesMixin)], SlashCommandChannelOption);\n\n// src/interactions/slashCommands/options/integer.ts\nvar import_shapeshift8 = require(\"@sapphire/shapeshift\");\nvar import_v1018 = require(\"discord-api-types/v10\");\nvar import_ts_mixer2 = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.ts\nvar ApplicationCommandNumericOptionMinMaxValueMixin = class {\n  static {\n    __name(this, \"ApplicationCommandNumericOptionMinMaxValueMixin\");\n  }\n  /**\n   * The maximum value of this option.\n   */\n  max_value;\n  /**\n   * The minimum value of this option.\n   */\n  min_value;\n};\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.ts\nvar import_shapeshift7 = require(\"@sapphire/shapeshift\");\nvar import_v1017 = require(\"discord-api-types/v10\");\nvar stringPredicate = import_shapeshift7.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nvar numberPredicate = import_shapeshift7.s.number.greaterThan(Number.NEGATIVE_INFINITY).lessThan(Number.POSITIVE_INFINITY);\nvar choicesPredicate = import_shapeshift7.s.object({\n  name: stringPredicate,\n  name_localizations: localizationMapPredicate,\n  value: import_shapeshift7.s.union(stringPredicate, numberPredicate)\n}).array;\nvar booleanPredicate2 = import_shapeshift7.s.boolean;\nvar ApplicationCommandOptionWithChoicesAndAutocompleteMixin = class {\n  static {\n    __name(this, \"ApplicationCommandOptionWithChoicesAndAutocompleteMixin\");\n  }\n  /**\n   * The choices of this option.\n   */\n  choices;\n  /**\n   * Whether this option utilizes autocomplete.\n   */\n  autocomplete;\n  /**\n   * The type of this option.\n   *\n   * @privateRemarks Since this is present and this is a mixin, this is needed.\n   */\n  type;\n  /**\n   * Adds multiple choices to this option.\n   *\n   * @param choices - The choices to add\n   */\n  addChoices(...choices) {\n    if (choices.length > 0 && this.autocomplete) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    choicesPredicate.parse(choices);\n    if (this.choices === void 0) {\n      Reflect.set(this, \"choices\", []);\n    }\n    validateChoicesLength(choices.length, this.choices);\n    for (const {\n      name,\n      name_localizations,\n      value\n    } of choices) {\n      if (this.type === import_v1017.ApplicationCommandOptionType.String) {\n        stringPredicate.parse(value);\n      } else {\n        numberPredicate.parse(value);\n      }\n      this.choices.push({\n        name,\n        name_localizations,\n        value\n      });\n    }\n    return this;\n  }\n  /**\n   * Sets multiple choices for this option.\n   *\n   * @param choices - The choices to set\n   */\n  setChoices(...choices) {\n    if (choices.length > 0 && this.autocomplete) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    choicesPredicate.parse(choices);\n    Reflect.set(this, \"choices\", []);\n    this.addChoices(...choices);\n    return this;\n  }\n  /**\n   * Whether this option uses autocomplete.\n   *\n   * @param autocomplete - Whether this option should use autocomplete\n   */\n  setAutocomplete(autocomplete) {\n    booleanPredicate2.parse(autocomplete);\n    if (autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    Reflect.set(this, \"autocomplete\", autocomplete);\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/options/integer.ts\nvar numberValidator = import_shapeshift8.s.number.int;\nvar SlashCommandIntegerOption = class extends ApplicationCommandOptionBase {\n  /**\n   * The type of this option.\n   */\n  type = import_v1018.ApplicationCommandOptionType.Integer;\n  /**\n   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n   */\n  setMaxValue(max) {\n    numberValidator.parse(max);\n    Reflect.set(this, \"max_value\", max);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n   */\n  setMinValue(min) {\n    numberValidator.parse(min);\n    Reflect.set(this, \"min_value\", min);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandIntegerOption, \"SlashCommandIntegerOption\");\nSlashCommandIntegerOption = __decorateClass([(0, import_ts_mixer2.mix)(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)], SlashCommandIntegerOption);\n\n// src/interactions/slashCommands/options/mentionable.ts\nvar import_v1019 = require(\"discord-api-types/v10\");\nvar SlashCommandMentionableOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandMentionableOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1019.ApplicationCommandOptionType.Mentionable;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n\n// src/interactions/slashCommands/options/number.ts\nvar import_shapeshift9 = require(\"@sapphire/shapeshift\");\nvar import_v1020 = require(\"discord-api-types/v10\");\nvar import_ts_mixer3 = require(\"ts-mixer\");\nvar numberValidator2 = import_shapeshift9.s.number;\nvar SlashCommandNumberOption = class extends ApplicationCommandOptionBase {\n  /**\n   * The type of this option.\n   */\n  type = import_v1020.ApplicationCommandOptionType.Number;\n  /**\n   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n   */\n  setMaxValue(max) {\n    numberValidator2.parse(max);\n    Reflect.set(this, \"max_value\", max);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n   */\n  setMinValue(min) {\n    numberValidator2.parse(min);\n    Reflect.set(this, \"min_value\", min);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandNumberOption, \"SlashCommandNumberOption\");\nSlashCommandNumberOption = __decorateClass([(0, import_ts_mixer3.mix)(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)], SlashCommandNumberOption);\n\n// src/interactions/slashCommands/options/role.ts\nvar import_v1021 = require(\"discord-api-types/v10\");\nvar SlashCommandRoleOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandRoleOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1021.ApplicationCommandOptionType.Role;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n\n// src/interactions/slashCommands/options/string.ts\nvar import_shapeshift10 = require(\"@sapphire/shapeshift\");\nvar import_v1022 = require(\"discord-api-types/v10\");\nvar import_ts_mixer4 = require(\"ts-mixer\");\nvar minLengthValidator2 = import_shapeshift10.s.number.greaterThanOrEqual(0).lessThanOrEqual(6e3);\nvar maxLengthValidator2 = import_shapeshift10.s.number.greaterThanOrEqual(1).lessThanOrEqual(6e3);\nvar SlashCommandStringOption = class extends ApplicationCommandOptionBase {\n  /**\n   * The type of this option.\n   */\n  type = import_v1022.ApplicationCommandOptionType.String;\n  /**\n   * The maximum length of this option.\n   */\n  max_length;\n  /**\n   * The minimum length of this option.\n   */\n  min_length;\n  /**\n   * Sets the maximum length of this string option.\n   *\n   * @param max - The maximum length this option can be\n   */\n  setMaxLength(max) {\n    maxLengthValidator2.parse(max);\n    Reflect.set(this, \"max_length\", max);\n    return this;\n  }\n  /**\n   * Sets the minimum length of this string option.\n   *\n   * @param min - The minimum length this option can be\n   */\n  setMinLength(min) {\n    minLengthValidator2.parse(min);\n    Reflect.set(this, \"min_length\", min);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandStringOption, \"SlashCommandStringOption\");\nSlashCommandStringOption = __decorateClass([(0, import_ts_mixer4.mix)(ApplicationCommandOptionWithChoicesAndAutocompleteMixin)], SlashCommandStringOption);\n\n// src/interactions/slashCommands/options/user.ts\nvar import_v1023 = require(\"discord-api-types/v10\");\nvar SlashCommandUserOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandUserOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1023.ApplicationCommandOptionType.User;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n\n// src/interactions/slashCommands/mixins/SharedSlashCommandOptions.ts\nvar SharedSlashCommandOptions = class {\n  static {\n    __name(this, \"SharedSlashCommandOptions\");\n  }\n  options;\n  /**\n   * Adds a boolean option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addBooleanOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n  }\n  /**\n   * Adds a user option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addUserOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandUserOption);\n  }\n  /**\n   * Adds a channel option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addChannelOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n  }\n  /**\n   * Adds a role option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addRoleOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n  }\n  /**\n   * Adds an attachment option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addAttachmentOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);\n  }\n  /**\n   * Adds a mentionable option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addMentionableOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n  }\n  /**\n   * Adds a string option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addStringOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandStringOption);\n  }\n  /**\n   * Adds an integer option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addIntegerOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n  }\n  /**\n   * Adds a number option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addNumberOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandNumberOption);\n  }\n  /**\n   * Where the actual adding magic happens. ✨\n   *\n   * @param input - The input. What else?\n   * @param Instance - The instance of whatever is being added\n   * @internal\n   */\n  _sharedAddOptionMethod(input, Instance) {\n    const {\n      options\n    } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new Instance()) : input;\n    assertReturnOfBuilder(result, Instance);\n    options.push(result);\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/SlashCommandSubcommands.ts\nvar SlashCommandSubcommandGroupBuilder = class {\n  /**\n   * The name of this subcommand group.\n   */\n  name = void 0;\n  /**\n   * The description of this subcommand group.\n   */\n  description = void 0;\n  /**\n   * The subcommands within this subcommand group.\n   */\n  options = [];\n  /**\n   * Adds a new subcommand to this group.\n   *\n   * @param input - A function that returns a subcommand builder or an already built builder\n   */\n  addSubcommand(input) {\n    const {\n      options\n    } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n    options.push(result);\n    return this;\n  }\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    return {\n      type: import_v1024.ApplicationCommandOptionType.SubcommandGroup,\n      name: this.name,\n      name_localizations: this.name_localizations,\n      description: this.description,\n      description_localizations: this.description_localizations,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n};\n__name(SlashCommandSubcommandGroupBuilder, \"SlashCommandSubcommandGroupBuilder\");\nSlashCommandSubcommandGroupBuilder = __decorateClass([(0, import_ts_mixer5.mix)(SharedNameAndDescription)], SlashCommandSubcommandGroupBuilder);\nvar SlashCommandSubcommandBuilder = class {\n  /**\n   * The name of this subcommand.\n   */\n  name = void 0;\n  /**\n   * The description of this subcommand.\n   */\n  description = void 0;\n  /**\n   * The options within this subcommand.\n   */\n  options = [];\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    return {\n      type: import_v1024.ApplicationCommandOptionType.Subcommand,\n      name: this.name,\n      name_localizations: this.name_localizations,\n      description: this.description,\n      description_localizations: this.description_localizations,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n};\n__name(SlashCommandSubcommandBuilder, \"SlashCommandSubcommandBuilder\");\nSlashCommandSubcommandBuilder = __decorateClass([(0, import_ts_mixer5.mix)(SharedNameAndDescription, SharedSlashCommandOptions)], SlashCommandSubcommandBuilder);\n\n// src/interactions/slashCommands/SlashCommandBuilder.ts\nvar SlashCommandBuilder = class {\n  /**\n   * The name of this command.\n   */\n  name = void 0;\n  /**\n   * The name localizations of this command.\n   */\n  name_localizations;\n  /**\n   * The description of this command.\n   */\n  description = void 0;\n  /**\n   * The description localizations of this command.\n   */\n  description_localizations;\n  /**\n   * The options of this command.\n   */\n  options = [];\n  /**\n   * Whether this command is enabled by default when the application is added to a guild.\n   *\n   * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n   */\n  default_permission = void 0;\n  /**\n   * The set of permissions represented as a bit set for the command.\n   */\n  default_member_permissions = void 0;\n  /**\n   * Indicates whether the command is available in direct messages with the application.\n   *\n   * @remarks\n   * By default, commands are visible. This property is only for global commands.\n   */\n  dm_permission = void 0;\n  /**\n   * Whether this command is NSFW.\n   */\n  nsfw = void 0;\n  /**\n   * Sets whether the command is enabled by default when the application is added to a guild.\n   *\n   * @remarks\n   * If set to `false`, you will have to later `PUT` the permissions for this command.\n   * @param value - Whether or not to enable this command by default\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   * @deprecated Use {@link SlashCommandBuilder.setDefaultMemberPermissions} or {@link SlashCommandBuilder.setDMPermission} instead.\n   */\n  setDefaultPermission(value) {\n    validateDefaultPermission(value);\n    Reflect.set(this, \"default_permission\", value);\n    return this;\n  }\n  /**\n   * Sets the default permissions a member should have in order to run the command.\n   *\n   * @remarks\n   * You can set this to `'0'` to disable the command by default.\n   * @param permissions - The permissions bit field to set\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   */\n  setDefaultMemberPermissions(permissions) {\n    const permissionValue = validateDefaultMemberPermissions(permissions);\n    Reflect.set(this, \"default_member_permissions\", permissionValue);\n    return this;\n  }\n  /**\n   * Sets if the command is available in direct messages with the application.\n   *\n   * @remarks\n   * By default, commands are visible. This method is only for global commands.\n   * @param enabled - Whether the command should be enabled in direct messages\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   */\n  setDMPermission(enabled) {\n    validateDMPermission(enabled);\n    Reflect.set(this, \"dm_permission\", enabled);\n    return this;\n  }\n  /**\n   * Sets whether this command is NSFW.\n   *\n   * @param nsfw - Whether this command is NSFW\n   */\n  setNSFW(nsfw = true) {\n    validateNSFW(nsfw);\n    Reflect.set(this, \"nsfw\", nsfw);\n    return this;\n  }\n  /**\n   * Adds a new subcommand group to this command.\n   *\n   * @param input - A function that returns a subcommand group builder or an already built builder\n   */\n  addSubcommandGroup(input) {\n    const {\n      options\n    } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandGroupBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);\n    options.push(result);\n    return this;\n  }\n  /**\n   * Adds a new subcommand to this command.\n   *\n   * @param input - A function that returns a subcommand builder or an already built builder\n   */\n  addSubcommand(input) {\n    const {\n      options\n    } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n    options.push(result);\n    return this;\n  }\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    validateLocalizationMap(this.name_localizations);\n    validateLocalizationMap(this.description_localizations);\n    return {\n      ...this,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n};\n__name(SlashCommandBuilder, \"SlashCommandBuilder\");\nSlashCommandBuilder = __decorateClass([(0, import_ts_mixer6.mix)(SharedSlashCommandOptions, SharedNameAndDescription)], SlashCommandBuilder);\n\n// src/interactions/contextMenuCommands/Assertions.ts\nvar Assertions_exports6 = {};\n__export(Assertions_exports6, {\n  validateDMPermission: () => validateDMPermission2,\n  validateDefaultMemberPermissions: () => validateDefaultMemberPermissions2,\n  validateDefaultPermission: () => validateDefaultPermission2,\n  validateName: () => validateName2,\n  validateRequiredParameters: () => validateRequiredParameters4,\n  validateType: () => validateType\n});\nvar import_shapeshift11 = require(\"@sapphire/shapeshift\");\nvar import_v1025 = require(\"discord-api-types/v10\");\nvar namePredicate2 = import_shapeshift11.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^( *[\\p{P}\\p{L}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}]+ *)+$/u).setValidationEnabled(isValidationEnabled);\nvar typePredicate = import_shapeshift11.s.union(import_shapeshift11.s.literal(import_v1025.ApplicationCommandType.User), import_shapeshift11.s.literal(import_v1025.ApplicationCommandType.Message)).setValidationEnabled(isValidationEnabled);\nvar booleanPredicate3 = import_shapeshift11.s.boolean;\nfunction validateDefaultPermission2(value) {\n  booleanPredicate3.parse(value);\n}\n__name(validateDefaultPermission2, \"validateDefaultPermission\");\nfunction validateName2(name) {\n  namePredicate2.parse(name);\n}\n__name(validateName2, \"validateName\");\nfunction validateType(type) {\n  typePredicate.parse(type);\n}\n__name(validateType, \"validateType\");\nfunction validateRequiredParameters4(name, type) {\n  validateName2(name);\n  validateType(type);\n}\n__name(validateRequiredParameters4, \"validateRequiredParameters\");\nvar dmPermissionPredicate2 = import_shapeshift11.s.boolean.nullish;\nfunction validateDMPermission2(value) {\n  dmPermissionPredicate2.parse(value);\n}\n__name(validateDMPermission2, \"validateDMPermission\");\nvar memberPermissionPredicate2 = import_shapeshift11.s.union(import_shapeshift11.s.bigint.transform(value => value.toString()), import_shapeshift11.s.number.safeInt.transform(value => value.toString()), import_shapeshift11.s.string.regex(/^\\d+$/)).nullish;\nfunction validateDefaultMemberPermissions2(permissions) {\n  return memberPermissionPredicate2.parse(permissions);\n}\n__name(validateDefaultMemberPermissions2, \"validateDefaultMemberPermissions\");\n\n// src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts\nvar ContextMenuCommandBuilder = class {\n  static {\n    __name(this, \"ContextMenuCommandBuilder\");\n  }\n  /**\n   * The name of this command.\n   */\n  name = void 0;\n  /**\n   * The name localizations of this command.\n   */\n  name_localizations;\n  /**\n   * The type of this command.\n   */\n  type = void 0;\n  /**\n   * Whether this command is enabled by default when the application is added to a guild.\n   *\n   * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n   */\n  default_permission = void 0;\n  /**\n   * The set of permissions represented as a bit set for the command.\n   */\n  default_member_permissions = void 0;\n  /**\n   * Indicates whether the command is available in direct messages with the application.\n   *\n   * @remarks\n   * By default, commands are visible. This property is only for global commands.\n   */\n  dm_permission = void 0;\n  /**\n   * Sets the name of this command.\n   *\n   * @param name - The name to use\n   */\n  setName(name) {\n    validateName2(name);\n    Reflect.set(this, \"name\", name);\n    return this;\n  }\n  /**\n   * Sets the type of this command.\n   *\n   * @param type - The type to use\n   */\n  setType(type) {\n    validateType(type);\n    Reflect.set(this, \"type\", type);\n    return this;\n  }\n  /**\n   * Sets whether the command is enabled by default when the application is added to a guild.\n   *\n   * @remarks\n   * If set to `false`, you will have to later `PUT` the permissions for this command.\n   * @param value - Whether to enable this command by default\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n   */\n  setDefaultPermission(value) {\n    validateDefaultPermission2(value);\n    Reflect.set(this, \"default_permission\", value);\n    return this;\n  }\n  /**\n   * Sets the default permissions a member should have in order to run this command.\n   *\n   * @remarks\n   * You can set this to `'0'` to disable the command by default.\n   * @param permissions - The permissions bit field to set\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   */\n  setDefaultMemberPermissions(permissions) {\n    const permissionValue = validateDefaultMemberPermissions2(permissions);\n    Reflect.set(this, \"default_member_permissions\", permissionValue);\n    return this;\n  }\n  /**\n   * Sets if the command is available in direct messages with the application.\n   *\n   * @remarks\n   * By default, commands are visible. This method is only for global commands.\n   * @param enabled - Whether the command should be enabled in direct messages\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   */\n  setDMPermission(enabled) {\n    validateDMPermission2(enabled);\n    Reflect.set(this, \"dm_permission\", enabled);\n    return this;\n  }\n  /**\n   * Sets a name localization for this command.\n   *\n   * @param locale - The locale to set\n   * @param localizedName - The localized name for the given `locale`\n   */\n  setNameLocalization(locale, localizedName) {\n    if (!this.name_localizations) {\n      Reflect.set(this, \"name_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedName === null) {\n      this.name_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateName2(localizedName);\n    this.name_localizations[parsedLocale] = localizedName;\n    return this;\n  }\n  /**\n   * Sets the name localizations for this command.\n   *\n   * @param localizedNames - The object of localized names to set\n   */\n  setNameLocalizations(localizedNames) {\n    if (localizedNames === null) {\n      Reflect.set(this, \"name_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"name_localizations\", {});\n    for (const args of Object.entries(localizedNames)) this.setNameLocalization(...args);\n    return this;\n  }\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    validateRequiredParameters4(this.name, this.type);\n    validateLocalizationMap(this.name_localizations);\n    return {\n      ...this\n    };\n  }\n};\n\n// src/util/componentUtil.ts\nfunction embedLength(data) {\n  return (data.title?.length ?? 0) + (data.description?.length ?? 0) + (data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) + (data.footer?.text.length ?? 0) + (data.author?.name.length ?? 0);\n}\n__name(embedLength, \"embedLength\");\n\n// src/index.ts\nvar version = \"1.6.5\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ActionRowBuilder,\n  ApplicationCommandNumericOptionMinMaxValueMixin,\n  ApplicationCommandOptionBase,\n  ApplicationCommandOptionChannelTypesMixin,\n  ApplicationCommandOptionWithChoicesAndAutocompleteMixin,\n  BaseSelectMenuBuilder,\n  ButtonBuilder,\n  ChannelSelectMenuBuilder,\n  ComponentAssertions,\n  ComponentBuilder,\n  ContextMenuCommandAssertions,\n  ContextMenuCommandBuilder,\n  EmbedAssertions,\n  EmbedBuilder,\n  MentionableSelectMenuBuilder,\n  ModalAssertions,\n  ModalBuilder,\n  RoleSelectMenuBuilder,\n  SelectMenuBuilder,\n  SelectMenuOptionBuilder,\n  SharedNameAndDescription,\n  SharedSlashCommandOptions,\n  SlashCommandAssertions,\n  SlashCommandAttachmentOption,\n  SlashCommandBooleanOption,\n  SlashCommandBuilder,\n  SlashCommandChannelOption,\n  SlashCommandIntegerOption,\n  SlashCommandMentionableOption,\n  SlashCommandNumberOption,\n  SlashCommandRoleOption,\n  SlashCommandStringOption,\n  SlashCommandSubcommandBuilder,\n  SlashCommandSubcommandGroupBuilder,\n  SlashCommandUserOption,\n  StringSelectMenuBuilder,\n  StringSelectMenuOptionBuilder,\n  TextInputAssertions,\n  TextInputBuilder,\n  UserSelectMenuBuilder,\n  createComponentBuilder,\n  disableValidators,\n  embedLength,\n  enableValidators,\n  isValidationEnabled,\n  normalizeArray,\n  version,\n  ...require(\"@discordjs/formatters\")\n});","map":{"version":3,"names":["src_exports","__export","ActionRowBuilder","ApplicationCommandNumericOptionMinMaxValueMixin","ApplicationCommandOptionBase","ApplicationCommandOptionChannelTypesMixin","ApplicationCommandOptionWithChoicesAndAutocompleteMixin","BaseSelectMenuBuilder","ButtonBuilder","ChannelSelectMenuBuilder","ComponentAssertions","Assertions_exports2","ComponentBuilder","ContextMenuCommandAssertions","Assertions_exports6","ContextMenuCommandBuilder","EmbedAssertions","Assertions_exports","EmbedBuilder","MentionableSelectMenuBuilder","ModalAssertions","Assertions_exports4","ModalBuilder","RoleSelectMenuBuilder","SelectMenuBuilder","StringSelectMenuBuilder","SelectMenuOptionBuilder","StringSelectMenuOptionBuilder","SharedNameAndDescription","SharedSlashCommandOptions","SlashCommandAssertions","Assertions_exports5","SlashCommandAttachmentOption","SlashCommandBooleanOption","SlashCommandBuilder","SlashCommandChannelOption","SlashCommandIntegerOption","SlashCommandMentionableOption","SlashCommandNumberOption","SlashCommandRoleOption","SlashCommandStringOption","SlashCommandSubcommandBuilder","SlashCommandSubcommandGroupBuilder","SlashCommandUserOption","TextInputAssertions","Assertions_exports3","TextInputBuilder","UserSelectMenuBuilder","createComponentBuilder","disableValidators","embedLength","enableValidators","isValidationEnabled","normalizeArray","version","module","exports","__toCommonJS","RGBPredicate","authorNamePredicate","colorPredicate","descriptionPredicate","embedAuthorPredicate","embedFieldPredicate","embedFieldsArrayPredicate","embedFooterPredicate","fieldInlinePredicate","fieldLengthPredicate","fieldNamePredicate","fieldValuePredicate","footerTextPredicate","imageURLPredicate","timestampPredicate","titlePredicate","urlPredicate","validateFieldLength","import_shapeshift","require","validate","__name","s","string","lengthGreaterThanOrEqual","lengthLessThanOrEqual","setValidationEnabled","boolean","optional","object","name","value","inline","array","number","lessThanOrEqual","amountAdding","fields","parse","length","nullable","url","allowedProtocols","nullish","iconURL","int","greaterThanOrEqual","or","tuple","text","union","date","arr","Array","isArray","data","constructor","timestamp","Date","toISOString","addFields","normalizedFields","push","spliceFields","index","deleteCount","splice","setFields","setAuthor","options","author","icon_url","setColor","color","red","green","blue","setDescription","description","setFooter","footer","setImage","image","setThumbnail","thumbnail","setTimestamp","now","setTitle","title","setURL","toJSON","__reExport","buttonLabelValidator","buttonStyleValidator","channelTypesValidator","customIdValidator","defaultValidator","disabledValidator","emojiValidator","jsonOptionValidator","labelValueDescriptionValidator","minMaxValidator","optionValidator","optionsLengthValidator","optionsValidator","placeholderValidator","urlValidator","validateRequiredButtonParameters","validateRequiredSelectMenuOptionParameters","validateRequiredSelectMenuParameters","import_shapeshift2","import_v10","setLabel","label","setValue","setDefault","isDefault","default","setEmoji","emoji","id","animated","partial","strict","nativeEnum","ButtonStyle","instance","customId","ChannelType","style","RangeError","Link","import_v1011","import_v1010","import_v102","type","ComponentType","Button","setStyle","setCustomId","custom_id","setDisabled","disabled","import_v103","setPlaceholder","placeholder","setMinValues","minValues","min_values","setMaxValues","maxValues","max_values","ChannelSelect","addChannelTypes","types","normalizedTypes","channel_types","setChannelTypes","import_v104","MentionableSelect","import_v105","RoleSelect","import_v106","initData","StringSelect","map","option","addOptions","normalizedOptions","normalizedOption","setOptions","spliceOptions","clone","import_v107","UserSelect","import_util","import_v109","import_fast_deep_equal","__toESM","labelValidator","maxLengthValidator","minLengthValidator","placeholderValidator2","requiredValidator","textInputStyleValidator","validateRequiredParameters","valueValidator","import_shapeshift3","import_v108","TextInputStyle","TextInput","setMinLength","minLength","min_length","setMaxLength","maxLength","max_length","setRequired","required","equals","other","isJSONEncodable","ActionRow","Error","components","component","addComponents","setComponents","componentsValidator","titleValidator","validateRequiredParameters2","import_shapeshift4","assertReturnOfBuilder","localizationMapPredicate","validateChoicesLength","validateDMPermission","validateDefaultMemberPermissions","validateDefaultPermission","validateDescription","validateLocale","validateLocalizationMap","validateMaxOptionsLength","validateNSFW","validateName","validateRequired","validateRequiredParameters3","import_shapeshift5","import_v1012","namePredicate","regex","descriptionPredicate2","localePredicate","Locale","maxArrayLengthPredicate","unknown","locale","booleanPredicate","choicesLengthPredicate","choices","input","ExpectedInstanceOf","Object","fromEntries","values","dmPermissionPredicate","memberPermissionPredicate","bigint","transform","toString","safeInt","permissions","import_ts_mixer6","import_v1024","import_ts_mixer5","name_localizations","description_localizations","setName","Reflect","set","setNameLocalization","localizedName","parsedLocale","setNameLocalizations","localizedNames","args","entries","setDescriptionLocalization","localizedDescription","setDescriptionLocalizations","localizedDescriptions","import_v1013","runRequiredValidations","ApplicationCommandOptionType","Attachment","import_v1014","Boolean","import_v1016","import_ts_mixer","import_shapeshift6","import_v1015","allowedChannelTypes","GuildText","GuildVoice","GuildCategory","GuildAnnouncement","AnnouncementThread","PublicThread","PrivateThread","GuildStageVoice","GuildForum","channelTypesPredicate","literal","channelTypes","Channel","__decorateClass","mix","import_shapeshift8","import_v1018","import_ts_mixer2","max_value","min_value","import_shapeshift7","import_v1017","stringPredicate","numberPredicate","greaterThan","Number","NEGATIVE_INFINITY","lessThan","POSITIVE_INFINITY","choicesPredicate","booleanPredicate2","autocomplete","addChoices","String","setChoices","setAutocomplete","numberValidator","Integer","setMaxValue","max","setMinValue","min","import_v1019","Mentionable","import_shapeshift9","import_v1020","import_ts_mixer3","numberValidator2","import_v1021","Role","import_shapeshift10","import_v1022","import_ts_mixer4","minLengthValidator2","maxLengthValidator2","import_v1023","User","addBooleanOption","_sharedAddOptionMethod","addUserOption","addChannelOption","addRoleOption","addAttachmentOption","addMentionableOption","addStringOption","addIntegerOption","addNumberOption","Instance","result","addSubcommand","SubcommandGroup","Subcommand","default_permission","default_member_permissions","dm_permission","nsfw","setDefaultPermission","setDefaultMemberPermissions","permissionValue","setDMPermission","enabled","setNSFW","addSubcommandGroup","validateDMPermission2","validateDefaultMemberPermissions2","validateDefaultPermission2","validateName2","validateRequiredParameters4","validateType","import_shapeshift11","import_v1025","namePredicate2","typePredicate","ApplicationCommandType","Message","booleanPredicate3","dmPermissionPredicate2","memberPermissionPredicate2","setType","reduce","prev","curr"],"sources":["C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\index.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\messages\\embed\\Assertions.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\util\\validation.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\util\\normalizeArray.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\messages\\embed\\Embed.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\Assertions.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\StringSelectMenuOption.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\ActionRow.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\Component.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\Components.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\button\\Button.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\ChannelSelectMenu.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\BaseSelectMenu.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\MentionableSelectMenu.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\RoleSelectMenu.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\StringSelectMenu.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\UserSelectMenu.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\textInput\\TextInput.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\components\\textInput\\Assertions.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\modals\\Assertions.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\modals\\Modal.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\Assertions.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\SlashCommandBuilder.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\SlashCommandSubcommands.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\NameAndDescription.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\attachment.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\ApplicationCommandOptionBase.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\boolean.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\channel.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\ApplicationCommandOptionChannelTypesMixin.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\integer.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\ApplicationCommandNumericOptionMinMaxValueMixin.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\ApplicationCommandOptionWithChoicesAndAutocompleteMixin.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\mentionable.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\number.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\role.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\string.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\user.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\SharedSlashCommandOptions.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\contextMenuCommands\\Assertions.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\interactions\\contextMenuCommands\\ContextMenuCommandBuilder.ts","C:\\Users\\hetit\\node_modules\\@discordjs\\builders\\src\\util\\componentUtil.ts"],"sourcesContent":["export * as EmbedAssertions from './messages/embed/Assertions.js';\nexport * from './messages/embed/Embed.js';\n// TODO: Consider removing this dep in the next major version\nexport * from '@discordjs/formatters';\n\nexport * as ComponentAssertions from './components/Assertions.js';\nexport * from './components/ActionRow.js';\nexport * from './components/button/Button.js';\nexport * from './components/Component.js';\nexport * from './components/Components.js';\nexport * from './components/textInput/TextInput.js';\nexport * as TextInputAssertions from './components/textInput/Assertions.js';\nexport * from './interactions/modals/Modal.js';\nexport * as ModalAssertions from './interactions/modals/Assertions.js';\n\nexport * from './components/selectMenu/BaseSelectMenu.js';\nexport * from './components/selectMenu/ChannelSelectMenu.js';\nexport * from './components/selectMenu/MentionableSelectMenu.js';\nexport * from './components/selectMenu/RoleSelectMenu.js';\nexport * from './components/selectMenu/StringSelectMenu.js';\n// TODO: Remove those aliases in v2\nexport {\n\t/**\n\t * @deprecated Will be removed in the next major version, use {@link StringSelectMenuBuilder} instead.\n\t */\n\tStringSelectMenuBuilder as SelectMenuBuilder,\n} from './components/selectMenu/StringSelectMenu.js';\nexport {\n\t/**\n\t * @deprecated Will be removed in the next major version, use {@link StringSelectMenuOptionBuilder} instead.\n\t */\n\tStringSelectMenuOptionBuilder as SelectMenuOptionBuilder,\n} from './components/selectMenu/StringSelectMenuOption.js';\nexport * from './components/selectMenu/StringSelectMenuOption.js';\nexport * from './components/selectMenu/UserSelectMenu.js';\n\nexport * as SlashCommandAssertions from './interactions/slashCommands/Assertions.js';\nexport * from './interactions/slashCommands/SlashCommandBuilder.js';\nexport * from './interactions/slashCommands/SlashCommandSubcommands.js';\nexport * from './interactions/slashCommands/options/boolean.js';\nexport * from './interactions/slashCommands/options/channel.js';\nexport * from './interactions/slashCommands/options/integer.js';\nexport * from './interactions/slashCommands/options/mentionable.js';\nexport * from './interactions/slashCommands/options/number.js';\nexport * from './interactions/slashCommands/options/role.js';\nexport * from './interactions/slashCommands/options/attachment.js';\nexport * from './interactions/slashCommands/options/string.js';\nexport * from './interactions/slashCommands/options/user.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionBase.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\nexport * from './interactions/slashCommands/mixins/NameAndDescription.js';\nexport * from './interactions/slashCommands/mixins/SharedSlashCommandOptions.js';\n\nexport * as ContextMenuCommandAssertions from './interactions/contextMenuCommands/Assertions.js';\nexport * from './interactions/contextMenuCommands/ContextMenuCommandBuilder.js';\n\nexport * from './util/componentUtil.js';\nexport * from './util/normalizeArray.js';\nexport * from './util/validation.js';\n\n/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/builders#readme | @discordjs/builders} version\n * that you are currently using.\n *\n * @privateRemarks This needs to explicitly be `string` so it is not typed as a \"const string\" that gets injected by esbuild.\n */\nexport const version = '1.6.5' as string;\n","import { s } from '@sapphire/shapeshift';\nimport type { APIEmbedField } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\n\nexport const fieldNamePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(256)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const fieldValuePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(1_024)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const fieldInlinePredicate = s.boolean.optional;\n\nexport const embedFieldPredicate = s\n\t.object({\n\t\tname: fieldNamePredicate,\n\t\tvalue: fieldValuePredicate,\n\t\tinline: fieldInlinePredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const embedFieldsArrayPredicate = embedFieldPredicate.array.setValidationEnabled(isValidationEnabled);\n\nexport const fieldLengthPredicate = s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\n\nexport function validateFieldLength(amountAdding: number, fields?: APIEmbedField[]): void {\n\tfieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);\n}\n\nexport const authorNamePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const imageURLPredicate = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:', 'attachment:'],\n\t})\n\t.nullish.setValidationEnabled(isValidationEnabled);\n\nexport const urlPredicate = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:'],\n\t})\n\t.nullish.setValidationEnabled(isValidationEnabled);\n\nexport const embedAuthorPredicate = s\n\t.object({\n\t\tname: authorNamePredicate,\n\t\ticonURL: imageURLPredicate,\n\t\turl: urlPredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const RGBPredicate = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(255)\n\t.setValidationEnabled(isValidationEnabled);\nexport const colorPredicate = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(0xffffff)\n\t.or(s.tuple([RGBPredicate, RGBPredicate, RGBPredicate]))\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const descriptionPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(4_096)\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const footerTextPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(2_048)\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const embedFooterPredicate = s\n\t.object({\n\t\ttext: footerTextPredicate,\n\t\ticonURL: imageURLPredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const timestampPredicate = s.union(s.number, s.date).nullable.setValidationEnabled(isValidationEnabled);\n\nexport const titlePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\n","let validate = true;\n\n/**\n * Enables validators.\n *\n * @returns Whether validation is occurring.\n */\nexport function enableValidators() {\n\treturn (validate = true);\n}\n\n/**\n * Disables validators.\n *\n * @returns Whether validation is occurring.\n */\nexport function disableValidators() {\n\treturn (validate = false);\n}\n\n/**\n * Checks whether validation is occurring.\n */\nexport function isValidationEnabled() {\n\treturn validate;\n}\n","/**\n * Normalizes data that is a rest parameter or an array into an array with a depth of 1.\n *\n * @typeParam T - The data that must satisfy {@link RestOrArray}.\n * @param arr - The (possibly variadic) data to normalize\n */\nexport function normalizeArray<T>(arr: RestOrArray<T>): T[] {\n\tif (Array.isArray(arr[0])) return arr[0];\n\treturn arr as T[];\n}\n\n/**\n * Represents data that may be an array or came from a rest parameter.\n *\n * @remarks\n * This type is used throughout builders to ensure both an array and variadic arguments\n * may be used. It is normalized with {@link normalizeArray}.\n */\nexport type RestOrArray<T> = T[] | [T[]];\n","import type { APIEmbed, APIEmbedAuthor, APIEmbedField, APIEmbedFooter, APIEmbedImage } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport {\n\tcolorPredicate,\n\tdescriptionPredicate,\n\tembedAuthorPredicate,\n\tembedFieldsArrayPredicate,\n\tembedFooterPredicate,\n\timageURLPredicate,\n\ttimestampPredicate,\n\ttitlePredicate,\n\turlPredicate,\n\tvalidateFieldLength,\n} from './Assertions.js';\n\n/**\n * A tuple satisfying the RGB color model.\n *\n * @see {@link https://developer.mozilla.org/docs/Glossary/RGB}\n */\nexport type RGBTuple = [red: number, green: number, blue: number];\n\n/**\n * The base icon data typically used in payloads.\n */\nexport interface IconData {\n\t/**\n\t * The URL of the icon.\n\t */\n\ticonURL?: string;\n\t/**\n\t * The proxy URL of the icon.\n\t */\n\tproxyIconURL?: string;\n}\n\n/**\n * Represents the author data of an embed.\n */\nexport type EmbedAuthorData = IconData & Omit<APIEmbedAuthor, 'icon_url' | 'proxy_icon_url'>;\n\n/**\n * Represents the author options of an embed.\n */\nexport type EmbedAuthorOptions = Omit<EmbedAuthorData, 'proxyIconURL'>;\n\n/**\n * Represents the footer data of an embed.\n */\nexport type EmbedFooterData = IconData & Omit<APIEmbedFooter, 'icon_url' | 'proxy_icon_url'>;\n\n/**\n * Represents the footer options of an embed.\n */\nexport type EmbedFooterOptions = Omit<EmbedFooterData, 'proxyIconURL'>;\n\n/**\n * Represents the image data of an embed.\n */\nexport interface EmbedImageData extends Omit<APIEmbedImage, 'proxy_url'> {\n\t/**\n\t * The proxy URL for the image.\n\t */\n\tproxyURL?: string;\n}\n\n/**\n * A builder that creates API-compatible JSON data for embeds.\n */\nexport class EmbedBuilder {\n\t/**\n\t * The API data associated with this embed.\n\t */\n\tpublic readonly data: APIEmbed;\n\n\t/**\n\t * Creates a new embed from API data.\n\t *\n\t * @param data - The API data to create this embed with\n\t */\n\tpublic constructor(data: APIEmbed = {}) {\n\t\tthis.data = { ...data };\n\t\tif (data.timestamp) this.data.timestamp = new Date(data.timestamp).toISOString();\n\t}\n\n\t/**\n\t * Appends fields to the embed.\n\t *\n\t * @remarks\n\t * This method accepts either an array of fields or a variable number of field parameters.\n\t * The maximum amount of fields that can be added is 25.\n\t * @example\n\t * Using an array:\n\t * ```ts\n\t * const fields: APIEmbedField[] = ...;\n\t * const embed = new EmbedBuilder()\n\t * \t.addFields(fields);\n\t * ```\n\t * @example\n\t * Using rest parameters (variadic):\n\t * ```ts\n\t * const embed = new EmbedBuilder()\n\t * \t.addFields(\n\t * \t\t{ name: 'Field 1', value: 'Value 1' },\n\t * \t\t{ name: 'Field 2', value: 'Value 2' },\n\t * \t);\n\t * ```\n\t * @param fields - The fields to add\n\t */\n\tpublic addFields(...fields: RestOrArray<APIEmbedField>): this {\n\t\tconst normalizedFields = normalizeArray(fields);\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(normalizedFields.length, this.data.fields);\n\n\t\t// Data assertions\n\t\tembedFieldsArrayPredicate.parse(normalizedFields);\n\n\t\tif (this.data.fields) this.data.fields.push(...normalizedFields);\n\t\telse this.data.fields = normalizedFields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts fields for this embed.\n\t *\n\t * @remarks\n\t * This method behaves similarly\n\t * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice | Array.prototype.splice()}.\n\t * The maximum amount of fields that can be added is 25.\n\t *\n\t * It's useful for modifying and adjusting order of the already-existing fields of an embed.\n\t * @example\n\t * Remove the first field:\n\t * ```ts\n\t * embed.spliceFields(0, 1);\n\t * ```\n\t * @example\n\t * Remove the first n fields:\n\t * ```ts\n\t * const n = 4;\n\t * embed.spliceFields(0, n);\n\t * ```\n\t * @example\n\t * Remove the last field:\n\t * ```ts\n\t * embed.spliceFields(-1, 1);\n\t * ```\n\t * @param index - The index to start at\n\t * @param deleteCount - The number of fields to remove\n\t * @param fields - The replacing field objects\n\t */\n\tpublic spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this {\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(fields.length - deleteCount, this.data.fields);\n\n\t\t// Data assertions\n\t\tembedFieldsArrayPredicate.parse(fields);\n\t\tif (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the fields for this embed.\n\t *\n\t * @remarks\n\t * This method is an alias for {@link EmbedBuilder.spliceFields}. More specifically,\n\t * it splices the entire array of fields, replacing them with the provided fields.\n\t *\n\t * You can set a maximum of 25 fields.\n\t * @param fields - The fields to set\n\t */\n\tpublic setFields(...fields: RestOrArray<APIEmbedField>) {\n\t\tthis.spliceFields(0, this.data.fields?.length ?? 0, ...normalizeArray(fields));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the author of this embed.\n\t *\n\t * @param options - The options to use\n\t */\n\n\tpublic setAuthor(options: EmbedAuthorOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.data.author = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\t// Data assertions\n\t\tembedAuthorPredicate.parse(options);\n\n\t\tthis.data.author = { name: options.name, url: options.url, icon_url: options.iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the color of this embed.\n\t *\n\t * @param color - The color to use\n\t */\n\tpublic setColor(color: RGBTuple | number | null): this {\n\t\t// Data assertions\n\t\tcolorPredicate.parse(color);\n\n\t\tif (Array.isArray(color)) {\n\t\t\tconst [red, green, blue] = color;\n\t\t\tthis.data.color = (red << 16) + (green << 8) + blue;\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.data.color = color ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this embed.\n\t *\n\t * @param description - The description to use\n\t */\n\tpublic setDescription(description: string | null): this {\n\t\t// Data assertions\n\t\tdescriptionPredicate.parse(description);\n\n\t\tthis.data.description = description ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the footer of this embed.\n\t *\n\t * @param options - The footer to use\n\t */\n\tpublic setFooter(options: EmbedFooterOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.data.footer = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\t// Data assertions\n\t\tembedFooterPredicate.parse(options);\n\n\t\tthis.data.footer = { text: options.text, icon_url: options.iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the image of this embed.\n\t *\n\t * @param url - The image URL to use\n\t */\n\tpublic setImage(url: string | null): this {\n\t\t// Data assertions\n\t\timageURLPredicate.parse(url);\n\n\t\tthis.data.image = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the thumbnail of this embed.\n\t *\n\t * @param url - The thumbnail URL to use\n\t */\n\tpublic setThumbnail(url: string | null): this {\n\t\t// Data assertions\n\t\timageURLPredicate.parse(url);\n\n\t\tthis.data.thumbnail = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the timestamp of this embed.\n\t *\n\t * @param timestamp - The timestamp or date to use\n\t */\n\tpublic setTimestamp(timestamp: Date | number | null = Date.now()): this {\n\t\t// Data assertions\n\t\ttimestampPredicate.parse(timestamp);\n\n\t\tthis.data.timestamp = timestamp ? new Date(timestamp).toISOString() : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the title for this embed.\n\t *\n\t * @param title - The title to use\n\t */\n\tpublic setTitle(title: string | null): this {\n\t\t// Data assertions\n\t\ttitlePredicate.parse(title);\n\n\t\tthis.data.title = title ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL of this embed.\n\t *\n\t * @param url - The URL to use\n\t */\n\tpublic setURL(url: string | null): this {\n\t\t// Data assertions\n\t\turlPredicate.parse(url);\n\n\t\tthis.data.url = url ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Serializes this builder to API-compatible JSON data.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): APIEmbed {\n\t\treturn { ...this.data };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ButtonStyle, ChannelType, type APIMessageComponentEmoji } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../util/validation.js';\nimport { StringSelectMenuOptionBuilder } from './selectMenu/StringSelectMenuOption.js';\n\nexport const customIdValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const emojiValidator = s\n\t.object({\n\t\tid: s.string,\n\t\tname: s.string,\n\t\tanimated: s.boolean,\n\t})\n\t.partial.strict.setValidationEnabled(isValidationEnabled);\n\nexport const disabledValidator = s.boolean;\n\nexport const buttonLabelValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(80)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const buttonStyleValidator = s.nativeEnum(ButtonStyle);\n\nexport const placeholderValidator = s.string.lengthLessThanOrEqual(150).setValidationEnabled(isValidationEnabled);\nexport const minMaxValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(25)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const labelValueDescriptionValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const jsonOptionValidator = s\n\t.object({\n\t\tlabel: labelValueDescriptionValidator,\n\t\tvalue: labelValueDescriptionValidator,\n\t\tdescription: labelValueDescriptionValidator.optional,\n\t\temoji: emojiValidator.optional,\n\t\tdefault: s.boolean.optional,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const optionValidator = s.instance(StringSelectMenuOptionBuilder).setValidationEnabled(isValidationEnabled);\n\nexport const optionsValidator = optionValidator.array\n\t.lengthGreaterThanOrEqual(0)\n\t.setValidationEnabled(isValidationEnabled);\nexport const optionsLengthValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(25)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredSelectMenuParameters(options: StringSelectMenuOptionBuilder[], customId?: string) {\n\tcustomIdValidator.parse(customId);\n\toptionsValidator.parse(options);\n}\n\nexport const defaultValidator = s.boolean;\n\nexport function validateRequiredSelectMenuOptionParameters(label?: string, value?: string) {\n\tlabelValueDescriptionValidator.parse(label);\n\tlabelValueDescriptionValidator.parse(value);\n}\n\nexport const channelTypesValidator = s.nativeEnum(ChannelType).array.setValidationEnabled(isValidationEnabled);\n\nexport const urlValidator = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:', 'discord:'],\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredButtonParameters(\n\tstyle?: ButtonStyle,\n\tlabel?: string,\n\temoji?: APIMessageComponentEmoji,\n\tcustomId?: string,\n\turl?: string,\n) {\n\tif (url && customId) {\n\t\tthrow new RangeError('URL and custom id are mutually exclusive');\n\t}\n\n\tif (!label && !emoji) {\n\t\tthrow new RangeError('Buttons must have a label and/or an emoji');\n\t}\n\n\tif (style === ButtonStyle.Link) {\n\t\tif (!url) {\n\t\t\tthrow new RangeError('Link buttons must have a url');\n\t\t}\n\t} else if (url) {\n\t\tthrow new RangeError('Non-link buttons cannot have a url');\n\t}\n}\n","import type { JSONEncodable } from '@discordjs/util';\nimport type { APIMessageComponentEmoji, APISelectMenuOption } from 'discord-api-types/v10';\nimport {\n\tdefaultValidator,\n\temojiValidator,\n\tlabelValueDescriptionValidator,\n\tvalidateRequiredSelectMenuOptionParameters,\n} from '../Assertions.js';\n\n/**\n * A builder that creates API-compatible JSON data for string select menu options.\n */\nexport class StringSelectMenuOptionBuilder implements JSONEncodable<APISelectMenuOption> {\n\t/**\n\t * Creates a new string select menu option from API data.\n\t *\n\t * @param data - The API data to create this string select menu option with\n\t * @example\n\t * Creating a string select menu option from an API data object:\n\t * ```ts\n\t * const selectMenuOption = new SelectMenuOptionBuilder({\n\t * \tlabel: 'catchy label',\n\t * \tvalue: '1',\n\t * });\n\t * ```\n\t * @example\n\t * Creating a string select menu option using setters and API data:\n\t * ```ts\n\t * const selectMenuOption = new SelectMenuOptionBuilder({\n\t * \tdefault: true,\n\t * \tvalue: '1',\n\t * })\n\t * \t.setLabel('woah');\n\t * ```\n\t */\n\tpublic constructor(public data: Partial<APISelectMenuOption> = {}) {}\n\n\t/**\n\t * Sets the label for this option.\n\t *\n\t * @param label - The label to use\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = labelValueDescriptionValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for this option.\n\t *\n\t * @param value - The value to use\n\t */\n\tpublic setValue(value: string) {\n\t\tthis.data.value = labelValueDescriptionValidator.parse(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description for this option.\n\t *\n\t * @param description - The description to use\n\t */\n\tpublic setDescription(description: string) {\n\t\tthis.data.description = labelValueDescriptionValidator.parse(description);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this option is selected by default.\n\t *\n\t * @param isDefault - Whether this option is selected by default\n\t */\n\tpublic setDefault(isDefault = true) {\n\t\tthis.data.default = defaultValidator.parse(isDefault);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emoji to display for this option.\n\t *\n\t * @param emoji - The emoji to use\n\t */\n\tpublic setEmoji(emoji: APIMessageComponentEmoji) {\n\t\tthis.data.emoji = emojiValidator.parse(emoji);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n\t */\n\tpublic toJSON(): APISelectMenuOption {\n\t\tvalidateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APISelectMenuOption;\n\t}\n}\n","/* eslint-disable jsdoc/check-param-names */\n\nimport {\n\ttype APIActionRowComponent,\n\tComponentType,\n\ttype APIMessageActionRowComponent,\n\ttype APIModalActionRowComponent,\n\ttype APIActionRowComponentTypes,\n} from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../util/normalizeArray.js';\nimport { ComponentBuilder } from './Component.js';\nimport { createComponentBuilder } from './Components.js';\nimport type { ButtonBuilder } from './button/Button.js';\nimport type { ChannelSelectMenuBuilder } from './selectMenu/ChannelSelectMenu.js';\nimport type { MentionableSelectMenuBuilder } from './selectMenu/MentionableSelectMenu.js';\nimport type { RoleSelectMenuBuilder } from './selectMenu/RoleSelectMenu.js';\nimport type { StringSelectMenuBuilder } from './selectMenu/StringSelectMenu.js';\nimport type { UserSelectMenuBuilder } from './selectMenu/UserSelectMenu.js';\nimport type { TextInputBuilder } from './textInput/TextInput.js';\n\n/**\n * The builders that may be used for messages.\n */\nexport type MessageComponentBuilder =\n\t| ActionRowBuilder<MessageActionRowComponentBuilder>\n\t| MessageActionRowComponentBuilder;\n\n/**\n * The builders that may be used for modals.\n */\nexport type ModalComponentBuilder = ActionRowBuilder<ModalActionRowComponentBuilder> | ModalActionRowComponentBuilder;\n\n/**\n * The builders that may be used within an action row for messages.\n */\nexport type MessageActionRowComponentBuilder =\n\t| ButtonBuilder\n\t| ChannelSelectMenuBuilder\n\t| MentionableSelectMenuBuilder\n\t| RoleSelectMenuBuilder\n\t| StringSelectMenuBuilder\n\t| UserSelectMenuBuilder;\n\n/**\n * The builders that may be used within an action row for modals.\n */\nexport type ModalActionRowComponentBuilder = TextInputBuilder;\n\n/**\n * Any builder.\n */\nexport type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;\n\n/**\n * A builder that creates API-compatible JSON data for action rows.\n *\n * @typeParam T - The types of components this action row holds\n */\nexport class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<\n\tAPIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>\n> {\n\t/**\n\t * The components within this action row.\n\t */\n\tpublic readonly components: T[];\n\n\t/**\n\t * Creates a new action row from API data.\n\t *\n\t * @param data - The API data to create this action row with\n\t * @example\n\t * Creating an action row from an API data object:\n\t * ```ts\n\t * const actionRow = new ActionRowBuilder({\n\t * \tcomponents: [\n\t * \t\t{\n\t * \t\t\tcustom_id: \"custom id\",\n\t * \t\t\tlabel: \"Type something\",\n\t * \t\t\tstyle: TextInputStyle.Short,\n\t * \t\t\ttype: ComponentType.TextInput,\n\t * \t\t},\n\t * \t],\n\t * });\n\t * ```\n\t * @example\n\t * Creating an action row using setters and API data:\n\t * ```ts\n\t * const actionRow = new ActionRowBuilder({\n\t * \tcomponents: [\n\t * \t\t{\n\t * \t\t\tcustom_id: \"custom id\",\n\t * \t\t\tlabel: \"Click me\",\n\t * \t\t\tstyle: ButtonStyle.Primary,\n\t * \t\t\ttype: ComponentType.Button,\n\t * \t\t},\n\t * \t],\n\t * })\n\t * \t.addComponents(button2, button3);\n\t * ```\n\t */\n\tpublic constructor({ components, ...data }: Partial<APIActionRowComponent<APIActionRowComponentTypes>> = {}) {\n\t\tsuper({ type: ComponentType.ActionRow, ...data });\n\t\tthis.components = (components?.map((component) => createComponentBuilder(component)) ?? []) as T[];\n\t}\n\n\t/**\n\t * Adds components to this action row.\n\t *\n\t * @param components - The components to add\n\t */\n\tpublic addComponents(...components: RestOrArray<T>) {\n\t\tthis.components.push(...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets components for this action row.\n\t *\n\t * @param components - The components to set\n\t */\n\tpublic setComponents(...components: RestOrArray<T>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>> {\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIActionRowComponent<ReturnType<T['toJSON']>>;\n\t}\n}\n","import type { JSONEncodable } from '@discordjs/util';\nimport type {\n\tAPIActionRowComponent,\n\tAPIActionRowComponentTypes,\n\tAPIBaseComponent,\n\tComponentType,\n} from 'discord-api-types/v10';\n\n/**\n * Any action row component data represented as an object.\n */\nexport type AnyAPIActionRowComponent = APIActionRowComponent<APIActionRowComponentTypes> | APIActionRowComponentTypes;\n\n/**\n * The base component builder that contains common symbols for all sorts of components.\n *\n * @typeParam DataType - The type of internal API data that is stored within the component\n */\nexport abstract class ComponentBuilder<\n\tDataType extends Partial<APIBaseComponent<ComponentType>> = APIBaseComponent<ComponentType>,\n> implements JSONEncodable<AnyAPIActionRowComponent>\n{\n\t/**\n\t * The API data associated with this component.\n\t */\n\tpublic readonly data: Partial<DataType>;\n\n\t/**\n\t * Serializes this builder to API-compatible JSON data.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic abstract toJSON(): AnyAPIActionRowComponent;\n\n\t/**\n\t * Constructs a new kind of component.\n\t *\n\t * @param data - The data to construct a component out of\n\t */\n\tpublic constructor(data: Partial<DataType>) {\n\t\tthis.data = data;\n\t}\n}\n","import { ComponentType, type APIMessageComponent, type APIModalComponent } from 'discord-api-types/v10';\nimport {\n\tActionRowBuilder,\n\ttype AnyComponentBuilder,\n\ttype MessageComponentBuilder,\n\ttype ModalComponentBuilder,\n} from './ActionRow.js';\nimport { ComponentBuilder } from './Component.js';\nimport { ButtonBuilder } from './button/Button.js';\nimport { ChannelSelectMenuBuilder } from './selectMenu/ChannelSelectMenu.js';\nimport { MentionableSelectMenuBuilder } from './selectMenu/MentionableSelectMenu.js';\nimport { RoleSelectMenuBuilder } from './selectMenu/RoleSelectMenu.js';\nimport { StringSelectMenuBuilder } from './selectMenu/StringSelectMenu.js';\nimport { UserSelectMenuBuilder } from './selectMenu/UserSelectMenu.js';\nimport { TextInputBuilder } from './textInput/TextInput.js';\n\n/**\n * Components here are mapped to their respective builder.\n */\nexport interface MappedComponentTypes {\n\t/**\n\t * The action row component type is associated with an {@link ActionRowBuilder}.\n\t */\n\t[ComponentType.ActionRow]: ActionRowBuilder<AnyComponentBuilder>;\n\t/**\n\t * The button component type is associated with an {@link ButtonBuilder}.\n\t */\n\t[ComponentType.Button]: ButtonBuilder;\n\t/**\n\t * The string select component type is associated with an {@link StringSelectMenuBuilder}.\n\t */\n\t[ComponentType.StringSelect]: StringSelectMenuBuilder;\n\t/**\n\t * The text inpiut component type is associated with an {@link TextInputBuilder}.\n\t */\n\t[ComponentType.TextInput]: TextInputBuilder;\n\t/**\n\t * The user select component type is associated with an {@link UserSelectMenuBuilder}.\n\t */\n\t[ComponentType.UserSelect]: UserSelectMenuBuilder;\n\t/**\n\t * The role select component type is associated with an {@link RoleSelectMenuBuilder}.\n\t */\n\t[ComponentType.RoleSelect]: RoleSelectMenuBuilder;\n\t/**\n\t * The mentionable select component type is associated with an {@link MentionableSelectMenuBuilder}.\n\t */\n\t[ComponentType.MentionableSelect]: MentionableSelectMenuBuilder;\n\t/**\n\t * The channel select component type is associated with an {@link ChannelSelectMenuBuilder}.\n\t */\n\t[ComponentType.ChannelSelect]: ChannelSelectMenuBuilder;\n}\n\n/**\n * Factory for creating components from API data.\n *\n * @typeParam T - The type of component to use\n * @param data - The API data to transform to a component class\n */\nexport function createComponentBuilder<T extends keyof MappedComponentTypes>(\n\t// eslint-disable-next-line @typescript-eslint/sort-type-union-intersection-members\n\tdata: (APIModalComponent | APIMessageComponent) & { type: T },\n): MappedComponentTypes[T];\n\n/**\n * Factory for creating components from API data.\n *\n * @typeParam C - The type of component to use\n * @param data - The API data to transform to a component class\n */\nexport function createComponentBuilder<C extends MessageComponentBuilder | ModalComponentBuilder>(data: C): C;\n\nexport function createComponentBuilder(\n\tdata: APIMessageComponent | APIModalComponent | MessageComponentBuilder,\n): ComponentBuilder {\n\tif (data instanceof ComponentBuilder) {\n\t\treturn data;\n\t}\n\n\tswitch (data.type) {\n\t\tcase ComponentType.ActionRow:\n\t\t\treturn new ActionRowBuilder(data);\n\t\tcase ComponentType.Button:\n\t\t\treturn new ButtonBuilder(data);\n\t\tcase ComponentType.StringSelect:\n\t\t\treturn new StringSelectMenuBuilder(data);\n\t\tcase ComponentType.TextInput:\n\t\t\treturn new TextInputBuilder(data);\n\t\tcase ComponentType.UserSelect:\n\t\t\treturn new UserSelectMenuBuilder(data);\n\t\tcase ComponentType.RoleSelect:\n\t\t\treturn new RoleSelectMenuBuilder(data);\n\t\tcase ComponentType.MentionableSelect:\n\t\t\treturn new MentionableSelectMenuBuilder(data);\n\t\tcase ComponentType.ChannelSelect:\n\t\t\treturn new ChannelSelectMenuBuilder(data);\n\t\tdefault:\n\t\t\t// @ts-expect-error This case can still occur if we get a newer unsupported component type\n\t\t\tthrow new Error(`Cannot properly serialize component type: ${data.type}`);\n\t}\n}\n","import {\n\tComponentType,\n\ttype APIMessageComponentEmoji,\n\ttype APIButtonComponent,\n\ttype APIButtonComponentWithURL,\n\ttype APIButtonComponentWithCustomId,\n\ttype ButtonStyle,\n} from 'discord-api-types/v10';\nimport {\n\tbuttonLabelValidator,\n\tbuttonStyleValidator,\n\tcustomIdValidator,\n\tdisabledValidator,\n\temojiValidator,\n\turlValidator,\n\tvalidateRequiredButtonParameters,\n} from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\n\n/**\n * A builder that creates API-compatible JSON data for buttons.\n */\nexport class ButtonBuilder extends ComponentBuilder<APIButtonComponent> {\n\t/**\n\t * Creates a new button from API data.\n\t *\n\t * @param data - The API data to create this button with\n\t * @example\n\t * Creating a button from an API data object:\n\t * ```ts\n\t * const button = new ButtonBuilder({\n\t * \tcustom_id: 'a cool button',\n\t * \tstyle: ButtonStyle.Primary,\n\t * \tlabel: 'Click Me',\n\t * \temoji: {\n\t * \t\tname: 'smile',\n\t * \t\tid: '123456789012345678',\n\t * \t},\n\t * });\n\t * ```\n\t * @example\n\t * Creating a button using setters and API data:\n\t * ```ts\n\t * const button = new ButtonBuilder({\n\t * \tstyle: ButtonStyle.Secondary,\n\t * \tlabel: 'Click Me',\n\t * })\n\t * \t.setEmoji({ name: '🙂' })\n\t * \t.setCustomId('another cool button');\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIButtonComponent>) {\n\t\tsuper({ type: ComponentType.Button, ...data });\n\t}\n\n\t/**\n\t * Sets the style of this button.\n\t *\n\t * @param style - The style to use\n\t */\n\tpublic setStyle(style: ButtonStyle) {\n\t\tthis.data.style = buttonStyleValidator.parse(style);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL for this button.\n\t *\n\t * @remarks\n\t * This method is only available to buttons using the `Link` button style.\n\t * Only three types of URL schemes are currently supported: `https://`, `http://`, and `discord://`.\n\t * @param url - The URL to use\n\t */\n\tpublic setURL(url: string) {\n\t\t(this.data as APIButtonComponentWithURL).url = urlValidator.parse(url);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id for this button.\n\t *\n\t * @remarks\n\t * This method is only applicable to buttons that are not using the `Link` button style.\n\t * @param customId - The custom id to use\n\t */\n\tpublic setCustomId(customId: string) {\n\t\t(this.data as APIButtonComponentWithCustomId).custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emoji to display on this button.\n\t *\n\t * @param emoji - The emoji to use\n\t */\n\tpublic setEmoji(emoji: APIMessageComponentEmoji) {\n\t\tthis.data.emoji = emojiValidator.parse(emoji);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this button is disabled.\n\t *\n\t * @param disabled - Whether to disable this button\n\t */\n\tpublic setDisabled(disabled = true) {\n\t\tthis.data.disabled = disabledValidator.parse(disabled);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the label for this button.\n\t *\n\t * @param label - The label to use\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = buttonLabelValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIButtonComponent {\n\t\tvalidateRequiredButtonParameters(\n\t\t\tthis.data.style,\n\t\t\tthis.data.label,\n\t\t\tthis.data.emoji,\n\t\t\t(this.data as APIButtonComponentWithCustomId).custom_id,\n\t\t\t(this.data as APIButtonComponentWithURL).url,\n\t\t);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APIButtonComponent;\n\t}\n}\n","import type { APIChannelSelectComponent, ChannelType } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { channelTypesValidator, customIdValidator } from '../Assertions.js';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\n/**\n * A builder that creates API-compatible JSON data for channel select menus.\n */\nexport class ChannelSelectMenuBuilder extends BaseSelectMenuBuilder<APIChannelSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data.\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object:\n\t * ```ts\n\t * const selectMenu = new ChannelSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data:\n\t * ```ts\n\t * const selectMenu = new ChannelSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)\n\t * \t.setMinValues(2);\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIChannelSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.ChannelSelect });\n\t}\n\n\t/**\n\t * Adds channel types to this select menu.\n\t *\n\t * @param types - The channel types to use\n\t */\n\tpublic addChannelTypes(...types: RestOrArray<ChannelType>) {\n\t\tconst normalizedTypes = normalizeArray(types);\n\t\tthis.data.channel_types ??= [];\n\t\tthis.data.channel_types.push(...channelTypesValidator.parse(normalizedTypes));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets channel types for this select menu.\n\t *\n\t * @param types - The channel types to use\n\t */\n\tpublic setChannelTypes(...types: RestOrArray<ChannelType>) {\n\t\tconst normalizedTypes = normalizeArray(types);\n\t\tthis.data.channel_types ??= [];\n\t\tthis.data.channel_types.splice(0, this.data.channel_types.length, ...channelTypesValidator.parse(normalizedTypes));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n\t */\n\tpublic override toJSON(): APIChannelSelectComponent {\n\t\tcustomIdValidator.parse(this.data.custom_id);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APIChannelSelectComponent;\n\t}\n}\n","import type { APISelectMenuComponent } from 'discord-api-types/v10';\nimport { customIdValidator, disabledValidator, minMaxValidator, placeholderValidator } from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\n\n/**\n * The base select menu builder that contains common symbols for select menu builders.\n *\n * @typeParam SelectMenuType - The type of select menu this would be instantiated for.\n */\nexport abstract class BaseSelectMenuBuilder<\n\tSelectMenuType extends APISelectMenuComponent,\n> extends ComponentBuilder<SelectMenuType> {\n\t/**\n\t * Sets the placeholder for this select menu.\n\t *\n\t * @param placeholder - The placeholder to use\n\t */\n\tpublic setPlaceholder(placeholder: string) {\n\t\tthis.data.placeholder = placeholderValidator.parse(placeholder);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum values that must be selected in the select menu.\n\t *\n\t * @param minValues - The minimum values that must be selected\n\t */\n\tpublic setMinValues(minValues: number) {\n\t\tthis.data.min_values = minMaxValidator.parse(minValues);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum values that must be selected in the select menu.\n\t *\n\t * @param maxValues - The maximum values that must be selected\n\t */\n\tpublic setMaxValues(maxValues: number) {\n\t\tthis.data.max_values = minMaxValidator.parse(maxValues);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id for this select menu.\n\t *\n\t * @param customId - The custom id to use\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this select menu is disabled.\n\t *\n\t * @param disabled - Whether this select menu is disabled\n\t */\n\tpublic setDisabled(disabled = true) {\n\t\tthis.data.disabled = disabledValidator.parse(disabled);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): SelectMenuType {\n\t\tcustomIdValidator.parse(this.data.custom_id);\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as SelectMenuType;\n\t}\n}\n","import type { APIMentionableSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\n/**\n * A builder that creates API-compatible JSON data for mentionable select menus.\n */\nexport class MentionableSelectMenuBuilder extends BaseSelectMenuBuilder<APIMentionableSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data.\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object:\n\t * ```ts\n\t * const selectMenu = new MentionableSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data:\n\t * ```ts\n\t * const selectMenu = new MentionableSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1);\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIMentionableSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.MentionableSelect });\n\t}\n}\n","import type { APIRoleSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\n/**\n * A builder that creates API-compatible JSON data for role select menus.\n */\nexport class RoleSelectMenuBuilder extends BaseSelectMenuBuilder<APIRoleSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data.\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object:\n\t * ```ts\n\t * const selectMenu = new RoleSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data:\n\t * ```ts\n\t * const selectMenu = new RoleSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1);\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIRoleSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.RoleSelect });\n\t}\n}\n","import { ComponentType } from 'discord-api-types/v10';\nimport type { APIStringSelectComponent, APISelectMenuOption } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { jsonOptionValidator, optionsLengthValidator, validateRequiredSelectMenuParameters } from '../Assertions.js';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\nimport { StringSelectMenuOptionBuilder } from './StringSelectMenuOption.js';\n\n/**\n * A builder that creates API-compatible JSON data for string select menus.\n */\nexport class StringSelectMenuBuilder extends BaseSelectMenuBuilder<APIStringSelectComponent> {\n\t/**\n\t * The options within this select menu.\n\t */\n\tpublic readonly options: StringSelectMenuOptionBuilder[];\n\n\t/**\n\t * Creates a new select menu from API data.\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object:\n\t * ```ts\n\t * const selectMenu = new StringSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * \toptions: [\n\t * \t\t{ label: 'option 1', value: '1' },\n\t * \t\t{ label: 'option 2', value: '2' },\n\t * \t\t{ label: 'option 3', value: '3' },\n\t * \t],\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data:\n\t * ```ts\n\t * const selectMenu = new StringSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * \t.addOptions({\n\t * \t\tlabel: 'Catchy',\n\t * \t\tvalue: 'catch',\n\t * \t});\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIStringSelectComponent>) {\n\t\tconst { options, ...initData } = data ?? {};\n\t\tsuper({ ...initData, type: ComponentType.StringSelect });\n\t\tthis.options = options?.map((option: APISelectMenuOption) => new StringSelectMenuOptionBuilder(option)) ?? [];\n\t}\n\n\t/**\n\t * Adds options to this select menu.\n\t *\n\t * @param options - The options to add\n\t */\n\tpublic addOptions(...options: RestOrArray<APISelectMenuOption | StringSelectMenuOptionBuilder>) {\n\t\tconst normalizedOptions = normalizeArray(options);\n\t\toptionsLengthValidator.parse(this.options.length + normalizedOptions.length);\n\t\tthis.options.push(\n\t\t\t...normalizedOptions.map((normalizedOption) =>\n\t\t\t\tnormalizedOption instanceof StringSelectMenuOptionBuilder\n\t\t\t\t\t? normalizedOption\n\t\t\t\t\t: new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption)),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the options for this select menu.\n\t *\n\t * @param options - The options to set\n\t */\n\tpublic setOptions(...options: RestOrArray<APISelectMenuOption | StringSelectMenuOptionBuilder>) {\n\t\treturn this.spliceOptions(0, this.options.length, ...options);\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts options for this select menu.\n\t *\n\t * @remarks\n\t * This method behaves similarly\n\t * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice()}.\n\t * It's useful for modifying and adjusting the order of existing options.\n\t * @example\n\t * Remove the first option:\n\t * ```ts\n\t * selectMenu.spliceOptions(0, 1);\n\t * ```\n\t * @example\n\t * Remove the first n option:\n\t * ```ts\n\t * const n = 4;\n\t * selectMenu.spliceOptions(0, n);\n\t * ```\n\t * @example\n\t * Remove the last option:\n\t * ```ts\n\t * selectMenu.spliceOptions(-1, 1);\n\t * ```\n\t * @param index - The index to start at\n\t * @param deleteCount - The number of options to remove\n\t * @param options - The replacing option objects or builders\n\t */\n\tpublic spliceOptions(\n\t\tindex: number,\n\t\tdeleteCount: number,\n\t\t...options: RestOrArray<APISelectMenuOption | StringSelectMenuOptionBuilder>\n\t) {\n\t\tconst normalizedOptions = normalizeArray(options);\n\n\t\tconst clone = [...this.options];\n\n\t\tclone.splice(\n\t\t\tindex,\n\t\t\tdeleteCount,\n\t\t\t...normalizedOptions.map((normalizedOption) =>\n\t\t\t\tnormalizedOption instanceof StringSelectMenuOptionBuilder\n\t\t\t\t\t? normalizedOption\n\t\t\t\t\t: new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption)),\n\t\t\t),\n\t\t);\n\n\t\toptionsLengthValidator.parse(clone.length);\n\t\tthis.options.splice(0, this.options.length, ...clone);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n\t */\n\tpublic override toJSON(): APIStringSelectComponent {\n\t\tvalidateRequiredSelectMenuParameters(this.options, this.data.custom_id);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t} as APIStringSelectComponent;\n\t}\n}\n","import type { APIUserSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\n/**\n * A builder that creates API-compatible JSON data for user select menus.\n */\nexport class UserSelectMenuBuilder extends BaseSelectMenuBuilder<APIUserSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data.\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object:\n\t * ```ts\n\t * const selectMenu = new UserSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data:\n\t * ```ts\n\t * const selectMenu = new UserSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1);\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIUserSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.UserSelect });\n\t}\n}\n","import { isJSONEncodable, type Equatable, type JSONEncodable } from '@discordjs/util';\nimport { ComponentType, type TextInputStyle, type APITextInputComponent } from 'discord-api-types/v10';\nimport isEqual from 'fast-deep-equal';\nimport { customIdValidator } from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\nimport {\n\tmaxLengthValidator,\n\tminLengthValidator,\n\tplaceholderValidator,\n\trequiredValidator,\n\tvalueValidator,\n\tvalidateRequiredParameters,\n\tlabelValidator,\n\ttextInputStyleValidator,\n} from './Assertions.js';\n\n/**\n * A builder that creates API-compatible JSON data for text inputs.\n */\nexport class TextInputBuilder\n\textends ComponentBuilder<APITextInputComponent>\n\timplements Equatable<APITextInputComponent | JSONEncodable<APITextInputComponent>>\n{\n\t/**\n\t * Creates a new text input from API data.\n\t *\n\t * @param data - The API data to create this text input with\n\t * @example\n\t * Creating a select menu option from an API data object:\n\t * ```ts\n\t * const textInput = new TextInputBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tlabel: 'Type something',\n\t * \tstyle: TextInputStyle.Short,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu option using setters and API data:\n\t * ```ts\n\t * const textInput = new TextInputBuilder({\n\t * \tlabel: 'Type something else',\n\t * })\n\t * \t.setCustomId('woah')\n\t * \t.setStyle(TextInputStyle.Paragraph);\n\t * ```\n\t */\n\tpublic constructor(data?: APITextInputComponent & { type?: ComponentType.TextInput }) {\n\t\tsuper({ type: ComponentType.TextInput, ...data });\n\t}\n\n\t/**\n\t * Sets the custom id for this text input.\n\t *\n\t * @param customId - The custom id to use\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the label for this text input.\n\t *\n\t * @param label - The label to use\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = labelValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the style for this text input.\n\t *\n\t * @param style - The style to use\n\t */\n\tpublic setStyle(style: TextInputStyle) {\n\t\tthis.data.style = textInputStyleValidator.parse(style);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum length of text for this text input.\n\t *\n\t * @param minLength - The minimum length of text for this text input\n\t */\n\tpublic setMinLength(minLength: number) {\n\t\tthis.data.min_length = minLengthValidator.parse(minLength);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum length of text for this text input.\n\t *\n\t * @param maxLength - The maximum length of text for this text input\n\t */\n\tpublic setMaxLength(maxLength: number) {\n\t\tthis.data.max_length = maxLengthValidator.parse(maxLength);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the placeholder for this text input.\n\t *\n\t * @param placeholder - The placeholder to use\n\t */\n\tpublic setPlaceholder(placeholder: string) {\n\t\tthis.data.placeholder = placeholderValidator.parse(placeholder);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value for this text input.\n\t *\n\t * @param value - The value to use\n\t */\n\tpublic setValue(value: string) {\n\t\tthis.data.value = valueValidator.parse(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this text input is required.\n\t *\n\t * @param required - Whether this text input is required\n\t */\n\tpublic setRequired(required = true) {\n\t\tthis.data.required = requiredValidator.parse(required);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APITextInputComponent {\n\t\tvalidateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APITextInputComponent;\n\t}\n\n\t/**\n\t * {@inheritDoc Equatable.equals}\n\t */\n\tpublic equals(other: APITextInputComponent | JSONEncodable<APITextInputComponent>): boolean {\n\t\tif (isJSONEncodable(other)) {\n\t\t\treturn isEqual(other.toJSON(), this.data);\n\t\t}\n\n\t\treturn isEqual(other, this.data);\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { TextInputStyle } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport { customIdValidator } from '../Assertions.js';\n\nexport const textInputStyleValidator = s.nativeEnum(TextInputStyle);\nexport const minLengthValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(4_000)\n\t.setValidationEnabled(isValidationEnabled);\nexport const maxLengthValidator = s.number.int\n\t.greaterThanOrEqual(1)\n\t.lessThanOrEqual(4_000)\n\t.setValidationEnabled(isValidationEnabled);\nexport const requiredValidator = s.boolean;\nexport const valueValidator = s.string.lengthLessThanOrEqual(4_000).setValidationEnabled(isValidationEnabled);\nexport const placeholderValidator = s.string.lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nexport const labelValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(45)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredParameters(customId?: string, style?: TextInputStyle, label?: string) {\n\tcustomIdValidator.parse(customId);\n\ttextInputStyleValidator.parse(style);\n\tlabelValidator.parse(label);\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ActionRowBuilder, type ModalActionRowComponentBuilder } from '../../components/ActionRow.js';\nimport { customIdValidator } from '../../components/Assertions.js';\nimport { isValidationEnabled } from '../../util/validation.js';\n\nexport const titleValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(45)\n\t.setValidationEnabled(isValidationEnabled);\nexport const componentsValidator = s\n\t.instance(ActionRowBuilder)\n\t.array.lengthGreaterThanOrEqual(1)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredParameters(\n\tcustomId?: string,\n\ttitle?: string,\n\tcomponents?: ActionRowBuilder<ModalActionRowComponentBuilder>[],\n) {\n\tcustomIdValidator.parse(customId);\n\ttitleValidator.parse(title);\n\tcomponentsValidator.parse(components);\n}\n","/* eslint-disable jsdoc/check-param-names */\n\nimport type { JSONEncodable } from '@discordjs/util';\nimport type {\n\tAPIActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIModalInteractionResponseCallbackData,\n} from 'discord-api-types/v10';\nimport { ActionRowBuilder, type ModalActionRowComponentBuilder } from '../../components/ActionRow.js';\nimport { customIdValidator } from '../../components/Assertions.js';\nimport { createComponentBuilder } from '../../components/Components.js';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { titleValidator, validateRequiredParameters } from './Assertions.js';\n\n/**\n * A builder that creates API-compatible JSON data for modals.\n */\nexport class ModalBuilder implements JSONEncodable<APIModalInteractionResponseCallbackData> {\n\t/**\n\t * The API data associated with this modal.\n\t */\n\tpublic readonly data: Partial<APIModalInteractionResponseCallbackData>;\n\n\t/**\n\t * The components within this modal.\n\t */\n\tpublic readonly components: ActionRowBuilder<ModalActionRowComponentBuilder>[] = [];\n\n\t/**\n\t * Creates a new modal from API data.\n\t *\n\t * @param data - The API data to create this modal with\n\t */\n\tpublic constructor({ components, ...data }: Partial<APIModalInteractionResponseCallbackData> = {}) {\n\t\tthis.data = { ...data };\n\t\tthis.components = (components?.map((component) => createComponentBuilder(component)) ??\n\t\t\t[]) as ActionRowBuilder<ModalActionRowComponentBuilder>[];\n\t}\n\n\t/**\n\t * Sets the title of this modal.\n\t *\n\t * @param title - The title to use\n\t */\n\tpublic setTitle(title: string) {\n\t\tthis.data.title = titleValidator.parse(title);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id of this modal.\n\t *\n\t * @param customId - The custom id to use\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds components to this modal.\n\t *\n\t * @param components - The components to add\n\t */\n\tpublic addComponents(\n\t\t...components: RestOrArray<\n\t\t\tActionRowBuilder<ModalActionRowComponentBuilder> | APIActionRowComponent<APIModalActionRowComponent>\n\t\t>\n\t) {\n\t\tthis.components.push(\n\t\t\t...normalizeArray(components).map((component) =>\n\t\t\t\tcomponent instanceof ActionRowBuilder\n\t\t\t\t\t? component\n\t\t\t\t\t: new ActionRowBuilder<ModalActionRowComponentBuilder>(component),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets components for this modal.\n\t *\n\t * @param components - The components to set\n\t */\n\tpublic setComponents(...components: RestOrArray<ActionRowBuilder<ModalActionRowComponentBuilder>>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIModalInteractionResponseCallbackData {\n\t\tvalidateRequiredParameters(this.data.custom_id, this.data.title, this.components);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIModalInteractionResponseCallbackData;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { Locale, type APIApplicationCommandOptionChoice, type LocalizationMap } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder.js';\nimport type { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands.js';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase.js';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t.regex(/^[\\p{Ll}\\p{Lm}\\p{Lo}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+$/u)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nconst descriptionPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\nconst localePredicate = s.nativeEnum(Locale);\n\nexport function validateDescription(description: unknown): asserts description is string {\n\tdescriptionPredicate.parse(description);\n}\n\nconst maxArrayLengthPredicate = s.unknown.array.lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nexport function validateLocale(locale: unknown) {\n\treturn localePredicate.parse(locale);\n}\n\nexport function validateMaxOptionsLength(options: unknown): asserts options is ToAPIApplicationCommandOptions[] {\n\tmaxArrayLengthPredicate.parse(options);\n}\n\nexport function validateRequiredParameters(\n\tname: string,\n\tdescription: string,\n\toptions: ToAPIApplicationCommandOptions[],\n) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert description conditions\n\tvalidateDescription(description);\n\n\t// Assert options conditions\n\tvalidateMaxOptionsLength(options);\n}\n\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateRequired(required: unknown): asserts required is boolean {\n\tbooleanPredicate.parse(required);\n}\n\nconst choicesLengthPredicate = s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\n\nexport function validateChoicesLength(amountAdding: number, choices?: APIApplicationCommandOptionChoice[]): void {\n\tchoicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);\n}\n\nexport function assertReturnOfBuilder<\n\tT extends ApplicationCommandOptionBase | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder,\n>(input: unknown, ExpectedInstanceOf: new () => T): asserts input is T {\n\ts.instance(ExpectedInstanceOf).parse(input);\n}\n\nexport const localizationMapPredicate = s\n\t.object<LocalizationMap>(Object.fromEntries(Object.values(Locale).map((locale) => [locale, s.string.nullish])))\n\t.strict.nullish.setValidationEnabled(isValidationEnabled);\n\nexport function validateLocalizationMap(value: unknown): asserts value is LocalizationMap {\n\tlocalizationMapPredicate.parse(value);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n\nexport function validateNSFW(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n","import type {\n\tAPIApplicationCommandOption,\n\tLocalizationMap,\n\tPermissions,\n\tRESTPostAPIChatInputApplicationCommandsJSONBody,\n} from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport {\n\tassertReturnOfBuilder,\n\tvalidateDefaultMemberPermissions,\n\tvalidateDefaultPermission,\n\tvalidateLocalizationMap,\n\tvalidateDMPermission,\n\tvalidateMaxOptionsLength,\n\tvalidateRequiredParameters,\n\tvalidateNSFW,\n} from './Assertions.js';\nimport { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands.js';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription.js';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions.js';\n\n/**\n * A builder that creates API-compatible JSON data for slash commands.\n */\n@mix(SharedSlashCommandOptions, SharedNameAndDescription)\nexport class SlashCommandBuilder {\n\t/**\n\t * The name of this command.\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The name localizations of this command.\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The description of this command.\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The description localizations of this command.\n\t */\n\tpublic readonly description_localizations?: LocalizationMap;\n\n\t/**\n\t * The options of this command.\n\t */\n\tpublic readonly options: ToAPIApplicationCommandOptions[] = [];\n\n\t/**\n\t * Whether this command is enabled by default when the application is added to a guild.\n\t *\n\t * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n\t */\n\tpublic readonly default_permission: boolean | undefined = undefined;\n\n\t/**\n\t * The set of permissions represented as a bit set for the command.\n\t */\n\tpublic readonly default_member_permissions: Permissions | null | undefined = undefined;\n\n\t/**\n\t * Indicates whether the command is available in direct messages with the application.\n\t *\n\t * @remarks\n\t * By default, commands are visible. This property is only for global commands.\n\t */\n\tpublic readonly dm_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Whether this command is NSFW.\n\t */\n\tpublic readonly nsfw: boolean | undefined = undefined;\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * @remarks\n\t * If set to `false`, you will have to later `PUT` the permissions for this command.\n\t * @param value - Whether or not to enable this command by default\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n\t * @deprecated Use {@link SlashCommandBuilder.setDefaultMemberPermissions} or {@link SlashCommandBuilder.setDMPermission} instead.\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'default_permission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the default permissions a member should have in order to run the command.\n\t *\n\t * @remarks\n\t * You can set this to `'0'` to disable the command by default.\n\t * @param permissions - The permissions bit field to set\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n\t */\n\tpublic setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined) {\n\t\t// Assert the value and parse it\n\t\tconst permissionValue = validateDefaultMemberPermissions(permissions);\n\n\t\tReflect.set(this, 'default_member_permissions', permissionValue);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if the command is available in direct messages with the application.\n\t *\n\t * @remarks\n\t * By default, commands are visible. This method is only for global commands.\n\t * @param enabled - Whether the command should be enabled in direct messages\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n\t */\n\tpublic setDMPermission(enabled: boolean | null | undefined) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDMPermission(enabled);\n\n\t\tReflect.set(this, 'dm_permission', enabled);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this command is NSFW.\n\t *\n\t * @param nsfw - Whether this command is NSFW\n\t */\n\tpublic setNSFW(nsfw = true) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateNSFW(nsfw);\n\t\tReflect.set(this, 'nsfw', nsfw);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand group to this command.\n\t *\n\t * @param input - A function that returns a subcommand group builder or an already built builder\n\t */\n\tpublic addSubcommandGroup(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandGroupBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandGroupBuilder) => SlashCommandSubcommandGroupBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandGroupBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand to this command.\n\t *\n\t * @param input - A function that returns a subcommand builder or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Serializes this builder to API-compatible JSON data.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): RESTPostAPIChatInputApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\tvalidateLocalizationMap(this.name_localizations);\n\t\tvalidateLocalizationMap(this.description_localizations);\n\n\t\treturn {\n\t\t\t...this,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions {}\n\n/**\n * An interface specifically for slash command subcommands.\n */\nexport interface SlashCommandSubcommandsOnlyBuilder\n\textends Omit<SlashCommandBuilder, Exclude<keyof SharedSlashCommandOptions, 'options'>> {}\n\n/**\n * An interface specifically for slash command options.\n */\nexport interface SlashCommandOptionsOnlyBuilder\n\textends SharedNameAndDescription,\n\t\tSharedSlashCommandOptions,\n\t\tPick<SlashCommandBuilder, 'toJSON'> {}\n\n/**\n * An interface that ensures the `toJSON()` call will return something\n * that can be serialized into API-compatible data.\n */\nexport interface ToAPIApplicationCommandOptions {\n\ttoJSON(): APIApplicationCommandOption;\n}\n","import {\n\tApplicationCommandOptionType,\n\ttype APIApplicationCommandSubcommandGroupOption,\n\ttype APIApplicationCommandSubcommandOption,\n} from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { assertReturnOfBuilder, validateMaxOptionsLength, validateRequiredParameters } from './Assertions.js';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder.js';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase.js';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription.js';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions.js';\n\n/**\n * Represents a folder for subcommands.\n *\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups}\n */\n@mix(SharedNameAndDescription)\nexport class SlashCommandSubcommandGroupBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand group.\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand group.\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The subcommands within this subcommand group.\n\t */\n\tpublic readonly options: SlashCommandSubcommandBuilder[] = [];\n\n\t/**\n\t * Adds a new subcommand to this group.\n\t *\n\t * @param input - A function that returns a subcommand builder or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t) {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Serializes this builder to API-compatible JSON data.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): APIApplicationCommandSubcommandGroupOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.SubcommandGroup,\n\t\t\tname: this.name,\n\t\t\tname_localizations: this.name_localizations,\n\t\t\tdescription: this.description,\n\t\t\tdescription_localizations: this.description_localizations,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandGroupBuilder extends SharedNameAndDescription {}\n\n/**\n * A builder that creates API-compatible JSON data for slash command subcommands.\n *\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups}\n */\n@mix(SharedNameAndDescription, SharedSlashCommandOptions)\nexport class SlashCommandSubcommandBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand.\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand.\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The options within this subcommand.\n\t */\n\tpublic readonly options: ApplicationCommandOptionBase[] = [];\n\n\t/**\n\t * Serializes this builder to API-compatible JSON data.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): APIApplicationCommandSubcommandOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.Subcommand,\n\t\t\tname: this.name,\n\t\t\tname_localizations: this.name_localizations,\n\t\t\tdescription: this.description,\n\t\t\tdescription_localizations: this.description_localizations,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions<false> {}\n","import type { LocaleString, LocalizationMap } from 'discord-api-types/v10';\nimport { validateDescription, validateLocale, validateName } from '../Assertions.js';\n\n/**\n * This mixin holds name and description symbols for slash commands.\n */\nexport class SharedNameAndDescription {\n\t/**\n\t * The name of this command.\n\t */\n\tpublic readonly name!: string;\n\n\t/**\n\t * The name localizations of this command.\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The description of this command.\n\t */\n\tpublic readonly description!: string;\n\n\t/**\n\t * The description localizations of this command.\n\t */\n\tpublic readonly description_localizations?: LocalizationMap;\n\n\t/**\n\t * Sets the name of this command.\n\t *\n\t * @param name - The name to use\n\t */\n\tpublic setName(name: string): this {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this command.\n\t *\n\t * @param description - The description to use\n\t */\n\tpublic setDescription(description: string) {\n\t\t// Assert the description matches the conditions\n\t\tvalidateDescription(description);\n\n\t\tReflect.set(this, 'description', description);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a name localization for this command.\n\t *\n\t * @param locale - The locale to set\n\t * @param localizedName - The localized name for the given `locale`\n\t */\n\tpublic setNameLocalization(locale: LocaleString, localizedName: string | null) {\n\t\tif (!this.name_localizations) {\n\t\t\tReflect.set(this, 'name_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedName === null) {\n\t\t\tthis.name_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateName(localizedName);\n\n\t\tthis.name_localizations![parsedLocale] = localizedName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the name localizations for this command.\n\t *\n\t * @param localizedNames - The object of localized names to set\n\t */\n\tpublic setNameLocalizations(localizedNames: LocalizationMap | null) {\n\t\tif (localizedNames === null) {\n\t\t\tReflect.set(this, 'name_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'name_localizations', {});\n\n\t\tfor (const args of Object.entries(localizedNames)) {\n\t\t\tthis.setNameLocalization(...(args as [LocaleString, string | null]));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a description localization for this command.\n\t *\n\t * @param locale - The locale to set\n\t * @param localizedDescription - The localized description for the given locale\n\t */\n\tpublic setDescriptionLocalization(locale: LocaleString, localizedDescription: string | null) {\n\t\tif (!this.description_localizations) {\n\t\t\tReflect.set(this, 'description_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedDescription === null) {\n\t\t\tthis.description_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateDescription(localizedDescription);\n\n\t\tthis.description_localizations![parsedLocale] = localizedDescription;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description localizations for this command.\n\t *\n\t * @param localizedDescriptions - The object of localized descriptions to set\n\t */\n\tpublic setDescriptionLocalizations(localizedDescriptions: LocalizationMap | null) {\n\t\tif (localizedDescriptions === null) {\n\t\t\tReflect.set(this, 'description_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'description_localizations', {});\n\t\tfor (const args of Object.entries(localizedDescriptions)) {\n\t\t\tthis.setDescriptionLocalization(...(args as [LocaleString, string | null]));\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandAttachmentOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\n/**\n * A slash command attachment option.\n */\nexport class SlashCommandAttachmentOption extends ApplicationCommandOptionBase {\n\t/**\n\t * The type of this option.\n\t */\n\tpublic override readonly type = ApplicationCommandOptionType.Attachment as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandAttachmentOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import type { APIApplicationCommandBasicOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { validateRequiredParameters, validateRequired, validateLocalizationMap } from '../Assertions.js';\nimport { SharedNameAndDescription } from './NameAndDescription.js';\n\n/**\n * The base application command option builder that contains common symbols for application command builders.\n */\nexport abstract class ApplicationCommandOptionBase extends SharedNameAndDescription {\n\t/**\n\t * The type of this option.\n\t */\n\tpublic abstract readonly type: ApplicationCommandOptionType;\n\n\t/**\n\t * Whether this option is required.\n\t *\n\t * @defaultValue `false`\n\t */\n\tpublic readonly required: boolean = false;\n\n\t/**\n\t * Sets whether this option is required.\n\t *\n\t * @param required - Whether this option should be required\n\t */\n\tpublic setRequired(required: boolean) {\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(required);\n\n\t\tReflect.set(this, 'required', required);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Serializes this builder to API-compatible JSON data.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic abstract toJSON(): APIApplicationCommandBasicOption;\n\n\t/**\n\t * This method runs required validators on this builder.\n\t */\n\tprotected runRequiredValidations() {\n\t\tvalidateRequiredParameters(this.name, this.description, []);\n\n\t\t// Validate localizations\n\t\tvalidateLocalizationMap(this.name_localizations);\n\t\tvalidateLocalizationMap(this.description_localizations);\n\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(this.required);\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandBooleanOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\n/**\n * A slash command boolean option.\n */\nexport class SlashCommandBooleanOption extends ApplicationCommandOptionBase {\n\t/**\n\t * The type of this option.\n\t */\n\tpublic readonly type = ApplicationCommandOptionType.Boolean as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandBooleanOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandChannelOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionChannelTypesMixin } from '../mixins/ApplicationCommandOptionChannelTypesMixin.js';\n\n/**\n * A slash command channel option.\n */\n@mix(ApplicationCommandOptionChannelTypesMixin)\nexport class SlashCommandChannelOption extends ApplicationCommandOptionBase {\n\t/**\n\t * The type of this option.\n\t */\n\tpublic override readonly type = ApplicationCommandOptionType.Channel as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandChannelOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandChannelOption extends ApplicationCommandOptionChannelTypesMixin {}\n","import { s } from '@sapphire/shapeshift';\nimport { ChannelType } from 'discord-api-types/v10';\n\n/**\n * The allowed channel types used for a channel option in a slash command builder.\n *\n * @privateRemarks This can't be dynamic because const enums are erased at runtime.\n * @internal\n */\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildAnnouncement,\n\tChannelType.AnnouncementThread,\n\tChannelType.PublicThread,\n\tChannelType.PrivateThread,\n\tChannelType.GuildStageVoice,\n\tChannelType.GuildForum,\n] as const;\n\n/**\n * The type of allowed channel types used for a channel option.\n */\nexport type ApplicationCommandOptionAllowedChannelTypes = (typeof allowedChannelTypes)[number];\n\nconst channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));\n\n/**\n * This mixin holds channel type symbols used for options.\n */\nexport class ApplicationCommandOptionChannelTypesMixin {\n\t/**\n\t * The channel types of this option.\n\t */\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds channel types to this option.\n\t *\n\t * @param channelTypes - The channel types\n\t */\n\tpublic addChannelTypes(...channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tthis.channel_types!.push(...channelTypesPredicate.parse(channelTypes));\n\n\t\treturn this;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandIntegerOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst numberValidator = s.number.int;\n\n/**\n * A slash command integer option.\n */\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandIntegerOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\t/**\n\t * The type of this option.\n\t */\n\tpublic readonly type = ApplicationCommandOptionType.Integer as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n\t */\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'max_value', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n\t */\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'min_value', min);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandIntegerOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this } as APIApplicationCommandIntegerOption;\n\t}\n}\n\nexport interface SlashCommandIntegerOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","/**\n * This mixin holds minimum and maximum symbols used for options.\n */\nexport abstract class ApplicationCommandNumericOptionMinMaxValueMixin {\n\t/**\n\t * The maximum value of this option.\n\t */\n\tpublic readonly max_value?: number;\n\n\t/**\n\t * The minimum value of this option.\n\t */\n\tpublic readonly min_value?: number;\n\n\t/**\n\t * Sets the maximum number value of this option.\n\t *\n\t * @param max - The maximum value this option can be\n\t */\n\tpublic abstract setMaxValue(max: number): this;\n\n\t/**\n\t * Sets the minimum number value of this option.\n\t *\n\t * @param min - The minimum value this option can be\n\t */\n\tpublic abstract setMinValue(min: number): this;\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandOptionChoice } from 'discord-api-types/v10';\nimport { localizationMapPredicate, validateChoicesLength } from '../Assertions.js';\n\nconst stringPredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nconst numberPredicate = s.number.greaterThan(Number.NEGATIVE_INFINITY).lessThan(Number.POSITIVE_INFINITY);\nconst choicesPredicate = s.object({\n\tname: stringPredicate,\n\tname_localizations: localizationMapPredicate,\n\tvalue: s.union(stringPredicate, numberPredicate),\n}).array;\nconst booleanPredicate = s.boolean;\n\n/**\n * This mixin holds choices and autocomplete symbols used for options.\n */\nexport class ApplicationCommandOptionWithChoicesAndAutocompleteMixin<T extends number | string> {\n\t/**\n\t * The choices of this option.\n\t */\n\tpublic readonly choices?: APIApplicationCommandOptionChoice<T>[];\n\n\t/**\n\t * Whether this option utilizes autocomplete.\n\t */\n\tpublic readonly autocomplete?: boolean;\n\n\t/**\n\t * The type of this option.\n\t *\n\t * @privateRemarks Since this is present and this is a mixin, this is needed.\n\t */\n\tpublic readonly type!: ApplicationCommandOptionType;\n\n\t/**\n\t * Adds multiple choices to this option.\n\t *\n\t * @param choices - The choices to add\n\t */\n\tpublic addChoices(...choices: APIApplicationCommandOptionChoice<T>[]): this {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tif (this.choices === undefined) {\n\t\t\tReflect.set(this, 'choices', []);\n\t\t}\n\n\t\tvalidateChoicesLength(choices.length, this.choices);\n\n\t\tfor (const { name, name_localizations, value } of choices) {\n\t\t\t// Validate the value\n\t\t\tif (this.type === ApplicationCommandOptionType.String) {\n\t\t\t\tstringPredicate.parse(value);\n\t\t\t} else {\n\t\t\t\tnumberPredicate.parse(value);\n\t\t\t}\n\n\t\t\tthis.choices!.push({ name, name_localizations, value });\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets multiple choices for this option.\n\t *\n\t * @param choices - The choices to set\n\t */\n\tpublic setChoices<Input extends APIApplicationCommandOptionChoice<T>[]>(...choices: Input): this {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tReflect.set(this, 'choices', []);\n\t\tthis.addChoices(...choices);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Whether this option uses autocomplete.\n\t *\n\t * @param autocomplete - Whether this option should use autocomplete\n\t */\n\tpublic setAutocomplete(autocomplete: boolean): this {\n\t\t// Assert that you actually passed a boolean\n\t\tbooleanPredicate.parse(autocomplete);\n\n\t\tif (autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tReflect.set(this, 'autocomplete', autocomplete);\n\n\t\treturn this;\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandMentionableOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\n/**\n * A slash command mentionable option.\n */\nexport class SlashCommandMentionableOption extends ApplicationCommandOptionBase {\n\t/**\n\t * The type of this option.\n\t */\n\tpublic readonly type = ApplicationCommandOptionType.Mentionable as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandMentionableOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandNumberOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst numberValidator = s.number;\n\n/**\n * A slash command number option.\n */\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandNumberOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\t/**\n\t * The type of this option.\n\t */\n\tpublic readonly type = ApplicationCommandOptionType.Number as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n\t */\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'max_value', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n\t */\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'min_value', min);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandNumberOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this } as APIApplicationCommandNumberOption;\n\t}\n}\n\nexport interface SlashCommandNumberOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","import { ApplicationCommandOptionType, type APIApplicationCommandRoleOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\n/**\n * A slash command role option.\n */\nexport class SlashCommandRoleOption extends ApplicationCommandOptionBase {\n\t/**\n\t * The type of this option.\n\t */\n\tpublic override readonly type = ApplicationCommandOptionType.Role as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandRoleOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandStringOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst minLengthValidator = s.number.greaterThanOrEqual(0).lessThanOrEqual(6_000);\nconst maxLengthValidator = s.number.greaterThanOrEqual(1).lessThanOrEqual(6_000);\n\n/**\n * A slash command string option.\n */\n@mix(ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandStringOption extends ApplicationCommandOptionBase {\n\t/**\n\t * The type of this option.\n\t */\n\tpublic readonly type = ApplicationCommandOptionType.String as const;\n\n\t/**\n\t * The maximum length of this option.\n\t */\n\tpublic readonly max_length?: number;\n\n\t/**\n\t * The minimum length of this option.\n\t */\n\tpublic readonly min_length?: number;\n\n\t/**\n\t * Sets the maximum length of this string option.\n\t *\n\t * @param max - The maximum length this option can be\n\t */\n\tpublic setMaxLength(max: number): this {\n\t\tmaxLengthValidator.parse(max);\n\n\t\tReflect.set(this, 'max_length', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum length of this string option.\n\t *\n\t * @param min - The minimum length this option can be\n\t */\n\tpublic setMinLength(min: number): this {\n\t\tminLengthValidator.parse(min);\n\n\t\tReflect.set(this, 'min_length', min);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandStringOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this } as APIApplicationCommandStringOption;\n\t}\n}\n\nexport interface SlashCommandStringOption extends ApplicationCommandOptionWithChoicesAndAutocompleteMixin<string> {}\n","import { ApplicationCommandOptionType, type APIApplicationCommandUserOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\n/**\n * A slash command user option.\n */\nexport class SlashCommandUserOption extends ApplicationCommandOptionBase {\n\t/**\n\t * The type of this option.\n\t */\n\tpublic readonly type = ApplicationCommandOptionType.User as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n\t */\n\tpublic toJSON(): APIApplicationCommandUserOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { assertReturnOfBuilder, validateMaxOptionsLength } from '../Assertions.js';\nimport type { ToAPIApplicationCommandOptions } from '../SlashCommandBuilder';\nimport { SlashCommandAttachmentOption } from '../options/attachment.js';\nimport { SlashCommandBooleanOption } from '../options/boolean.js';\nimport { SlashCommandChannelOption } from '../options/channel.js';\nimport { SlashCommandIntegerOption } from '../options/integer.js';\nimport { SlashCommandMentionableOption } from '../options/mentionable.js';\nimport { SlashCommandNumberOption } from '../options/number.js';\nimport { SlashCommandRoleOption } from '../options/role.js';\nimport { SlashCommandStringOption } from '../options/string.js';\nimport { SlashCommandUserOption } from '../options/user.js';\nimport type { ApplicationCommandOptionBase } from './ApplicationCommandOptionBase.js';\n\n/**\n * This mixin holds symbols that can be shared in slash command options.\n *\n * @typeParam ShouldOmitSubcommandFunctions - Whether to omit subcommand functions.\n */\nexport class SharedSlashCommandOptions<ShouldOmitSubcommandFunctions = true> {\n\tpublic readonly options!: ToAPIApplicationCommandOptions[];\n\n\t/**\n\t * Adds a boolean option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addBooleanOption(\n\t\tinput: SlashCommandBooleanOption | ((builder: SlashCommandBooleanOption) => SlashCommandBooleanOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n\t}\n\n\t/**\n\t * Adds a user option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addUserOption(input: SlashCommandUserOption | ((builder: SlashCommandUserOption) => SlashCommandUserOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandUserOption);\n\t}\n\n\t/**\n\t * Adds a channel option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addChannelOption(\n\t\tinput: SlashCommandChannelOption | ((builder: SlashCommandChannelOption) => SlashCommandChannelOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n\t}\n\n\t/**\n\t * Adds a role option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addRoleOption(input: SlashCommandRoleOption | ((builder: SlashCommandRoleOption) => SlashCommandRoleOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n\t}\n\n\t/**\n\t * Adds an attachment option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addAttachmentOption(\n\t\tinput: SlashCommandAttachmentOption | ((builder: SlashCommandAttachmentOption) => SlashCommandAttachmentOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);\n\t}\n\n\t/**\n\t * Adds a mentionable option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addMentionableOption(\n\t\tinput: SlashCommandMentionableOption | ((builder: SlashCommandMentionableOption) => SlashCommandMentionableOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n\t}\n\n\t/**\n\t * Adds a string option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addStringOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandStringOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t| SlashCommandStringOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandStringOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandStringOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandStringOption);\n\t}\n\n\t/**\n\t * Adds an integer option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addIntegerOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandIntegerOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t| SlashCommandIntegerOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandIntegerOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandIntegerOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n\t}\n\n\t/**\n\t * Adds a number option.\n\t *\n\t * @param input - A function that returns an option builder or an already built builder\n\t */\n\tpublic addNumberOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandNumberOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t| SlashCommandNumberOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandNumberOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandNumberOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandNumberOption);\n\t}\n\n\t/**\n\t * Where the actual adding magic happens. ✨\n\t *\n\t * @param input - The input. What else?\n\t * @param Instance - The instance of whatever is being added\n\t * @internal\n\t */\n\tprivate _sharedAddOptionMethod<T extends ApplicationCommandOptionBase>(\n\t\tinput:\n\t\t\t| Omit<T, 'addChoices'>\n\t\t\t| Omit<T, 'setAutocomplete'>\n\t\t\t| T\n\t\t\t| ((builder: T) => Omit<T, 'addChoices'> | Omit<T, 'setAutocomplete'> | T),\n\t\tInstance: new () => T,\n\t): ShouldOmitSubcommandFunctions extends true ? Omit<this, 'addSubcommand' | 'addSubcommandGroup'> : this {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new Instance()) : input;\n\n\t\tassertReturnOfBuilder(result, Instance);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandType } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport type { ContextMenuCommandType } from './ContextMenuCommandBuilder.js';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t// eslint-disable-next-line prefer-named-capture-group, unicorn/no-unsafe-regex\n\t.regex(/^( *[\\p{P}\\p{L}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}]+ *)+$/u)\n\t.setValidationEnabled(isValidationEnabled);\nconst typePredicate = s\n\t.union(s.literal(ApplicationCommandType.User), s.literal(ApplicationCommandType.Message))\n\t.setValidationEnabled(isValidationEnabled);\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nexport function validateType(type: unknown): asserts type is ContextMenuCommandType {\n\ttypePredicate.parse(type);\n}\n\nexport function validateRequiredParameters(name: string, type: number) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert type is valid\n\tvalidateType(type);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n","import type {\n\tApplicationCommandType,\n\tLocaleString,\n\tLocalizationMap,\n\tPermissions,\n\tRESTPostAPIContextMenuApplicationCommandsJSONBody,\n} from 'discord-api-types/v10';\nimport { validateLocale, validateLocalizationMap } from '../slashCommands/Assertions.js';\nimport {\n\tvalidateRequiredParameters,\n\tvalidateName,\n\tvalidateType,\n\tvalidateDefaultPermission,\n\tvalidateDefaultMemberPermissions,\n\tvalidateDMPermission,\n} from './Assertions.js';\n\n/**\n * The type a context menu command can be.\n */\nexport type ContextMenuCommandType = ApplicationCommandType.Message | ApplicationCommandType.User;\n\n/**\n * A builder that creates API-compatible JSON data for context menu commands.\n */\nexport class ContextMenuCommandBuilder {\n\t/**\n\t * The name of this command.\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The name localizations of this command.\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The type of this command.\n\t */\n\tpublic readonly type: ContextMenuCommandType = undefined!;\n\n\t/**\n\t * Whether this command is enabled by default when the application is added to a guild.\n\t *\n\t * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n\t */\n\tpublic readonly default_permission: boolean | undefined = undefined;\n\n\t/**\n\t * The set of permissions represented as a bit set for the command.\n\t */\n\tpublic readonly default_member_permissions: Permissions | null | undefined = undefined;\n\n\t/**\n\t * Indicates whether the command is available in direct messages with the application.\n\t *\n\t * @remarks\n\t * By default, commands are visible. This property is only for global commands.\n\t */\n\tpublic readonly dm_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Sets the name of this command.\n\t *\n\t * @param name - The name to use\n\t */\n\tpublic setName(name: string) {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the type of this command.\n\t *\n\t * @param type - The type to use\n\t */\n\tpublic setType(type: ContextMenuCommandType) {\n\t\t// Assert the type is valid\n\t\tvalidateType(type);\n\n\t\tReflect.set(this, 'type', type);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * @remarks\n\t * If set to `false`, you will have to later `PUT` the permissions for this command.\n\t * @param value - Whether to enable this command by default\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n\t * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'default_permission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the default permissions a member should have in order to run this command.\n\t *\n\t * @remarks\n\t * You can set this to `'0'` to disable the command by default.\n\t * @param permissions - The permissions bit field to set\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n\t */\n\tpublic setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined) {\n\t\t// Assert the value and parse it\n\t\tconst permissionValue = validateDefaultMemberPermissions(permissions);\n\n\t\tReflect.set(this, 'default_member_permissions', permissionValue);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if the command is available in direct messages with the application.\n\t *\n\t * @remarks\n\t * By default, commands are visible. This method is only for global commands.\n\t * @param enabled - Whether the command should be enabled in direct messages\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n\t */\n\tpublic setDMPermission(enabled: boolean | null | undefined) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDMPermission(enabled);\n\n\t\tReflect.set(this, 'dm_permission', enabled);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a name localization for this command.\n\t *\n\t * @param locale - The locale to set\n\t * @param localizedName - The localized name for the given `locale`\n\t */\n\tpublic setNameLocalization(locale: LocaleString, localizedName: string | null) {\n\t\tif (!this.name_localizations) {\n\t\t\tReflect.set(this, 'name_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedName === null) {\n\t\t\tthis.name_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateName(localizedName);\n\n\t\tthis.name_localizations![parsedLocale] = localizedName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the name localizations for this command.\n\t *\n\t * @param localizedNames - The object of localized names to set\n\t */\n\tpublic setNameLocalizations(localizedNames: LocalizationMap | null) {\n\t\tif (localizedNames === null) {\n\t\t\tReflect.set(this, 'name_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'name_localizations', {});\n\n\t\tfor (const args of Object.entries(localizedNames))\n\t\t\tthis.setNameLocalization(...(args as [LocaleString, string | null]));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Serializes this builder to API-compatible JSON data.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): RESTPostAPIContextMenuApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.type);\n\n\t\tvalidateLocalizationMap(this.name_localizations);\n\n\t\treturn { ...this };\n\t}\n}\n","import type { APIEmbed } from 'discord-api-types/v10';\n\n/**\n * Calculates the length of the embed.\n *\n * @param data - The embed data to check\n */\nexport function embedLength(data: APIEmbed) {\n\treturn (\n\t\t(data.title?.length ?? 0) +\n\t\t(data.description?.length ?? 0) +\n\t\t(data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) +\n\t\t(data.footer?.text.length ?? 0) +\n\t\t(data.author?.name.length ?? 0)\n\t);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAC,+CAAA,EAAAA,CAAA,KAAAA,+CAAA;EAAAC,4BAAA,EAAAA,CAAA,KAAAA,4BAAA;EAAAC,yCAAA,EAAAA,CAAA,KAAAA,yCAAA;EAAAC,uDAAA,EAAAA,CAAA,KAAAA,uDAAA;EAAAC,qBAAA,EAAAA,CAAA,KAAAA,qBAAA;EAAAC,aAAA,EAAAA,CAAA,KAAAA,aAAA;EAAAC,wBAAA,EAAAA,CAAA,KAAAA,wBAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAC,mBAAA;EAAAC,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAC,4BAAA,EAAAA,CAAA,KAAAC,mBAAA;EAAAC,yBAAA,EAAAA,CAAA,KAAAA,yBAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAC,kBAAA;EAAAC,YAAA,EAAAA,CAAA,KAAAA,YAAA;EAAAC,4BAAA,EAAAA,CAAA,KAAAA,4BAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAC,mBAAA;EAAAC,YAAA,EAAAA,CAAA,KAAAA,YAAA;EAAAC,qBAAA,EAAAA,CAAA,KAAAA,qBAAA;EAAAC,iBAAA,EAAAA,CAAA,KAAAC,uBAAA;EAAAC,uBAAA,EAAAA,CAAA,KAAAC,6BAAA;EAAAC,wBAAA,EAAAA,CAAA,KAAAA,wBAAA;EAAAC,yBAAA,EAAAA,CAAA,KAAAA,yBAAA;EAAAC,sBAAA,EAAAA,CAAA,KAAAC,mBAAA;EAAAC,4BAAA,EAAAA,CAAA,KAAAA,4BAAA;EAAAC,yBAAA,EAAAA,CAAA,KAAAA,yBAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,yBAAA,EAAAA,CAAA,KAAAA,yBAAA;EAAAC,yBAAA,EAAAA,CAAA,KAAAA,yBAAA;EAAAC,6BAAA,EAAAA,CAAA,KAAAA,6BAAA;EAAAC,wBAAA,EAAAA,CAAA,KAAAA,wBAAA;EAAAC,sBAAA,EAAAA,CAAA,KAAAA,sBAAA;EAAAC,wBAAA,EAAAA,CAAA,KAAAA,wBAAA;EAAAC,6BAAA,EAAAA,CAAA,KAAAA,6BAAA;EAAAC,kCAAA,EAAAA,CAAA,KAAAA,kCAAA;EAAAC,sBAAA,EAAAA,CAAA,KAAAA,sBAAA;EAAAlB,uBAAA,EAAAA,CAAA,KAAAA,uBAAA;EAAAE,6BAAA,EAAAA,CAAA,KAAAA,6BAAA;EAAAiB,mBAAA,EAAAA,CAAA,KAAAC,mBAAA;EAAAC,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAC,qBAAA,EAAAA,CAAA,KAAAA,qBAAA;EAAAC,sBAAA,EAAAA,CAAA,KAAAA,sBAAA;EAAAC,iBAAA,EAAAA,CAAA,KAAAA,iBAAA;EAAAC,WAAA,EAAAA,CAAA,KAAAA,WAAA;EAAAC,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAC,OAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAzD,WAAA;;;ACAA,IAAAiB,kBAAA;AAAAhB,QAAA,CAAAgB,kBAAA;EAAAyC,YAAA,EAAAA,CAAA,KAAAA,YAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAC,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,yBAAA,EAAAA,CAAA,KAAAA,yBAAA;EAAAC,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,kBAAA,EAAAA,CAAA,KAAAA,kBAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,iBAAA,EAAAA,CAAA,KAAAA,iBAAA;EAAAC,kBAAA,EAAAA,CAAA,KAAAA,kBAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAC,YAAA,EAAAA,CAAA,KAAAA,YAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA;AAAA;AAAA,IAAAC,iBAAA,GAAkBC,OAAA;;;ACAlB,IAAIC,QAAA,GAAW;AAOR,SAAS3B,iBAAA,EAAmB;EAClC,OAAQ2B,QAAA,GAAW;AACpB;AAFgBC,MAAA,CAAA5B,gBAAA;AAST,SAASF,kBAAA,EAAoB;EACnC,OAAQ6B,QAAA,GAAW;AACpB;AAFgBC,MAAA,CAAA9B,iBAAA;AAOT,SAASG,oBAAA,EAAsB;EACrC,OAAO0B,QAAA;AACR;AAFgBC,MAAA,CAAA3B,mBAAA;;;ADnBT,IAAMgB,kBAAA,GAAqBQ,iBAAA,CAAAI,CAAA,CAAEC,MAAA,CAClCC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,GAAG,EACzBC,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAMiB,mBAAA,GAAsBO,iBAAA,CAAAI,CAAA,CAAEC,MAAA,CACnCC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,IAAK,EAC3BC,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAMc,oBAAA,GAAuBU,iBAAA,CAAAI,CAAA,CAAEK,OAAA,CAAQC,QAAA;AAEvC,IAAMvB,mBAAA,GAAsBa,iBAAA,CAAAI,CAAA,CACjCO,MAAA,CAAO;EACPC,IAAA,EAAMpB,kBAAA;EACNqB,KAAA,EAAOpB,mBAAA;EACPqB,MAAA,EAAQxB;AACT,CAAC,EACAkB,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAMY,yBAAA,GAA4BD,mBAAA,CAAoB4B,KAAA,CAAMP,oBAAA,CAAqBhC,mBAAmB;AAEpG,IAAMe,oBAAA,GAAuBS,iBAAA,CAAAI,CAAA,CAAEY,MAAA,CAAOC,eAAA,CAAgB,EAAE,EAAET,oBAAA,CAAqBhC,mBAAmB;AAElG,SAASuB,oBAAoBmB,YAAA,EAAsBC,MAAA,EAAgC;EACzF5B,oBAAA,CAAqB6B,KAAA,EAAOD,MAAA,EAAQE,MAAA,IAAU,KAAKH,YAAY;AAChE;AAFgBf,MAAA,CAAAJ,mBAAA;AAIT,IAAMhB,mBAAA,GAAsBS,kBAAA,CAAmB8B,QAAA,CAASd,oBAAA,CAAqBhC,mBAAmB;AAEhG,IAAMmB,iBAAA,GAAoBK,iBAAA,CAAAI,CAAA,CAAEC,MAAA,CACjCkB,GAAA,CAAI;EACJC,gBAAA,EAAkB,CAAC,SAAS,UAAU,aAAa;AACpD,CAAC,EACAC,OAAA,CAAQjB,oBAAA,CAAqBhC,mBAAmB;AAE3C,IAAMsB,YAAA,GAAeE,iBAAA,CAAAI,CAAA,CAAEC,MAAA,CAC5BkB,GAAA,CAAI;EACJC,gBAAA,EAAkB,CAAC,SAAS,QAAQ;AACrC,CAAC,EACAC,OAAA,CAAQjB,oBAAA,CAAqBhC,mBAAmB;AAE3C,IAAMU,oBAAA,GAAuBc,iBAAA,CAAAI,CAAA,CAClCO,MAAA,CAAO;EACPC,IAAA,EAAM7B,mBAAA;EACN2C,OAAA,EAAS/B,iBAAA;EACT4B,GAAA,EAAKzB;AACN,CAAC,EACAU,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAMM,YAAA,GAAekB,iBAAA,CAAAI,CAAA,CAAEY,MAAA,CAAOW,GAAA,CACnCC,kBAAA,CAAmB,CAAC,EACpBX,eAAA,CAAgB,GAAG,EACnBT,oBAAA,CAAqBhC,mBAAmB;AACnC,IAAMQ,cAAA,GAAiBgB,iBAAA,CAAAI,CAAA,CAAEY,MAAA,CAAOW,GAAA,CACrCC,kBAAA,CAAmB,CAAC,EACpBX,eAAA,CAAgB,QAAQ,EACxBY,EAAA,CAAG7B,iBAAA,CAAAI,CAAA,CAAE0B,KAAA,CAAM,CAAChD,YAAA,EAAcA,YAAA,EAAcA,YAAY,CAAC,CAAC,EACtDwC,QAAA,CAASd,oBAAA,CAAqBhC,mBAAmB;AAE5C,IAAMS,oBAAA,GAAuBe,iBAAA,CAAAI,CAAA,CAAEC,MAAA,CACpCC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,IAAK,EAC3Be,QAAA,CAASd,oBAAA,CAAqBhC,mBAAmB;AAE5C,IAAMkB,mBAAA,GAAsBM,iBAAA,CAAAI,CAAA,CAAEC,MAAA,CACnCC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,IAAK,EAC3Be,QAAA,CAASd,oBAAA,CAAqBhC,mBAAmB;AAE5C,IAAMa,oBAAA,GAAuBW,iBAAA,CAAAI,CAAA,CAClCO,MAAA,CAAO;EACPoB,IAAA,EAAMrC,mBAAA;EACNgC,OAAA,EAAS/B;AACV,CAAC,EACAa,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAMoB,kBAAA,GAAqBI,iBAAA,CAAAI,CAAA,CAAE4B,KAAA,CAAMhC,iBAAA,CAAAI,CAAA,CAAEY,MAAA,EAAQhB,iBAAA,CAAAI,CAAA,CAAE6B,IAAI,EAAEX,QAAA,CAASd,oBAAA,CAAqBhC,mBAAmB;AAEtG,IAAMqB,cAAA,GAAiBL,kBAAA,CAAmB8B,QAAA,CAASd,oBAAA,CAAqBhC,mBAAmB;;;AE7E3F,SAASC,eAAkByD,GAAA,EAA0B;EAC3D,IAAIC,KAAA,CAAMC,OAAA,CAAQF,GAAA,CAAI,CAAC,CAAC,GAAG,OAAOA,GAAA,CAAI,CAAC;EACvC,OAAOA,GAAA;AACR;AAHgB/B,MAAA,CAAA1B,cAAA;;;AC+DT,IAAMnC,YAAA,GAAN,MAAmB;EArE1B;IAqE0B6D,MAAA;EAAA;EAAA;AAAA;AAAA;EAITkC,IAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAOTC,YAAYD,IAAA,GAAiB,CAAC,GAAG;IACvC,KAAKA,IAAA,GAAO;MAAE,GAAGA;IAAK;IACtB,IAAIA,IAAA,CAAKE,SAAA,EAAW,KAAKF,IAAA,CAAKE,SAAA,GAAY,IAAIC,IAAA,CAAKH,IAAA,CAAKE,SAAS,EAAEE,WAAA,CAAY;EAChF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA0BOC,UAAA,GAAavB,MAAA,EAA0C;IAC7D,MAAMwB,gBAAA,GAAmBlE,cAAA,CAAe0C,MAAM;IAE9CpB,mBAAA,CAAoB4C,gBAAA,CAAiBtB,MAAA,EAAQ,KAAKgB,IAAA,CAAKlB,MAAM;IAG7D/B,yBAAA,CAA0BgC,KAAA,CAAMuB,gBAAgB;IAEhD,IAAI,KAAKN,IAAA,CAAKlB,MAAA,EAAQ,KAAKkB,IAAA,CAAKlB,MAAA,CAAOyB,IAAA,CAAK,GAAGD,gBAAgB,OAC1D,KAAKN,IAAA,CAAKlB,MAAA,GAASwB,gBAAA;IACxB,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA+BOE,aAAaC,KAAA,EAAeC,WAAA,KAAwB5B,MAAA,EAA+B;IAEzFpB,mBAAA,CAAoBoB,MAAA,CAAOE,MAAA,GAAS0B,WAAA,EAAa,KAAKV,IAAA,CAAKlB,MAAM;IAGjE/B,yBAAA,CAA0BgC,KAAA,CAAMD,MAAM;IACtC,IAAI,KAAKkB,IAAA,CAAKlB,MAAA,EAAQ,KAAKkB,IAAA,CAAKlB,MAAA,CAAO6B,MAAA,CAAOF,KAAA,EAAOC,WAAA,EAAa,GAAG5B,MAAM,OACtE,KAAKkB,IAAA,CAAKlB,MAAA,GAASA,MAAA;IACxB,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYO8B,UAAA,GAAa9B,MAAA,EAAoC;IACvD,KAAK0B,YAAA,CAAa,GAAG,KAAKR,IAAA,CAAKlB,MAAA,EAAQE,MAAA,IAAU,GAAG,GAAG5C,cAAA,CAAe0C,MAAM,CAAC;IAC7E,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAQO+B,UAAUC,OAAA,EAA0C;IAC1D,IAAIA,OAAA,KAAY,MAAM;MACrB,KAAKd,IAAA,CAAKe,MAAA,GAAS;MACnB,OAAO;IACR;IAGAlE,oBAAA,CAAqBkC,KAAA,CAAM+B,OAAO;IAElC,KAAKd,IAAA,CAAKe,MAAA,GAAS;MAAExC,IAAA,EAAMuC,OAAA,CAAQvC,IAAA;MAAMW,GAAA,EAAK4B,OAAA,CAAQ5B,GAAA;MAAK8B,QAAA,EAAUF,OAAA,CAAQzB;IAAQ;IACrF,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO4B,SAASC,KAAA,EAAuC;IAEtDvE,cAAA,CAAeoC,KAAA,CAAMmC,KAAK;IAE1B,IAAIpB,KAAA,CAAMC,OAAA,CAAQmB,KAAK,GAAG;MACzB,MAAM,CAACC,GAAA,EAAKC,KAAA,EAAOC,IAAI,IAAIH,KAAA;MAC3B,KAAKlB,IAAA,CAAKkB,KAAA,IAASC,GAAA,IAAO,OAAOC,KAAA,IAAS,KAAKC,IAAA;MAC/C,OAAO;IACR;IAEA,KAAKrB,IAAA,CAAKkB,KAAA,GAAQA,KAAA,IAAS;IAC3B,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOI,eAAeC,WAAA,EAAkC;IAEvD3E,oBAAA,CAAqBmC,KAAA,CAAMwC,WAAW;IAEtC,KAAKvB,IAAA,CAAKuB,WAAA,GAAcA,WAAA,IAAe;IACvC,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,UAAUV,OAAA,EAA0C;IAC1D,IAAIA,OAAA,KAAY,MAAM;MACrB,KAAKd,IAAA,CAAKyB,MAAA,GAAS;MACnB,OAAO;IACR;IAGAzE,oBAAA,CAAqB+B,KAAA,CAAM+B,OAAO;IAElC,KAAKd,IAAA,CAAKyB,MAAA,GAAS;MAAE/B,IAAA,EAAMoB,OAAA,CAAQpB,IAAA;MAAMsB,QAAA,EAAUF,OAAA,CAAQzB;IAAQ;IACnE,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOqC,SAASxC,GAAA,EAA0B;IAEzC5B,iBAAA,CAAkByB,KAAA,CAAMG,GAAG;IAE3B,KAAKc,IAAA,CAAK2B,KAAA,GAAQzC,GAAA,GAAM;MAAEA;IAAI,IAAI;IAClC,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO0C,aAAa1C,GAAA,EAA0B;IAE7C5B,iBAAA,CAAkByB,KAAA,CAAMG,GAAG;IAE3B,KAAKc,IAAA,CAAK6B,SAAA,GAAY3C,GAAA,GAAM;MAAEA;IAAI,IAAI;IACtC,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO4C,aAAa5B,SAAA,GAAkCC,IAAA,CAAK4B,GAAA,CAAI,GAAS;IAEvExE,kBAAA,CAAmBwB,KAAA,CAAMmB,SAAS;IAElC,KAAKF,IAAA,CAAKE,SAAA,GAAYA,SAAA,GAAY,IAAIC,IAAA,CAAKD,SAAS,EAAEE,WAAA,CAAY,IAAI;IACtE,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO4B,SAASC,KAAA,EAA4B;IAE3CzE,cAAA,CAAeuB,KAAA,CAAMkD,KAAK;IAE1B,KAAKjC,IAAA,CAAKiC,KAAA,GAAQA,KAAA,IAAS;IAC3B,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,OAAOhD,GAAA,EAA0B;IAEvCzB,YAAA,CAAasB,KAAA,CAAMG,GAAG;IAEtB,KAAKc,IAAA,CAAKd,GAAA,GAAMA,GAAA,IAAO;IACvB,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOiD,OAAA,EAAmB;IACzB,OAAO;MAAE,GAAG,KAAKnC;IAAK;EACvB;AACD;;;AJ9TAoC,UAAA,CAAArJ,WAAA,EAAc6E,OAAA,2BAHdtB,MAAA,CAAAC,OAAA;;;AKAA,IAAA7C,mBAAA;AAAAV,QAAA,CAAAU,mBAAA;EAAA2I,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,qBAAA,EAAAA,CAAA,KAAAA,qBAAA;EAAAC,iBAAA,EAAAA,CAAA,KAAAA,iBAAA;EAAAC,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAC,iBAAA,EAAAA,CAAA,KAAAA,iBAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,8BAAA,EAAAA,CAAA,KAAAA,8BAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAA,eAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAA,eAAA;EAAAC,sBAAA,EAAAA,CAAA,KAAAA,sBAAA;EAAAC,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAC,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,YAAA,EAAAA,CAAA,KAAAA,YAAA;EAAAC,gCAAA,EAAAA,CAAA,KAAAA,gCAAA;EAAAC,0CAAA,EAAAA,CAAA,KAAAA,0CAAA;EAAAC,oCAAA,EAAAA,CAAA,KAAAA;AAAA;AAAA,IAAAC,kBAAA,GAAkB3F,OAAA;AAClB,IAAA4F,UAAA,GAAwE5F,OAAA;;;ACWjE,IAAMlD,6BAAA,GAAN,MAAkF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAuBjFuF,YAAmBD,IAAA,GAAqC,CAAC,GAAG;IAAzC,KAAAA,IAAA,GAAAA,IAAA;EAA0C;EAnCrE;IAYyFlC,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EA8BjF2F,SAASC,KAAA,EAAe;IAC9B,KAAK1D,IAAA,CAAK0D,KAAA,GAAQb,8BAAA,CAA+B9D,KAAA,CAAM2E,KAAK;IAC5D,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,SAASnF,KAAA,EAAe;IAC9B,KAAKwB,IAAA,CAAKxB,KAAA,GAAQqE,8BAAA,CAA+B9D,KAAA,CAAMP,KAAK;IAC5D,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO8C,eAAeC,WAAA,EAAqB;IAC1C,KAAKvB,IAAA,CAAKuB,WAAA,GAAcsB,8BAAA,CAA+B9D,KAAA,CAAMwC,WAAW;IACxE,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOqC,WAAWC,SAAA,GAAY,MAAM;IACnC,KAAK7D,IAAA,CAAK8D,OAAA,GAAUrB,gBAAA,CAAiB1D,KAAA,CAAM8E,SAAS;IACpD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOE,SAASC,KAAA,EAAiC;IAChD,KAAKhE,IAAA,CAAKgE,KAAA,GAAQrB,cAAA,CAAe5D,KAAA,CAAMiF,KAAK;IAC5C,OAAO;EACR;EAAA;AAAA;AAAA;EAKO7B,OAAA,EAA8B;IACpCkB,0CAAA,CAA2C,KAAKrD,IAAA,CAAK0D,KAAA,EAAO,KAAK1D,IAAA,CAAKxB,KAAK;IAE3E,OAAO;MACN,GAAG,KAAKwB;IACT;EACD;AACD;;;AD5FO,IAAMwC,iBAAA,GAAoBe,kBAAA,CAAAxF,CAAA,CAAEC,MAAA,CACjCC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,GAAG,EACzBC,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAMwG,cAAA,GAAiBY,kBAAA,CAAAxF,CAAA,CAC5BO,MAAA,CAAO;EACP2F,EAAA,EAAIV,kBAAA,CAAAxF,CAAA,CAAEC,MAAA;EACNO,IAAA,EAAMgF,kBAAA,CAAAxF,CAAA,CAAEC,MAAA;EACRkG,QAAA,EAAUX,kBAAA,CAAAxF,CAAA,CAAEK;AACb,CAAC,EACA+F,OAAA,CAAQC,MAAA,CAAOjG,oBAAA,CAAqBhC,mBAAmB;AAElD,IAAMuG,iBAAA,GAAoBa,kBAAA,CAAAxF,CAAA,CAAEK,OAAA;AAE5B,IAAMiE,oBAAA,GAAuBkB,kBAAA,CAAAxF,CAAA,CAAEC,MAAA,CACpCC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,EAAE,EACxBC,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAMmG,oBAAA,GAAuBiB,kBAAA,CAAAxF,CAAA,CAAEsG,UAAA,CAAWb,UAAA,CAAAc,WAAW;AAErD,IAAMpB,oBAAA,GAAuBK,kBAAA,CAAAxF,CAAA,CAAEC,MAAA,CAAOE,qBAAA,CAAsB,GAAG,EAAEC,oBAAA,CAAqBhC,mBAAmB;AACzG,IAAM2G,eAAA,GAAkBS,kBAAA,CAAAxF,CAAA,CAAEY,MAAA,CAAOW,GAAA,CACtCC,kBAAA,CAAmB,CAAC,EACpBX,eAAA,CAAgB,EAAE,EAClBT,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAM0G,8BAAA,GAAiCU,kBAAA,CAAAxF,CAAA,CAAEC,MAAA,CAC9CC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,GAAG,EACzBC,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAMyG,mBAAA,GAAsBW,kBAAA,CAAAxF,CAAA,CACjCO,MAAA,CAAO;EACPoF,KAAA,EAAOb,8BAAA;EACPrE,KAAA,EAAOqE,8BAAA;EACPtB,WAAA,EAAasB,8BAAA,CAA+BxE,QAAA;EAC5C2F,KAAA,EAAOrB,cAAA,CAAetE,QAAA;EACtByF,OAAA,EAASP,kBAAA,CAAAxF,CAAA,CAAEK,OAAA,CAAQC;AACpB,CAAC,EACAF,oBAAA,CAAqBhC,mBAAmB;AAEnC,IAAM4G,eAAA,GAAkBQ,kBAAA,CAAAxF,CAAA,CAAEwG,QAAA,CAAS7J,6BAA6B,EAAEyD,oBAAA,CAAqBhC,mBAAmB;AAE1G,IAAM8G,gBAAA,GAAmBF,eAAA,CAAgBrE,KAAA,CAC9CT,wBAAA,CAAyB,CAAC,EAC1BE,oBAAA,CAAqBhC,mBAAmB;AACnC,IAAM6G,sBAAA,GAAyBO,kBAAA,CAAAxF,CAAA,CAAEY,MAAA,CAAOW,GAAA,CAC7CC,kBAAA,CAAmB,CAAC,EACpBX,eAAA,CAAgB,EAAE,EAClBT,oBAAA,CAAqBhC,mBAAmB;AAEnC,SAASmH,qCAAqCxC,OAAA,EAA0C0D,QAAA,EAAmB;EACjHhC,iBAAA,CAAkBzD,KAAA,CAAMyF,QAAQ;EAChCvB,gBAAA,CAAiBlE,KAAA,CAAM+B,OAAO;AAC/B;AAHgBhD,MAAA,CAAAwF,oCAAA;AAKT,IAAMb,gBAAA,GAAmBc,kBAAA,CAAAxF,CAAA,CAAEK,OAAA;AAE3B,SAASiF,2CAA2CK,KAAA,EAAgBlF,KAAA,EAAgB;EAC1FqE,8BAAA,CAA+B9D,KAAA,CAAM2E,KAAK;EAC1Cb,8BAAA,CAA+B9D,KAAA,CAAMP,KAAK;AAC3C;AAHgBV,MAAA,CAAAuF,0CAAA;AAKT,IAAMd,qBAAA,GAAwBgB,kBAAA,CAAAxF,CAAA,CAAEsG,UAAA,CAAWb,UAAA,CAAAiB,WAAW,EAAE/F,KAAA,CAAMP,oBAAA,CAAqBhC,mBAAmB;AAEtG,IAAMgH,YAAA,GAAeI,kBAAA,CAAAxF,CAAA,CAAEC,MAAA,CAC5BkB,GAAA,CAAI;EACJC,gBAAA,EAAkB,CAAC,SAAS,UAAU,UAAU;AACjD,CAAC,EACAhB,oBAAA,CAAqBhC,mBAAmB;AAEnC,SAASiH,iCACfsB,KAAA,EACAhB,KAAA,EACAM,KAAA,EACAQ,QAAA,EACAtF,GAAA,EACC;EACD,IAAIA,GAAA,IAAOsF,QAAA,EAAU;IACpB,MAAM,IAAIG,UAAA,CAAW,0CAA0C;EAChE;EAEA,IAAI,CAACjB,KAAA,IAAS,CAACM,KAAA,EAAO;IACrB,MAAM,IAAIW,UAAA,CAAW,2CAA2C;EACjE;EAEA,IAAID,KAAA,KAAUlB,UAAA,CAAAc,WAAA,CAAYM,IAAA,EAAM;IAC/B,IAAI,CAAC1F,GAAA,EAAK;MACT,MAAM,IAAIyF,UAAA,CAAW,8BAA8B;IACpD;EACD,WAAWzF,GAAA,EAAK;IACf,MAAM,IAAIyF,UAAA,CAAW,oCAAoC;EAC1D;AACD;AAtBgB7G,MAAA,CAAAsF,gCAAA;;;AE5EhB,IAAAyB,YAAA,GAMOjH,OAAA;;;ACUA,IAAejE,gBAAA,GAAf,MAGP;EArBA;IAqBAmE,MAAA;EAAA;EAAA;AAAA;AAAA;EAIiBkC,IAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAgBTC,YAAYD,IAAA,EAAyB;IAC3C,KAAKA,IAAA,GAAOA,IAAA;EACb;AACD;;;AC5CA,IAAA8E,YAAA,GAAgFlH,OAAA;;;ACAhF,IAAAmH,WAAA,GAOOnH,OAAA;AAeA,IAAMrE,aAAA,GAAN,cAA4BI,gBAAA,CAAqC;EAtBxE;IAsBwEmE,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA6BhEmC,YAAYD,IAAA,EAAoC;IACtD,MAAM;MAAEgF,IAAA,EAAMD,WAAA,CAAAE,aAAA,CAAcC,MAAA;MAAQ,GAAGlF;IAAK,CAAC;EAC9C;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOmF,SAAST,KAAA,EAAoB;IACnC,KAAK1E,IAAA,CAAK0E,KAAA,GAAQpC,oBAAA,CAAqBvD,KAAA,CAAM2F,KAAK;IAClD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUOxC,OAAOhD,GAAA,EAAa;IACzB,KAAKc,IAAA,CAAmCd,GAAA,GAAMiE,YAAA,CAAapE,KAAA,CAAMG,GAAG;IACrE,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOkG,YAAYZ,QAAA,EAAkB;IACnC,KAAKxE,IAAA,CAAwCqF,SAAA,GAAY7C,iBAAA,CAAkBzD,KAAA,CAAMyF,QAAQ;IAC1F,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOT,SAASC,KAAA,EAAiC;IAChD,KAAKhE,IAAA,CAAKgE,KAAA,GAAQrB,cAAA,CAAe5D,KAAA,CAAMiF,KAAK;IAC5C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOsB,YAAYC,QAAA,GAAW,MAAM;IACnC,KAAKvF,IAAA,CAAKuF,QAAA,GAAW7C,iBAAA,CAAkB3D,KAAA,CAAMwG,QAAQ;IACrD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO9B,SAASC,KAAA,EAAe;IAC9B,KAAK1D,IAAA,CAAK0D,KAAA,GAAQrB,oBAAA,CAAqBtD,KAAA,CAAM2E,KAAK;IAClD,OAAO;EACR;EAAA;AAAA;AAAA;EAKOvB,OAAA,EAA6B;IACnCiB,gCAAA,CACC,KAAKpD,IAAA,CAAK0E,KAAA,EACV,KAAK1E,IAAA,CAAK0D,KAAA,EACV,KAAK1D,IAAA,CAAKgE,KAAA,EACT,KAAKhE,IAAA,CAAwCqF,SAAA,EAC7C,KAAKrF,IAAA,CAAmCd,GAC1C;IAEA,OAAO;MACN,GAAG,KAAKc;IACT;EACD;AACD;;;ACvIA,IAAAwF,WAAA,GAA8B5H,OAAA;;;ACQvB,IAAetE,qBAAA,GAAf,cAEGK,gBAAA,CAAiC;EAX3C;IAW2CmE,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAMnC2H,eAAeC,WAAA,EAAqB;IAC1C,KAAK1F,IAAA,CAAK0F,WAAA,GAAcxC,oBAAA,CAAqBnE,KAAA,CAAM2G,WAAW;IAC9D,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,aAAaC,SAAA,EAAmB;IACtC,KAAK5F,IAAA,CAAK6F,UAAA,GAAa/C,eAAA,CAAgB/D,KAAA,CAAM6G,SAAS;IACtD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOE,aAAaC,SAAA,EAAmB;IACtC,KAAK/F,IAAA,CAAKgG,UAAA,GAAalD,eAAA,CAAgB/D,KAAA,CAAMgH,SAAS;IACtD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOX,YAAYZ,QAAA,EAAkB;IACpC,KAAKxE,IAAA,CAAKqF,SAAA,GAAY7C,iBAAA,CAAkBzD,KAAA,CAAMyF,QAAQ;IACtD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOc,YAAYC,QAAA,GAAW,MAAM;IACnC,KAAKvF,IAAA,CAAKuF,QAAA,GAAW7C,iBAAA,CAAkB3D,KAAA,CAAMwG,QAAQ;IACrD,OAAO;EACR;EAAA;AAAA;AAAA;EAKOpD,OAAA,EAAyB;IAC/BK,iBAAA,CAAkBzD,KAAA,CAAM,KAAKiB,IAAA,CAAKqF,SAAS;IAC3C,OAAO;MACN,GAAG,KAAKrF;IACT;EACD;AACD;;;AD9DO,IAAMxG,wBAAA,GAAN,cAAuCF,qBAAA,CAAiD;EAT/F;IAS+FwE,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAwBvFmC,YAAYD,IAAA,EAA2C;IAC7D,MAAM;MAAE,GAAGA,IAAA;MAAMgF,IAAA,EAAMQ,WAAA,CAAAP,aAAA,CAAcgB;IAAc,CAAC;EACrD;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,gBAAA,GAAmBC,KAAA,EAAiC;IAC1D,MAAMC,eAAA,GAAkBhK,cAAA,CAAe+J,KAAK;IAC5C,KAAKnG,IAAA,CAAKqG,aAAA,KAAkB,EAAC;IAC7B,KAAKrG,IAAA,CAAKqG,aAAA,CAAc9F,IAAA,CAAK,GAAGgC,qBAAA,CAAsBxD,KAAA,CAAMqH,eAAe,CAAC;IAC5E,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOE,gBAAA,GAAmBH,KAAA,EAAiC;IAC1D,MAAMC,eAAA,GAAkBhK,cAAA,CAAe+J,KAAK;IAC5C,KAAKnG,IAAA,CAAKqG,aAAA,KAAkB,EAAC;IAC7B,KAAKrG,IAAA,CAAKqG,aAAA,CAAc1F,MAAA,CAAO,GAAG,KAAKX,IAAA,CAAKqG,aAAA,CAAcrH,MAAA,EAAQ,GAAGuD,qBAAA,CAAsBxD,KAAA,CAAMqH,eAAe,CAAC;IACjH,OAAO;EACR;EAAA;AAAA;AAAA;EAKgBjE,OAAA,EAAoC;IACnDK,iBAAA,CAAkBzD,KAAA,CAAM,KAAKiB,IAAA,CAAKqF,SAAS;IAE3C,OAAO;MACN,GAAG,KAAKrF;IACT;EACD;AACD;;;AEtEA,IAAAuG,WAAA,GAA8B3I,OAAA;AAMvB,IAAM1D,4BAAA,GAAN,cAA2CZ,qBAAA,CAAqD;EAPvG;IAOuGwE,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAuB/FmC,YAAYD,IAAA,EAA+C;IACjE,MAAM;MAAE,GAAGA,IAAA;MAAMgF,IAAA,EAAMuB,WAAA,CAAAtB,aAAA,CAAcuB;IAAkB,CAAC;EACzD;AACD;;;AChCA,IAAAC,WAAA,GAA8B7I,OAAA;AAMvB,IAAMtD,qBAAA,GAAN,cAAoChB,qBAAA,CAA8C;EAPzF;IAOyFwE,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAuBjFmC,YAAYD,IAAA,EAAwC;IAC1D,MAAM;MAAE,GAAGA,IAAA;MAAMgF,IAAA,EAAMyB,WAAA,CAAAxB,aAAA,CAAcyB;IAAW,CAAC;EAClD;AACD;;;ACjCA,IAAAC,WAAA,GAA8B/I,OAAA;AAUvB,IAAMpD,uBAAA,GAAN,cAAsClB,qBAAA,CAAgD;EAV7F;IAU6FwE,MAAA;EAAA;EAAA;AAAA;AAAA;EAI5EgD,OAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAiCTb,YAAYD,IAAA,EAA0C;IAC5D,MAAM;MAAEc,OAAA;MAAS,GAAG8F;IAAS,IAAI5G,IAAA,IAAQ,CAAC;IAC1C,MAAM;MAAE,GAAG4G,QAAA;MAAU5B,IAAA,EAAM2B,WAAA,CAAA1B,aAAA,CAAc4B;IAAa,CAAC;IACvD,KAAK/F,OAAA,GAAUA,OAAA,EAASgG,GAAA,CAAKC,MAAA,IAAgC,IAAIrM,6BAAA,CAA8BqM,MAAM,CAAC,KAAK,EAAC;EAC7G;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,WAAA,GAAclG,OAAA,EAA2E;IAC/F,MAAMmG,iBAAA,GAAoB7K,cAAA,CAAe0E,OAAO;IAChDkC,sBAAA,CAAuBjE,KAAA,CAAM,KAAK+B,OAAA,CAAQ9B,MAAA,GAASiI,iBAAA,CAAkBjI,MAAM;IAC3E,KAAK8B,OAAA,CAAQP,IAAA,CACZ,GAAG0G,iBAAA,CAAkBH,GAAA,CAAKI,gBAAA,IACzBA,gBAAA,YAA4BxM,6BAAA,GACzBwM,gBAAA,GACA,IAAIxM,6BAAA,CAA8BkI,mBAAA,CAAoB7D,KAAA,CAAMmI,gBAAgB,CAAC,CACjF,CACD;IACA,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,WAAA,GAAcrG,OAAA,EAA2E;IAC/F,OAAO,KAAKsG,aAAA,CAAc,GAAG,KAAKtG,OAAA,CAAQ9B,MAAA,EAAQ,GAAG8B,OAAO;EAC7D;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA6BOsG,cACN3G,KAAA,EACAC,WAAA,KACGI,OAAA,EACF;IACD,MAAMmG,iBAAA,GAAoB7K,cAAA,CAAe0E,OAAO;IAEhD,MAAMuG,KAAA,GAAQ,CAAC,GAAG,KAAKvG,OAAO;IAE9BuG,KAAA,CAAM1G,MAAA,CACLF,KAAA,EACAC,WAAA,EACA,GAAGuG,iBAAA,CAAkBH,GAAA,CAAKI,gBAAA,IACzBA,gBAAA,YAA4BxM,6BAAA,GACzBwM,gBAAA,GACA,IAAIxM,6BAAA,CAA8BkI,mBAAA,CAAoB7D,KAAA,CAAMmI,gBAAgB,CAAC,CACjF,CACD;IAEAlE,sBAAA,CAAuBjE,KAAA,CAAMsI,KAAA,CAAMrI,MAAM;IACzC,KAAK8B,OAAA,CAAQH,MAAA,CAAO,GAAG,KAAKG,OAAA,CAAQ9B,MAAA,EAAQ,GAAGqI,KAAK;IACpD,OAAO;EACR;EAAA;AAAA;AAAA;EAKgBlF,OAAA,EAAmC;IAClDmB,oCAAA,CAAqC,KAAKxC,OAAA,EAAS,KAAKd,IAAA,CAAKqF,SAAS;IAEtE,OAAO;MACN,GAAG,KAAKrF,IAAA;MACRc,OAAA,EAAS,KAAKA,OAAA,CAAQgG,GAAA,CAAKC,MAAA,IAAWA,MAAA,CAAO5E,MAAA,CAAO,CAAC;IACtD;EACD;AACD;;;AC7IA,IAAAmF,WAAA,GAA8B1J,OAAA;AAMvB,IAAM9B,qBAAA,GAAN,cAAoCxC,qBAAA,CAA8C;EAPzF;IAOyFwE,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAuBjFmC,YAAYD,IAAA,EAAwC;IAC1D,MAAM;MAAE,GAAGA,IAAA;MAAMgF,IAAA,EAAMsC,WAAA,CAAArC,aAAA,CAAcsC;IAAW,CAAC;EAClD;AACD;;;ACjCA,IAAAC,WAAA,GAAoE5J,OAAA;AACpE,IAAA6J,WAAA,GAA+E7J,OAAA;AAC/E,IAAA8J,sBAAA,GAAoBC,OAAA,CAAA/J,OAAA;;;ACFpB,IAAAhC,mBAAA;AAAA5C,QAAA,CAAA4C,mBAAA;EAAAgM,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAC,kBAAA,EAAAA,CAAA,KAAAA,kBAAA;EAAAC,kBAAA,EAAAA,CAAA,KAAAA,kBAAA;EAAA5E,oBAAA,EAAAA,CAAA,KAAA6E,qBAAA;EAAAC,iBAAA,EAAAA,CAAA,KAAAA,iBAAA;EAAAC,uBAAA,EAAAA,CAAA,KAAAA,uBAAA;EAAAC,0BAAA,EAAAA,CAAA,KAAAA,0BAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA;AAAA;AAAA,IAAAC,kBAAA,GAAkBxK,OAAA;AAClB,IAAAyK,WAAA,GAA+BzK,OAAA;AAIxB,IAAMqK,uBAAA,GAA0BG,kBAAA,CAAArK,CAAA,CAAEsG,UAAA,CAAWgE,WAAA,CAAAC,cAAc;AAC3D,IAAMR,kBAAA,GAAqBM,kBAAA,CAAArK,CAAA,CAAEY,MAAA,CAAOW,GAAA,CACzCC,kBAAA,CAAmB,CAAC,EACpBX,eAAA,CAAgB,GAAK,EACrBT,oBAAA,CAAqBhC,mBAAmB;AACnC,IAAM0L,kBAAA,GAAqBO,kBAAA,CAAArK,CAAA,CAAEY,MAAA,CAAOW,GAAA,CACzCC,kBAAA,CAAmB,CAAC,EACpBX,eAAA,CAAgB,GAAK,EACrBT,oBAAA,CAAqBhC,mBAAmB;AACnC,IAAM6L,iBAAA,GAAoBI,kBAAA,CAAArK,CAAA,CAAEK,OAAA;AAC5B,IAAM+J,cAAA,GAAiBC,kBAAA,CAAArK,CAAA,CAAEC,MAAA,CAAOE,qBAAA,CAAsB,GAAK,EAAEC,oBAAA,CAAqBhC,mBAAmB;AACrG,IAAM4L,qBAAA,GAAuBK,kBAAA,CAAArK,CAAA,CAAEC,MAAA,CAAOE,qBAAA,CAAsB,GAAG,EAAEC,oBAAA,CAAqBhC,mBAAmB;AACzG,IAAMyL,cAAA,GAAiBQ,kBAAA,CAAArK,CAAA,CAAEC,MAAA,CAC9BC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,EAAE,EACxBC,oBAAA,CAAqBhC,mBAAmB;AAEnC,SAAS+L,2BAA2B1D,QAAA,EAAmBE,KAAA,EAAwBhB,KAAA,EAAgB;EACrGlB,iBAAA,CAAkBzD,KAAA,CAAMyF,QAAQ;EAChCyD,uBAAA,CAAwBlJ,KAAA,CAAM2F,KAAK;EACnCkD,cAAA,CAAe7I,KAAA,CAAM2E,KAAK;AAC3B;AAJgB5F,MAAA,CAAAoK,0BAAA;;;ADHT,IAAMrM,gBAAA,GAAN,cACElC,gBAAA,CAET;EAtBA;IAsBAmE,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAwBQmC,YAAYD,IAAA,EAAmE;IACrF,MAAM;MAAEgF,IAAA,EAAMyC,WAAA,CAAAxC,aAAA,CAAcsD,SAAA;MAAW,GAAGvI;IAAK,CAAC;EACjD;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOoF,YAAYZ,QAAA,EAAkB;IACpC,KAAKxE,IAAA,CAAKqF,SAAA,GAAY7C,iBAAA,CAAkBzD,KAAA,CAAMyF,QAAQ;IACtD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOf,SAASC,KAAA,EAAe;IAC9B,KAAK1D,IAAA,CAAK0D,KAAA,GAAQkE,cAAA,CAAe7I,KAAA,CAAM2E,KAAK;IAC5C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOyB,SAAST,KAAA,EAAuB;IACtC,KAAK1E,IAAA,CAAK0E,KAAA,GAAQuD,uBAAA,CAAwBlJ,KAAA,CAAM2F,KAAK;IACrD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO8D,aAAaC,SAAA,EAAmB;IACtC,KAAKzI,IAAA,CAAK0I,UAAA,GAAaZ,kBAAA,CAAmB/I,KAAA,CAAM0J,SAAS;IACzD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOE,aAAaC,SAAA,EAAmB;IACtC,KAAK5I,IAAA,CAAK6I,UAAA,GAAahB,kBAAA,CAAmB9I,KAAA,CAAM6J,SAAS;IACzD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOnD,eAAeC,WAAA,EAAqB;IAC1C,KAAK1F,IAAA,CAAK0F,WAAA,GAAcqC,qBAAA,CAAqBhJ,KAAA,CAAM2G,WAAW;IAC9D,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO/B,SAASnF,KAAA,EAAe;IAC9B,KAAKwB,IAAA,CAAKxB,KAAA,GAAQ2J,cAAA,CAAepJ,KAAA,CAAMP,KAAK;IAC5C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOsK,YAAYC,QAAA,GAAW,MAAM;IACnC,KAAK/I,IAAA,CAAK+I,QAAA,GAAWf,iBAAA,CAAkBjJ,KAAA,CAAMgK,QAAQ;IACrD,OAAO;EACR;EAAA;AAAA;AAAA;EAKO5G,OAAA,EAAgC;IACtC+F,0BAAA,CAA2B,KAAKlI,IAAA,CAAKqF,SAAA,EAAW,KAAKrF,IAAA,CAAK0E,KAAA,EAAO,KAAK1E,IAAA,CAAK0D,KAAK;IAEhF,OAAO;MACN,GAAG,KAAK1D;IACT;EACD;EAAA;AAAA;AAAA;EAKOgJ,OAAOC,KAAA,EAA8E;IAC3F,QAAIzB,WAAA,CAAA0B,eAAA,EAAgBD,KAAK,GAAG;MAC3B,WAAOvB,sBAAA,CAAA5D,OAAA,EAAQmF,KAAA,CAAM9G,MAAA,CAAO,GAAG,KAAKnC,IAAI;IACzC;IAEA,WAAO0H,sBAAA,CAAA5D,OAAA,EAAQmF,KAAA,EAAO,KAAKjJ,IAAI;EAChC;AACD;;;AR9EO,SAASjE,uBACfiE,IAAA,EACmB;EACnB,IAAIA,IAAA,YAAgBrG,gBAAA,EAAkB;IACrC,OAAOqG,IAAA;EACR;EAEA,QAAQA,IAAA,CAAKgF,IAAA;IACZ,KAAKF,YAAA,CAAAG,aAAA,CAAckE,SAAA;MAClB,OAAO,IAAIlQ,gBAAA,CAAiB+G,IAAI;IACjC,KAAK8E,YAAA,CAAAG,aAAA,CAAcC,MAAA;MAClB,OAAO,IAAI3L,aAAA,CAAcyG,IAAI;IAC9B,KAAK8E,YAAA,CAAAG,aAAA,CAAc4B,YAAA;MAClB,OAAO,IAAIrM,uBAAA,CAAwBwF,IAAI;IACxC,KAAK8E,YAAA,CAAAG,aAAA,CAAcsD,SAAA;MAClB,OAAO,IAAI1M,gBAAA,CAAiBmE,IAAI;IACjC,KAAK8E,YAAA,CAAAG,aAAA,CAAcsC,UAAA;MAClB,OAAO,IAAIzL,qBAAA,CAAsBkE,IAAI;IACtC,KAAK8E,YAAA,CAAAG,aAAA,CAAcyB,UAAA;MAClB,OAAO,IAAIpM,qBAAA,CAAsB0F,IAAI;IACtC,KAAK8E,YAAA,CAAAG,aAAA,CAAcuB,iBAAA;MAClB,OAAO,IAAItM,4BAAA,CAA6B8F,IAAI;IAC7C,KAAK8E,YAAA,CAAAG,aAAA,CAAcgB,aAAA;MAClB,OAAO,IAAIzM,wBAAA,CAAyBwG,IAAI;IACzC;MAEC,MAAM,IAAIoJ,KAAA,CAAM,6CAA6CpJ,IAAA,CAAKgF,IAAI,EAAE;EAC1E;AACD;AA5BgBlH,MAAA,CAAA/B,sBAAA;;;AFfT,IAAM9C,gBAAA,GAAN,cAA8DU,gBAAA,CAEnE;EA5DF;IA4DEmE,MAAA;EAAA;EAAA;AAAA;AAAA;EAIeuL,UAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAoCTpJ,YAAY;IAAEoJ,UAAA;IAAY,GAAGrJ;EAAK,IAAgE,CAAC,GAAG;IAC5G,MAAM;MAAEgF,IAAA,EAAMH,YAAA,CAAAI,aAAA,CAAckE,SAAA;MAAW,GAAGnJ;IAAK,CAAC;IAChD,KAAKqJ,UAAA,GAAcA,UAAA,EAAYvC,GAAA,CAAKwC,SAAA,IAAcvN,sBAAA,CAAuBuN,SAAS,CAAC,KAAK,EAAC;EAC1F;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,cAAA,GAAiBF,UAAA,EAA4B;IACnD,KAAKA,UAAA,CAAW9I,IAAA,CAAK,GAAGnE,cAAA,CAAeiN,UAAU,CAAC;IAClD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOG,cAAA,GAAiBH,UAAA,EAA4B;IACnD,KAAKA,UAAA,CAAW1I,MAAA,CAAO,GAAG,KAAK0I,UAAA,CAAWrK,MAAA,EAAQ,GAAG5C,cAAA,CAAeiN,UAAU,CAAC;IAC/E,OAAO;EACR;EAAA;AAAA;AAAA;EAKOlH,OAAA,EAAyD;IAC/D,OAAO;MACN,GAAG,KAAKnC,IAAA;MACRqJ,UAAA,EAAY,KAAKA,UAAA,CAAWvC,GAAA,CAAKwC,SAAA,IAAcA,SAAA,CAAUnH,MAAA,CAAO,CAAC;IAClE;EACD;AACD;;;AYtIA,IAAA/H,mBAAA;AAAApB,QAAA,CAAAoB,mBAAA;EAAAqP,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAxB,0BAAA,EAAAA,CAAA,KAAAyB;AAAA;AAAA,IAAAC,kBAAA,GAAkBhM,OAAA;AAKX,IAAM8L,cAAA,GAAiBE,kBAAA,CAAA7L,CAAA,CAAEC,MAAA,CAC9BC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,EAAE,EACxBC,oBAAA,CAAqBhC,mBAAmB;AACnC,IAAMsN,mBAAA,GAAsBG,kBAAA,CAAA7L,CAAA,CACjCwG,QAAA,CAAStL,gBAAgB,EACzByF,KAAA,CAAMT,wBAAA,CAAyB,CAAC,EAChCE,oBAAA,CAAqBhC,mBAAmB;AAEnC,SAASwN,4BACfnF,QAAA,EACAvC,KAAA,EACAoH,UAAA,EACC;EACD7G,iBAAA,CAAkBzD,KAAA,CAAMyF,QAAQ;EAChCkF,cAAA,CAAe3K,KAAA,CAAMkD,KAAK;EAC1BwH,mBAAA,CAAoB1K,KAAA,CAAMsK,UAAU;AACrC;AARgBvL,MAAA,CAAA6L,2BAAA;;;ACGT,IAAMtP,YAAA,GAAN,MAAqF;EAjB5F;IAiB4FyD,MAAA;EAAA;EAAA;AAAA;AAAA;EAI3EkC,IAAA;EAAA;AAAA;AAAA;EAKAqJ,UAAA,GAAiE,EAAC;EAAA;AAAA;AAAA;AAAA;AAAA;EAO3EpJ,YAAY;IAAEoJ,UAAA;IAAY,GAAGrJ;EAAK,IAAsD,CAAC,GAAG;IAClG,KAAKA,IAAA,GAAO;MAAE,GAAGA;IAAK;IACtB,KAAKqJ,UAAA,GAAcA,UAAA,EAAYvC,GAAA,CAAKwC,SAAA,IAAcvN,sBAAA,CAAuBuN,SAAS,CAAC,KAClF,EAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOtH,SAASC,KAAA,EAAe;IAC9B,KAAKjC,IAAA,CAAKiC,KAAA,GAAQyH,cAAA,CAAe3K,KAAA,CAAMkD,KAAK;IAC5C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOmD,YAAYZ,QAAA,EAAkB;IACpC,KAAKxE,IAAA,CAAKqF,SAAA,GAAY7C,iBAAA,CAAkBzD,KAAA,CAAMyF,QAAQ;IACtD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO+E,cAAA,GACHF,UAAA,EAGF;IACD,KAAKA,UAAA,CAAW9I,IAAA,CACf,GAAGnE,cAAA,CAAeiN,UAAU,EAAEvC,GAAA,CAAKwC,SAAA,IAClCA,SAAA,YAAqBrQ,gBAAA,GAClBqQ,SAAA,GACA,IAAIrQ,gBAAA,CAAiDqQ,SAAS,CAClE,CACD;IACA,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOE,cAAA,GAAiBH,UAAA,EAA2E;IAClG,KAAKA,UAAA,CAAW1I,MAAA,CAAO,GAAG,KAAK0I,UAAA,CAAWrK,MAAA,EAAQ,GAAG5C,cAAA,CAAeiN,UAAU,CAAC;IAC/E,OAAO;EACR;EAAA;AAAA;AAAA;EAKOlH,OAAA,EAAkD;IACxDwH,2BAAA,CAA2B,KAAK3J,IAAA,CAAKqF,SAAA,EAAW,KAAKrF,IAAA,CAAKiC,KAAA,EAAO,KAAKoH,UAAU;IAEhF,OAAO;MACN,GAAG,KAAKrJ,IAAA;MACRqJ,UAAA,EAAY,KAAKA,UAAA,CAAWvC,GAAA,CAAKwC,SAAA,IAAcA,SAAA,CAAUnH,MAAA,CAAO,CAAC;IAClE;EACD;AACD;;;ACpGA,IAAArH,mBAAA;AAAA9B,QAAA,CAAA8B,mBAAA;EAAA+O,qBAAA,EAAAA,CAAA,KAAAA,qBAAA;EAAAC,wBAAA,EAAAA,CAAA,KAAAA,wBAAA;EAAAC,qBAAA,EAAAA,CAAA,KAAAA,qBAAA;EAAAC,oBAAA,EAAAA,CAAA,KAAAA,oBAAA;EAAAC,gCAAA,EAAAA,CAAA,KAAAA,gCAAA;EAAAC,yBAAA,EAAAA,CAAA,KAAAA,yBAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAC,uBAAA,EAAAA,CAAA,KAAAA,uBAAA;EAAAC,wBAAA,EAAAA,CAAA,KAAAA,wBAAA;EAAAC,YAAA,EAAAA,CAAA,KAAAA,YAAA;EAAAC,YAAA,EAAAA,CAAA,KAAAA,YAAA;EAAAC,gBAAA,EAAAA,CAAA,KAAAA,gBAAA;EAAAvC,0BAAA,EAAAA,CAAA,KAAAwC;AAAA;AAAA,IAAAC,kBAAA,GAAkB/M,OAAA;AAClB,IAAAgN,YAAA,GAAqFhN,OAAA;AAMrF,IAAMiN,aAAA,GAAgBF,kBAAA,CAAA5M,CAAA,CAAEC,MAAA,CACtBC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,EAAE,EACxB4M,KAAA,CAAM,6DAA6D,EACnE3M,oBAAA,CAAqBhC,mBAAmB;AAEnC,SAASqO,aAAajM,IAAA,EAAuC;EACnEsM,aAAA,CAAc9L,KAAA,CAAMR,IAAI;AACzB;AAFgBT,MAAA,CAAA0M,YAAA;AAIhB,IAAMO,qBAAA,GAAuBJ,kBAAA,CAAA5M,CAAA,CAAEC,MAAA,CAC7BC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,GAAG,EACzBC,oBAAA,CAAqBhC,mBAAmB;AAC1C,IAAM6O,eAAA,GAAkBL,kBAAA,CAAA5M,CAAA,CAAEsG,UAAA,CAAWuG,YAAA,CAAAK,MAAM;AAEpC,SAASd,oBAAoB5I,WAAA,EAAqD;EACxFwJ,qBAAA,CAAqBhM,KAAA,CAAMwC,WAAW;AACvC;AAFgBzD,MAAA,CAAAqM,mBAAA;AAIhB,IAAMe,uBAAA,GAA0BP,kBAAA,CAAA5M,CAAA,CAAEoN,OAAA,CAAQzM,KAAA,CAAMR,qBAAA,CAAsB,EAAE,EAAEC,oBAAA,CAAqBhC,mBAAmB;AAC3G,SAASiO,eAAegB,MAAA,EAAiB;EAC/C,OAAOJ,eAAA,CAAgBjM,KAAA,CAAMqM,MAAM;AACpC;AAFgBtN,MAAA,CAAAsM,cAAA;AAIT,SAASE,yBAAyBxJ,OAAA,EAAuE;EAC/GoK,uBAAA,CAAwBnM,KAAA,CAAM+B,OAAO;AACtC;AAFgBhD,MAAA,CAAAwM,wBAAA;AAIT,SAASI,4BACfnM,IAAA,EACAgD,WAAA,EACAT,OAAA,EACC;EAED0J,YAAA,CAAajM,IAAI;EAGjB4L,mBAAA,CAAoB5I,WAAW;EAG/B+I,wBAAA,CAAyBxJ,OAAO;AACjC;AAbgBhD,MAAA,CAAA4M,2BAAA;AAehB,IAAMW,gBAAA,GAAmBV,kBAAA,CAAA5M,CAAA,CAAEK,OAAA;AAEpB,SAAS8L,0BAA0B1L,KAAA,EAA0C;EACnF6M,gBAAA,CAAiBtM,KAAA,CAAMP,KAAK;AAC7B;AAFgBV,MAAA,CAAAoM,yBAAA;AAIT,SAASO,iBAAiB1B,QAAA,EAAgD;EAChFsC,gBAAA,CAAiBtM,KAAA,CAAMgK,QAAQ;AAChC;AAFgBjL,MAAA,CAAA2M,gBAAA;AAIhB,IAAMa,sBAAA,GAAyBX,kBAAA,CAAA5M,CAAA,CAAEY,MAAA,CAAOC,eAAA,CAAgB,EAAE,EAAET,oBAAA,CAAqBhC,mBAAmB;AAE7F,SAAS4N,sBAAsBlL,YAAA,EAAsB0M,OAAA,EAAqD;EAChHD,sBAAA,CAAuBvM,KAAA,EAAOwM,OAAA,EAASvM,MAAA,IAAU,KAAKH,YAAY;AACnE;AAFgBf,MAAA,CAAAiM,qBAAA;AAIT,SAASF,sBAEd2B,KAAA,EAAgBC,kBAAA,EAAqD;EACtEd,kBAAA,CAAA5M,CAAA,CAAEwG,QAAA,CAASkH,kBAAkB,EAAE1M,KAAA,CAAMyM,KAAK;AAC3C;AAJgB1N,MAAA,CAAA+L,qBAAA;AAMT,IAAMC,wBAAA,GAA2Ba,kBAAA,CAAA5M,CAAA,CACtCO,MAAA,CAAwBoN,MAAA,CAAOC,WAAA,CAAYD,MAAA,CAAOE,MAAA,CAAOhB,YAAA,CAAAK,MAAM,EAAEnE,GAAA,CAAKsE,MAAA,IAAW,CAACA,MAAA,EAAQT,kBAAA,CAAA5M,CAAA,CAAEC,MAAA,CAAOoB,OAAO,CAAC,CAAC,CAAC,EAC7GgF,MAAA,CAAOhF,OAAA,CAAQjB,oBAAA,CAAqBhC,mBAAmB;AAElD,SAASkO,wBAAwB7L,KAAA,EAAkD;EACzFsL,wBAAA,CAAyB/K,KAAA,CAAMP,KAAK;AACrC;AAFgBV,MAAA,CAAAuM,uBAAA;AAIhB,IAAMwB,qBAAA,GAAwBlB,kBAAA,CAAA5M,CAAA,CAAEK,OAAA,CAAQgB,OAAA;AAEjC,SAAS4K,qBAAqBxL,KAAA,EAA6D;EACjGqN,qBAAA,CAAsB9M,KAAA,CAAMP,KAAK;AAClC;AAFgBV,MAAA,CAAAkM,oBAAA;AAIhB,IAAM8B,yBAAA,GAA4BnB,kBAAA,CAAA5M,CAAA,CAAE4B,KAAA,CACnCgL,kBAAA,CAAA5M,CAAA,CAAEgO,MAAA,CAAOC,SAAA,CAAWxN,KAAA,IAAUA,KAAA,CAAMyN,QAAA,CAAS,CAAC,GAC9CtB,kBAAA,CAAA5M,CAAA,CAAEY,MAAA,CAAOuN,OAAA,CAAQF,SAAA,CAAWxN,KAAA,IAAUA,KAAA,CAAMyN,QAAA,CAAS,CAAC,GACtDtB,kBAAA,CAAA5M,CAAA,CAAEC,MAAA,CAAO8M,KAAA,CAAM,OAAO,CACvB,EAAE1L,OAAA;AAEK,SAAS6K,iCAAiCkC,WAAA,EAAsB;EACtE,OAAOL,yBAAA,CAA0B/M,KAAA,CAAMoN,WAAW;AACnD;AAFgBrO,MAAA,CAAAmM,gCAAA;AAIT,SAASM,aAAa/L,KAAA,EAA0C;EACtE6M,gBAAA,CAAiBtM,KAAA,CAAMP,KAAK;AAC7B;AAFgBV,MAAA,CAAAyM,YAAA;;;AC3FhB,IAAA6B,gBAAA,GAAoBxO,OAAA;;;ACNpB,IAAAyO,YAAA,GAIOzO,OAAA;AACP,IAAA0O,gBAAA,GAAoB1O,OAAA;;;ACCb,IAAMjD,wBAAA,GAAN,MAA+B;EANtC;IAMsCmD,MAAA;EAAA;EAAA;AAAA;AAAA;EAIrBS,IAAA;EAAA;AAAA;AAAA;EAKAgO,kBAAA;EAAA;AAAA;AAAA;EAKAhL,WAAA;EAAA;AAAA;AAAA;EAKAiL,yBAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAOTC,QAAQlO,IAAA,EAAoB;IAElCiM,YAAA,CAAajM,IAAI;IAEjBmO,OAAA,CAAQC,GAAA,CAAI,MAAM,QAAQpO,IAAI;IAE9B,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO+C,eAAeC,WAAA,EAAqB;IAE1C4I,mBAAA,CAAoB5I,WAAW;IAE/BmL,OAAA,CAAQC,GAAA,CAAI,MAAM,eAAepL,WAAW;IAE5C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQOqL,oBAAoBxB,MAAA,EAAsByB,aAAA,EAA8B;IAC9E,IAAI,CAAC,KAAKN,kBAAA,EAAoB;MAC7BG,OAAA,CAAQC,GAAA,CAAI,MAAM,sBAAsB,CAAC,CAAC;IAC3C;IAEA,MAAMG,YAAA,GAAe1C,cAAA,CAAegB,MAAM;IAE1C,IAAIyB,aAAA,KAAkB,MAAM;MAC3B,KAAKN,kBAAA,CAAoBO,YAAY,IAAI;MACzC,OAAO;IACR;IAEAtC,YAAA,CAAaqC,aAAa;IAE1B,KAAKN,kBAAA,CAAoBO,YAAY,IAAID,aAAA;IACzC,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOE,qBAAqBC,cAAA,EAAwC;IACnE,IAAIA,cAAA,KAAmB,MAAM;MAC5BN,OAAA,CAAQC,GAAA,CAAI,MAAM,sBAAsB,IAAI;MAC5C,OAAO;IACR;IAEAD,OAAA,CAAQC,GAAA,CAAI,MAAM,sBAAsB,CAAC,CAAC;IAE1C,WAAWM,IAAA,IAAQvB,MAAA,CAAOwB,OAAA,CAAQF,cAAc,GAAG;MAClD,KAAKJ,mBAAA,CAAoB,GAAIK,IAAsC;IACpE;IAEA,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQOE,2BAA2B/B,MAAA,EAAsBgC,oBAAA,EAAqC;IAC5F,IAAI,CAAC,KAAKZ,yBAAA,EAA2B;MACpCE,OAAA,CAAQC,GAAA,CAAI,MAAM,6BAA6B,CAAC,CAAC;IAClD;IAEA,MAAMG,YAAA,GAAe1C,cAAA,CAAegB,MAAM;IAE1C,IAAIgC,oBAAA,KAAyB,MAAM;MAClC,KAAKZ,yBAAA,CAA2BM,YAAY,IAAI;MAChD,OAAO;IACR;IAEA3C,mBAAA,CAAoBiD,oBAAoB;IAExC,KAAKZ,yBAAA,CAA2BM,YAAY,IAAIM,oBAAA;IAChD,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,4BAA4BC,qBAAA,EAA+C;IACjF,IAAIA,qBAAA,KAA0B,MAAM;MACnCZ,OAAA,CAAQC,GAAA,CAAI,MAAM,6BAA6B,IAAI;MACnD,OAAO;IACR;IAEAD,OAAA,CAAQC,GAAA,CAAI,MAAM,6BAA6B,CAAC,CAAC;IACjD,WAAWM,IAAA,IAAQvB,MAAA,CAAOwB,OAAA,CAAQI,qBAAqB,GAAG;MACzD,KAAKH,0BAAA,CAA2B,GAAIF,IAAsC;IAC3E;IAEA,OAAO;EACR;AACD;;;AC7IA,IAAAM,YAAA,GAAyF3P,OAAA;;;ACOlF,IAAezE,4BAAA,GAAf,cAAoDwB,wBAAA,CAAyB;EAPpF;IAOoFmD,MAAA;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAWnEiL,QAAA,GAAoB;EAAA;AAAA;AAAA;AAAA;AAAA;EAO7BD,YAAYC,QAAA,EAAmB;IAErC0B,gBAAA,CAAiB1B,QAAQ;IAEzB2D,OAAA,CAAQC,GAAA,CAAI,MAAM,YAAY5D,QAAQ;IAEtC,OAAO;EACR;EAAA;AAAA;AAAA;EAcUyE,uBAAA,EAAyB;IAClC9C,2BAAA,CAA2B,KAAKnM,IAAA,EAAM,KAAKgD,WAAA,EAAa,EAAE;IAG1D8I,uBAAA,CAAwB,KAAKkC,kBAAkB;IAC/ClC,uBAAA,CAAwB,KAAKmC,yBAAyB;IAGtD/B,gBAAA,CAAiB,KAAK1B,QAAQ;EAC/B;AACD;;;ADlDO,IAAMhO,4BAAA,GAAN,cAA2C5B,4BAAA,CAA6B;EAN/E;IAM+E2E,MAAA;EAAA;EAAA;AAAA;AAAA;EAIrDkH,IAAA,GAAOuI,YAAA,CAAAE,4BAAA,CAA6BC,UAAA;EAAA;AAAA;AAAA;EAKtDvL,OAAA,EAAgD;IACtD,KAAKqL,sBAAA,CAAuB;IAE5B,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;;;AEpBA,IAAAG,YAAA,GAAsF/P,OAAA;AAM/E,IAAM5C,yBAAA,GAAN,cAAwC7B,4BAAA,CAA6B;EAN5E;IAM4E2E,MAAA;EAAA;EAAA;AAAA;AAAA;EAI3DkH,IAAA,GAAO2I,YAAA,CAAAF,4BAAA,CAA6BG,OAAA;EAAA;AAAA;AAAA;EAK7CzL,OAAA,EAA6C;IACnD,KAAKqL,sBAAA,CAAuB;IAE5B,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;;;ACpBA,IAAAK,YAAA,GAAsFjQ,OAAA;AACtF,IAAAkQ,eAAA,GAAoBlQ,OAAA;;;ACDpB,IAAAmQ,kBAAA,GAAkBnQ,OAAA;AAClB,IAAAoQ,YAAA,GAA4BpQ,OAAA;AAQ5B,IAAMqQ,mBAAA,GAAsB,CAC3BD,YAAA,CAAAvJ,WAAA,CAAYyJ,SAAA,EACZF,YAAA,CAAAvJ,WAAA,CAAY0J,UAAA,EACZH,YAAA,CAAAvJ,WAAA,CAAY2J,aAAA,EACZJ,YAAA,CAAAvJ,WAAA,CAAY4J,iBAAA,EACZL,YAAA,CAAAvJ,WAAA,CAAY6J,kBAAA,EACZN,YAAA,CAAAvJ,WAAA,CAAY8J,YAAA,EACZP,YAAA,CAAAvJ,WAAA,CAAY+J,aAAA,EACZR,YAAA,CAAAvJ,WAAA,CAAYgK,eAAA,EACZT,YAAA,CAAAvJ,WAAA,CAAYiK,UAAA,CACb;AAOA,IAAMC,qBAAA,GAAwBZ,kBAAA,CAAAhQ,CAAA,CAAEW,KAAA,CAAMqP,kBAAA,CAAAhQ,CAAA,CAAE4B,KAAA,CAAM,GAAGsO,mBAAA,CAAoBnH,GAAA,CAAK9B,IAAA,IAAS+I,kBAAA,CAAAhQ,CAAA,CAAE6Q,OAAA,CAAQ5J,IAAI,CAAC,CAAC,CAAC;AAK7F,IAAM5L,yCAAA,GAAN,MAAgD;EA/BvD;IA+BuD0E,MAAA;EAAA;EAAA;AAAA;AAAA;EAItCuI,aAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAOTH,gBAAA,GAAmB2I,YAAA,EAA6D;IACtF,IAAI,KAAKxI,aAAA,KAAkB,QAAW;MACrCqG,OAAA,CAAQC,GAAA,CAAI,MAAM,iBAAiB,EAAE;IACtC;IAEA,KAAKtG,aAAA,CAAe9F,IAAA,CAAK,GAAGoO,qBAAA,CAAsB5P,KAAA,CAAM8P,YAAY,CAAC;IAErE,OAAO;EACR;AACD;;;AD1CO,IAAM3T,yBAAA,GAAN,cAAwC/B,4BAAA,CAA6B;EAAA;AAAA;AAAA;EAIlD6L,IAAA,GAAO6I,YAAA,CAAAJ,4BAAA,CAA6BqB,OAAA;EAAA;AAAA;AAAA;EAKtD3M,OAAA,EAA6C;IACnD,KAAKqL,sBAAA,CAAuB;IAE5B,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;AAd4E1P,MAAA,CAAA5C,yBAAA;AAA/DA,yBAAA,GAAN6T,eAAA,MADNjB,eAAA,CAAAkB,GAAA,EAAI5V,yCAAyC,IACjC8B,yBAAA;;;AETb,IAAA+T,kBAAA,GAAkBrR,OAAA;AAClB,IAAAsR,YAAA,GAAsFtR,OAAA;AACtF,IAAAuR,gBAAA,GAAoBvR,OAAA;;;ACCb,IAAe1E,+CAAA,GAAf,MAA+D;EAHtE;IAGsE4E,MAAA;EAAA;EAAA;AAAA;AAAA;EAIrDsR,SAAA;EAAA;AAAA;AAAA;EAKAC,SAAA;AAejB;;;AC3BA,IAAAC,kBAAA,GAAkB1R,OAAA;AAClB,IAAA2R,YAAA,GAAqF3R,OAAA;AAGrF,IAAM4R,eAAA,GAAkBF,kBAAA,CAAAvR,CAAA,CAAEC,MAAA,CAAOC,wBAAA,CAAyB,CAAC,EAAEC,qBAAA,CAAsB,GAAG;AACtF,IAAMuR,eAAA,GAAkBH,kBAAA,CAAAvR,CAAA,CAAEY,MAAA,CAAO+Q,WAAA,CAAYC,MAAA,CAAOC,iBAAiB,EAAEC,QAAA,CAASF,MAAA,CAAOG,iBAAiB;AACxG,IAAMC,gBAAA,GAAmBT,kBAAA,CAAAvR,CAAA,CAAEO,MAAA,CAAO;EACjCC,IAAA,EAAMiR,eAAA;EACNjD,kBAAA,EAAoBzC,wBAAA;EACpBtL,KAAA,EAAO8Q,kBAAA,CAAAvR,CAAA,CAAE4B,KAAA,CAAM6P,eAAA,EAAiBC,eAAe;AAChD,CAAC,EAAE/Q,KAAA;AACH,IAAMsR,iBAAA,GAAmBV,kBAAA,CAAAvR,CAAA,CAAEK,OAAA;AAKpB,IAAM/E,uDAAA,GAAN,MAAyF;EAhBhG;IAgBgGyE,MAAA;EAAA;EAAA;AAAA;AAAA;EAI/EyN,OAAA;EAAA;AAAA;AAAA;EAKA0E,YAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAjL,IAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAOTkL,WAAA,GAAc3E,OAAA,EAAuD;IAC3E,IAAIA,OAAA,CAAQvM,MAAA,GAAS,KAAK,KAAKiR,YAAA,EAAc;MAC5C,MAAM,IAAItL,UAAA,CAAW,gEAAgE;IACtF;IAEAoL,gBAAA,CAAiBhR,KAAA,CAAMwM,OAAO;IAE9B,IAAI,KAAKA,OAAA,KAAY,QAAW;MAC/BmB,OAAA,CAAQC,GAAA,CAAI,MAAM,WAAW,EAAE;IAChC;IAEA5C,qBAAA,CAAsBwB,OAAA,CAAQvM,MAAA,EAAQ,KAAKuM,OAAO;IAElD,WAAW;MAAEhN,IAAA;MAAMgO,kBAAA;MAAoB/N;IAAM,KAAK+M,OAAA,EAAS;MAE1D,IAAI,KAAKvG,IAAA,KAASuK,YAAA,CAAA9B,4BAAA,CAA6B0C,MAAA,EAAQ;QACtDX,eAAA,CAAgBzQ,KAAA,CAAMP,KAAK;MAC5B,OAAO;QACNiR,eAAA,CAAgB1Q,KAAA,CAAMP,KAAK;MAC5B;MAEA,KAAK+M,OAAA,CAAShL,IAAA,CAAK;QAAEhC,IAAA;QAAMgO,kBAAA;QAAoB/N;MAAM,CAAC;IACvD;IAEA,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO4R,WAAA,GAAoE7E,OAAA,EAAsB;IAChG,IAAIA,OAAA,CAAQvM,MAAA,GAAS,KAAK,KAAKiR,YAAA,EAAc;MAC5C,MAAM,IAAItL,UAAA,CAAW,gEAAgE;IACtF;IAEAoL,gBAAA,CAAiBhR,KAAA,CAAMwM,OAAO;IAE9BmB,OAAA,CAAQC,GAAA,CAAI,MAAM,WAAW,EAAE;IAC/B,KAAKuD,UAAA,CAAW,GAAG3E,OAAO;IAE1B,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO8E,gBAAgBJ,YAAA,EAA6B;IAEnDD,iBAAA,CAAiBjR,KAAA,CAAMkR,YAAY;IAEnC,IAAIA,YAAA,IAAgBnQ,KAAA,CAAMC,OAAA,CAAQ,KAAKwL,OAAO,KAAK,KAAKA,OAAA,CAAQvM,MAAA,GAAS,GAAG;MAC3E,MAAM,IAAI2F,UAAA,CAAW,gEAAgE;IACtF;IAEA+H,OAAA,CAAQC,GAAA,CAAI,MAAM,gBAAgBsD,YAAY;IAE9C,OAAO;EACR;AACD;;;AF9FA,IAAMK,eAAA,GAAkBrB,kBAAA,CAAAlR,CAAA,CAAEY,MAAA,CAAOW,GAAA;AAM1B,IAAMnE,yBAAA,GAAN,cACEhC,4BAAA,CAET;EAAA;AAAA;AAAA;EAIiB6L,IAAA,GAAOkK,YAAA,CAAAzB,4BAAA,CAA6B8C,OAAA;EAAA;AAAA;AAAA;EAK7CC,YAAYC,GAAA,EAAmB;IACrCH,eAAA,CAAgBvR,KAAA,CAAM0R,GAAG;IAEzB/D,OAAA,CAAQC,GAAA,CAAI,MAAM,aAAa8D,GAAG;IAElC,OAAO;EACR;EAAA;AAAA;AAAA;EAKOC,YAAYC,GAAA,EAAmB;IACrCL,eAAA,CAAgBvR,KAAA,CAAM4R,GAAG;IAEzBjE,OAAA,CAAQC,GAAA,CAAI,MAAM,aAAagE,GAAG;IAElC,OAAO;EACR;EAAA;AAAA;AAAA;EAKOxO,OAAA,EAA6C;IACnD,KAAKqL,sBAAA,CAAuB;IAE5B,IAAI,KAAKyC,YAAA,IAAgBnQ,KAAA,CAAMC,OAAA,CAAQ,KAAKwL,OAAO,KAAK,KAAKA,OAAA,CAAQvM,MAAA,GAAS,GAAG;MAChF,MAAM,IAAI2F,UAAA,CAAW,gEAAgE;IACtF;IAEA,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;AAxCA7G,MAAA,CAAA3C,yBAAA;AAHaA,yBAAA,GAAN4T,eAAA,MADNI,gBAAA,CAAAH,GAAA,EAAI9V,+CAAA,EAAiDG,uDAAuD,IAChG8B,yBAAA;;;AGbb,IAAAyV,YAAA,GAA0FhT,OAAA;AAMnF,IAAMxC,6BAAA,GAAN,cAA4CjC,4BAAA,CAA6B;EANhF;IAMgF2E,MAAA;EAAA;EAAA;AAAA;AAAA;EAI/DkH,IAAA,GAAO4L,YAAA,CAAAnD,4BAAA,CAA6BoD,WAAA;EAAA;AAAA;AAAA;EAK7C1O,OAAA,EAAiD;IACvD,KAAKqL,sBAAA,CAAuB;IAE5B,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;;;ACpBA,IAAAsD,kBAAA,GAAkBlT,OAAA;AAClB,IAAAmT,YAAA,GAAqFnT,OAAA;AACrF,IAAAoT,gBAAA,GAAoBpT,OAAA;AAKpB,IAAMqT,gBAAA,GAAkBH,kBAAA,CAAA/S,CAAA,CAAEY,MAAA;AAMnB,IAAMtD,wBAAA,GAAN,cACElC,4BAAA,CAET;EAAA;AAAA;AAAA;EAIiB6L,IAAA,GAAO+L,YAAA,CAAAtD,4BAAA,CAA6BkC,MAAA;EAAA;AAAA;AAAA;EAK7Ca,YAAYC,GAAA,EAAmB;IACrCQ,gBAAA,CAAgBlS,KAAA,CAAM0R,GAAG;IAEzB/D,OAAA,CAAQC,GAAA,CAAI,MAAM,aAAa8D,GAAG;IAElC,OAAO;EACR;EAAA;AAAA;AAAA;EAKOC,YAAYC,GAAA,EAAmB;IACrCM,gBAAA,CAAgBlS,KAAA,CAAM4R,GAAG;IAEzBjE,OAAA,CAAQC,GAAA,CAAI,MAAM,aAAagE,GAAG;IAElC,OAAO;EACR;EAAA;AAAA;AAAA;EAKOxO,OAAA,EAA4C;IAClD,KAAKqL,sBAAA,CAAuB;IAE5B,IAAI,KAAKyC,YAAA,IAAgBnQ,KAAA,CAAMC,OAAA,CAAQ,KAAKwL,OAAO,KAAK,KAAKA,OAAA,CAAQvM,MAAA,GAAS,GAAG;MAChF,MAAM,IAAI2F,UAAA,CAAW,gEAAgE;IACtF;IAEA,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;AAxCA7G,MAAA,CAAAzC,wBAAA;AAHaA,wBAAA,GAAN0T,eAAA,MADNiC,gBAAA,CAAAhC,GAAA,EAAI9V,+CAAA,EAAiDG,uDAAuD,IAChGgC,wBAAA;;;ACbb,IAAA6V,YAAA,GAAmFtT,OAAA;AAM5E,IAAMtC,sBAAA,GAAN,cAAqCnC,4BAAA,CAA6B;EANzE;IAMyE2E,MAAA;EAAA;EAAA;AAAA;AAAA;EAI/CkH,IAAA,GAAOkM,YAAA,CAAAzD,4BAAA,CAA6B0D,IAAA;EAAA;AAAA;AAAA;EAKtDhP,OAAA,EAA0C;IAChD,KAAKqL,sBAAA,CAAuB;IAE5B,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;;;ACpBA,IAAA4D,mBAAA,GAAkBxT,OAAA;AAClB,IAAAyT,YAAA,GAAqFzT,OAAA;AACrF,IAAA0T,gBAAA,GAAoB1T,OAAA;AAIpB,IAAM2T,mBAAA,GAAqBH,mBAAA,CAAArT,CAAA,CAAEY,MAAA,CAAOY,kBAAA,CAAmB,CAAC,EAAEX,eAAA,CAAgB,GAAK;AAC/E,IAAM4S,mBAAA,GAAqBJ,mBAAA,CAAArT,CAAA,CAAEY,MAAA,CAAOY,kBAAA,CAAmB,CAAC,EAAEX,eAAA,CAAgB,GAAK;AAMxE,IAAMrD,wBAAA,GAAN,cAAuCpC,4BAAA,CAA6B;EAAA;AAAA;AAAA;EAI1D6L,IAAA,GAAOqM,YAAA,CAAA5D,4BAAA,CAA6B0C,MAAA;EAAA;AAAA;AAAA;EAKpCtH,UAAA;EAAA;AAAA;AAAA;EAKAH,UAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAOTC,aAAa8H,GAAA,EAAmB;IACtCe,mBAAA,CAAmBzS,KAAA,CAAM0R,GAAG;IAE5B/D,OAAA,CAAQC,GAAA,CAAI,MAAM,cAAc8D,GAAG;IAEnC,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOjI,aAAamI,GAAA,EAAmB;IACtCY,mBAAA,CAAmBxS,KAAA,CAAM4R,GAAG;IAE5BjE,OAAA,CAAQC,GAAA,CAAI,MAAM,cAAcgE,GAAG;IAEnC,OAAO;EACR;EAAA;AAAA;AAAA;EAKOxO,OAAA,EAA4C;IAClD,KAAKqL,sBAAA,CAAuB;IAE5B,IAAI,KAAKyC,YAAA,IAAgBnQ,KAAA,CAAMC,OAAA,CAAQ,KAAKwL,OAAO,KAAK,KAAKA,OAAA,CAAQvM,MAAA,GAAS,GAAG;MAChF,MAAM,IAAI2F,UAAA,CAAW,gEAAgE;IACtF;IAEA,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;AAtD2E7G,MAAA,CAAAvC,wBAAA;AAA9DA,wBAAA,GAANwT,eAAA,MADNuC,gBAAA,CAAAtC,GAAA,EAAI3V,uDAAuD,IAC/CkC,wBAAA;;;ACbb,IAAAkW,YAAA,GAAmF7T,OAAA;AAM5E,IAAMlC,sBAAA,GAAN,cAAqCvC,4BAAA,CAA6B;EANzE;IAMyE2E,MAAA;EAAA;EAAA;AAAA;AAAA;EAIxDkH,IAAA,GAAOyM,YAAA,CAAAhE,4BAAA,CAA6BiE,IAAA;EAAA;AAAA;AAAA;EAK7CvP,OAAA,EAA0C;IAChD,KAAKqL,sBAAA,CAAuB;IAE5B,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;;;ACFO,IAAM5S,yBAAA,GAAN,MAAsE;EAlB7E;IAkB6EkD,MAAA;EAAA;EAC5DgD,OAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAOT6Q,iBACNnG,KAAA,EACC;IACD,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAOxQ,yBAAyB;EACpE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO6W,cAAcrG,KAAA,EAA+F;IACnH,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAO9P,sBAAsB;EACjE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOoW,iBACNtG,KAAA,EACC;IACD,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAOtQ,yBAAyB;EACpE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO6W,cAAcvG,KAAA,EAA+F;IACnH,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAOlQ,sBAAsB;EACjE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO0W,oBACNxG,KAAA,EACC;IACD,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAOzQ,4BAA4B;EACvE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOkX,qBACNzG,KAAA,EACC;IACD,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAOpQ,6BAA6B;EACxE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO8W,gBACN1G,KAAA,EAUC;IACD,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAOjQ,wBAAwB;EACnE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO4W,iBACN3G,KAAA,EAUC;IACD,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAOrQ,yBAAyB;EACpE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOiX,gBACN5G,KAAA,EAUC;IACD,OAAO,KAAKoG,sBAAA,CAAuBpG,KAAA,EAAOnQ,wBAAwB;EACnE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASQuW,uBACPpG,KAAA,EAKA6G,QAAA,EACyG;IACzG,MAAM;MAAEvR;IAAQ,IAAI;IAGpBwJ,wBAAA,CAAyBxJ,OAAO;IAGhC,MAAMwR,MAAA,GAAS,OAAO9G,KAAA,KAAU,aAAaA,KAAA,CAAM,IAAI6G,QAAA,CAAS,CAAC,IAAI7G,KAAA;IAErE3B,qBAAA,CAAsByI,MAAA,EAAQD,QAAQ;IAGtCvR,OAAA,CAAQP,IAAA,CAAK+R,MAAM;IAEnB,OAAO;EACR;AACD;;;Af3JO,IAAM7W,kCAAA,GAAN,MAAmF;EAAA;AAAA;AAAA;EAIzE8C,IAAA,GAAe;EAAA;AAAA;AAAA;EAKfgD,WAAA,GAAsB;EAAA;AAAA;AAAA;EAKtBT,OAAA,GAA2C,EAAC;EAAA;AAAA;AAAA;AAAA;AAAA;EAOrDyR,cACN/G,KAAA,EAGC;IACD,MAAM;MAAE1K;IAAQ,IAAI;IAGpBwJ,wBAAA,CAAyBxJ,OAAO;IAIhC,MAAMwR,MAAA,GAAS,OAAO9G,KAAA,KAAU,aAAaA,KAAA,CAAM,IAAIhQ,6BAAA,CAA8B,CAAC,IAAIgQ,KAAA;IAG1F3B,qBAAA,CAAsByI,MAAA,EAAQ9W,6BAA6B;IAG3DsF,OAAA,CAAQP,IAAA,CAAK+R,MAAM;IAEnB,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOnQ,OAAA,EAAqD;IAC3DuI,2BAAA,CAA2B,KAAKnM,IAAA,EAAM,KAAKgD,WAAA,EAAa,KAAKT,OAAO;IAEpE,OAAO;MACNkE,IAAA,EAAMqH,YAAA,CAAAoB,4BAAA,CAA6B+E,eAAA;MACnCjU,IAAA,EAAM,KAAKA,IAAA;MACXgO,kBAAA,EAAoB,KAAKA,kBAAA;MACzBhL,WAAA,EAAa,KAAKA,WAAA;MAClBiL,yBAAA,EAA2B,KAAKA,yBAAA;MAChC1L,OAAA,EAAS,KAAKA,OAAA,CAAQgG,GAAA,CAAKC,MAAA,IAAWA,MAAA,CAAO5E,MAAA,CAAO,CAAC;IACtD;EACD;AACD;AA/D0FrE,MAAA,CAAArC,kCAAA;AAA7EA,kCAAA,GAANsT,eAAA,MADNzC,gBAAA,CAAA0C,GAAA,EAAIrU,wBAAwB,IAChBc,kCAAA;AAyEN,IAAMD,6BAAA,GAAN,MAA8E;EAAA;AAAA;AAAA;EAIpE+C,IAAA,GAAe;EAAA;AAAA;AAAA;EAKfgD,WAAA,GAAsB;EAAA;AAAA;AAAA;EAKtBT,OAAA,GAA0C,EAAC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASpDqB,OAAA,EAAgD;IACtDuI,2BAAA,CAA2B,KAAKnM,IAAA,EAAM,KAAKgD,WAAA,EAAa,KAAKT,OAAO;IAEpE,OAAO;MACNkE,IAAA,EAAMqH,YAAA,CAAAoB,4BAAA,CAA6BgF,UAAA;MACnClU,IAAA,EAAM,KAAKA,IAAA;MACXgO,kBAAA,EAAoB,KAAKA,kBAAA;MACzBhL,WAAA,EAAa,KAAKA,WAAA;MAClBiL,yBAAA,EAA2B,KAAKA,yBAAA;MAChC1L,OAAA,EAAS,KAAKA,OAAA,CAAQgG,GAAA,CAAKC,MAAA,IAAWA,MAAA,CAAO5E,MAAA,CAAO,CAAC;IACtD;EACD;AACD;AAnCqFrE,MAAA,CAAAtC,6BAAA;AAAxEA,6BAAA,GAANuT,eAAA,MADNzC,gBAAA,CAAA0C,GAAA,EAAIrU,wBAAA,EAA0BC,yBAAyB,IAC3CY,6BAAA;;;ADlEN,IAAMP,mBAAA,GAAN,MAA0B;EAAA;AAAA;AAAA;EAIhBsD,IAAA,GAAe;EAAA;AAAA;AAAA;EAKfgO,kBAAA;EAAA;AAAA;AAAA;EAKAhL,WAAA,GAAsB;EAAA;AAAA;AAAA;EAKtBiL,yBAAA;EAAA;AAAA;AAAA;EAKA1L,OAAA,GAA4C,EAAC;EAAA;AAAA;AAAA;AAAA;AAAA;EAO7C4R,kBAAA,GAA0C;EAAA;AAAA;AAAA;EAK1CC,0BAAA,GAA6D;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQ7DC,aAAA,GAAqC;EAAA;AAAA;AAAA;EAKrCC,IAAA,GAA4B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWrCC,qBAAqBtU,KAAA,EAAgB;IAE3C0L,yBAAA,CAA0B1L,KAAK;IAE/BkO,OAAA,CAAQC,GAAA,CAAI,MAAM,sBAAsBnO,KAAK;IAE7C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUOuU,4BAA4B5G,WAAA,EAA+D;IAEjG,MAAM6G,eAAA,GAAkB/I,gCAAA,CAAiCkC,WAAW;IAEpEO,OAAA,CAAQC,GAAA,CAAI,MAAM,8BAA8BqG,eAAe;IAE/D,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUOC,gBAAgBC,OAAA,EAAqC;IAE3DlJ,oBAAA,CAAqBkJ,OAAO;IAE5BxG,OAAA,CAAQC,GAAA,CAAI,MAAM,iBAAiBuG,OAAO;IAE1C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,QAAQN,IAAA,GAAO,MAAM;IAE3BtI,YAAA,CAAasI,IAAI;IACjBnG,OAAA,CAAQC,GAAA,CAAI,MAAM,QAAQkG,IAAI;IAC9B,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOO,mBACN5H,KAAA,EAGqC;IACrC,MAAM;MAAE1K;IAAQ,IAAI;IAGpBwJ,wBAAA,CAAyBxJ,OAAO;IAGhC,MAAMwR,MAAA,GAAS,OAAO9G,KAAA,KAAU,aAAaA,KAAA,CAAM,IAAI/P,kCAAA,CAAmC,CAAC,IAAI+P,KAAA;IAE/F3B,qBAAA,CAAsByI,MAAA,EAAQ7W,kCAAkC;IAGhEqF,OAAA,CAAQP,IAAA,CAAK+R,MAAM;IAEnB,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOC,cACN/G,KAAA,EAGqC;IACrC,MAAM;MAAE1K;IAAQ,IAAI;IAGpBwJ,wBAAA,CAAyBxJ,OAAO;IAGhC,MAAMwR,MAAA,GAAS,OAAO9G,KAAA,KAAU,aAAaA,KAAA,CAAM,IAAIhQ,6BAAA,CAA8B,CAAC,IAAIgQ,KAAA;IAE1F3B,qBAAA,CAAsByI,MAAA,EAAQ9W,6BAA6B;IAG3DsF,OAAA,CAAQP,IAAA,CAAK+R,MAAM;IAEnB,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOnQ,OAAA,EAA0D;IAChEuI,2BAAA,CAA2B,KAAKnM,IAAA,EAAM,KAAKgD,WAAA,EAAa,KAAKT,OAAO;IAEpEuJ,uBAAA,CAAwB,KAAKkC,kBAAkB;IAC/ClC,uBAAA,CAAwB,KAAKmC,yBAAyB;IAEtD,OAAO;MACN,GAAG;MACH1L,OAAA,EAAS,KAAKA,OAAA,CAAQgG,GAAA,CAAKC,MAAA,IAAWA,MAAA,CAAO5E,MAAA,CAAO,CAAC;IACtD;EACD;AACD;AAzLiCrE,MAAA,CAAA7C,mBAAA;AAApBA,mBAAA,GAAN8T,eAAA,MADN3C,gBAAA,CAAA4C,GAAA,EAAIpU,yBAAA,EAA2BD,wBAAwB,IAC3CM,mBAAA;;;AiBzBb,IAAApB,mBAAA;AAAAb,QAAA,CAAAa,mBAAA;EAAAmQ,oBAAA,EAAAA,CAAA,KAAAqJ,qBAAA;EAAApJ,gCAAA,EAAAA,CAAA,KAAAqJ,iCAAA;EAAApJ,yBAAA,EAAAA,CAAA,KAAAqJ,0BAAA;EAAA/I,YAAA,EAAAA,CAAA,KAAAgJ,aAAA;EAAAtL,0BAAA,EAAAA,CAAA,KAAAuL,2BAAA;EAAAC,YAAA,EAAAA,CAAA,KAAAA;AAAA;AAAA,IAAAC,mBAAA,GAAkB/V,OAAA;AAClB,IAAAgW,YAAA,GAAuChW,OAAA;AAIvC,IAAMiW,cAAA,GAAgBF,mBAAA,CAAA5V,CAAA,CAAEC,MAAA,CACtBC,wBAAA,CAAyB,CAAC,EAC1BC,qBAAA,CAAsB,EAAE,EAExB4M,KAAA,CAAM,0DAA0D,EAChE3M,oBAAA,CAAqBhC,mBAAmB;AAC1C,IAAM2X,aAAA,GAAgBH,mBAAA,CAAA5V,CAAA,CACpB4B,KAAA,CAAMgU,mBAAA,CAAA5V,CAAA,CAAE6Q,OAAA,CAAQgF,YAAA,CAAAG,sBAAA,CAAuBrC,IAAI,GAAGiC,mBAAA,CAAA5V,CAAA,CAAE6Q,OAAA,CAAQgF,YAAA,CAAAG,sBAAA,CAAuBC,OAAO,CAAC,EACvF7V,oBAAA,CAAqBhC,mBAAmB;AAC1C,IAAM8X,iBAAA,GAAmBN,mBAAA,CAAA5V,CAAA,CAAEK,OAAA;AAEpB,SAASmV,2BAA0B/U,KAAA,EAA0C;EACnFyV,iBAAA,CAAiBlV,KAAA,CAAMP,KAAK;AAC7B;AAFgBV,MAAA,CAAAyV,0BAAA;AAIT,SAASC,cAAajV,IAAA,EAAuC;EACnEsV,cAAA,CAAc9U,KAAA,CAAMR,IAAI;AACzB;AAFgBT,MAAA,CAAA0V,aAAA;AAIT,SAASE,aAAa1O,IAAA,EAAuD;EACnF8O,aAAA,CAAc/U,KAAA,CAAMiG,IAAI;AACzB;AAFgBlH,MAAA,CAAA4V,YAAA;AAIT,SAASD,4BAA2BlV,IAAA,EAAcyG,IAAA,EAAc;EAEtEwO,aAAA,CAAajV,IAAI;EAGjBmV,YAAA,CAAa1O,IAAI;AAClB;AANgBlH,MAAA,CAAA2V,2BAAA;AAQhB,IAAMS,sBAAA,GAAwBP,mBAAA,CAAA5V,CAAA,CAAEK,OAAA,CAAQgB,OAAA;AAEjC,SAASiU,sBAAqB7U,KAAA,EAA6D;EACjG0V,sBAAA,CAAsBnV,KAAA,CAAMP,KAAK;AAClC;AAFgBV,MAAA,CAAAuV,qBAAA;AAIhB,IAAMc,0BAAA,GAA4BR,mBAAA,CAAA5V,CAAA,CAAE4B,KAAA,CACnCgU,mBAAA,CAAA5V,CAAA,CAAEgO,MAAA,CAAOC,SAAA,CAAWxN,KAAA,IAAUA,KAAA,CAAMyN,QAAA,CAAS,CAAC,GAC9C0H,mBAAA,CAAA5V,CAAA,CAAEY,MAAA,CAAOuN,OAAA,CAAQF,SAAA,CAAWxN,KAAA,IAAUA,KAAA,CAAMyN,QAAA,CAAS,CAAC,GACtD0H,mBAAA,CAAA5V,CAAA,CAAEC,MAAA,CAAO8M,KAAA,CAAM,OAAO,CACvB,EAAE1L,OAAA;AAEK,SAASkU,kCAAiCnH,WAAA,EAAsB;EACtE,OAAOgI,0BAAA,CAA0BpV,KAAA,CAAMoN,WAAW;AACnD;AAFgBrO,MAAA,CAAAwV,iCAAA;;;ACvBT,IAAMxZ,yBAAA,GAAN,MAAgC;EAzBvC;IAyBuCgE,MAAA;EAAA;EAAA;AAAA;AAAA;EAItBS,IAAA,GAAe;EAAA;AAAA;AAAA;EAKfgO,kBAAA;EAAA;AAAA;AAAA;EAKAvH,IAAA,GAA+B;EAAA;AAAA;AAAA;AAAA;AAAA;EAO/B0N,kBAAA,GAA0C;EAAA;AAAA;AAAA;EAK1CC,0BAAA,GAA6D;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQ7DC,aAAA,GAAqC;EAAA;AAAA;AAAA;AAAA;AAAA;EAO9CnG,QAAQlO,IAAA,EAAc;IAE5BiV,aAAA,CAAajV,IAAI;IAEjBmO,OAAA,CAAQC,GAAA,CAAI,MAAM,QAAQpO,IAAI;IAE9B,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOO6V,QAAQpP,IAAA,EAA8B;IAE5C0O,YAAA,CAAa1O,IAAI;IAEjB0H,OAAA,CAAQC,GAAA,CAAI,MAAM,QAAQ3H,IAAI;IAE9B,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWO8N,qBAAqBtU,KAAA,EAAgB;IAE3C+U,0BAAA,CAA0B/U,KAAK;IAE/BkO,OAAA,CAAQC,GAAA,CAAI,MAAM,sBAAsBnO,KAAK;IAE7C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUOuU,4BAA4B5G,WAAA,EAA+D;IAEjG,MAAM6G,eAAA,GAAkBM,iCAAA,CAAiCnH,WAAW;IAEpEO,OAAA,CAAQC,GAAA,CAAI,MAAM,8BAA8BqG,eAAe;IAE/D,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUOC,gBAAgBC,OAAA,EAAqC;IAE3DG,qBAAA,CAAqBH,OAAO;IAE5BxG,OAAA,CAAQC,GAAA,CAAI,MAAM,iBAAiBuG,OAAO;IAE1C,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQOtG,oBAAoBxB,MAAA,EAAsByB,aAAA,EAA8B;IAC9E,IAAI,CAAC,KAAKN,kBAAA,EAAoB;MAC7BG,OAAA,CAAQC,GAAA,CAAI,MAAM,sBAAsB,CAAC,CAAC;IAC3C;IAEA,MAAMG,YAAA,GAAe1C,cAAA,CAAegB,MAAM;IAE1C,IAAIyB,aAAA,KAAkB,MAAM;MAC3B,KAAKN,kBAAA,CAAoBO,YAAY,IAAI;MACzC,OAAO;IACR;IAEA0G,aAAA,CAAa3G,aAAa;IAE1B,KAAKN,kBAAA,CAAoBO,YAAY,IAAID,aAAA;IACzC,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOE,qBAAqBC,cAAA,EAAwC;IACnE,IAAIA,cAAA,KAAmB,MAAM;MAC5BN,OAAA,CAAQC,GAAA,CAAI,MAAM,sBAAsB,IAAI;MAC5C,OAAO;IACR;IAEAD,OAAA,CAAQC,GAAA,CAAI,MAAM,sBAAsB,CAAC,CAAC;IAE1C,WAAWM,IAAA,IAAQvB,MAAA,CAAOwB,OAAA,CAAQF,cAAc,GAC/C,KAAKJ,mBAAA,CAAoB,GAAIK,IAAsC;IACpE,OAAO;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASO9K,OAAA,EAA4D;IAClEsR,2BAAA,CAA2B,KAAKlV,IAAA,EAAM,KAAKyG,IAAI;IAE/CqF,uBAAA,CAAwB,KAAKkC,kBAAkB;IAE/C,OAAO;MAAE,GAAG;IAAK;EAClB;AACD;;;AC9LO,SAAStQ,YAAY+D,IAAA,EAAgB;EAC3C,QACEA,IAAA,CAAKiC,KAAA,EAAOjD,MAAA,IAAU,MACtBgB,IAAA,CAAKuB,WAAA,EAAavC,MAAA,IAAU,MAC5BgB,IAAA,CAAKlB,MAAA,EAAQuV,MAAA,CAAO,CAACC,IAAA,EAAMC,IAAA,KAASD,IAAA,GAAOC,IAAA,CAAKhW,IAAA,CAAKS,MAAA,GAASuV,IAAA,CAAK/V,KAAA,CAAMQ,MAAA,EAAQ,CAAC,KAAK,MACvFgB,IAAA,CAAKyB,MAAA,EAAQ/B,IAAA,CAAKV,MAAA,IAAU,MAC5BgB,IAAA,CAAKe,MAAA,EAAQxC,IAAA,CAAKS,MAAA,IAAU;AAE/B;AARgBlB,MAAA,CAAA7B,WAAA;;;AzC6DT,IAAMI,OAAA,GAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}