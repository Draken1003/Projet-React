{"ast":null,"code":"'use strict';\n\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\nclass VoiceChannel extends BaseGuildVoiceChannel {\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!super.joinable) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has(PermissionFlagsBits.MoveMembers, false)) return false;\n    return true;\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get speakable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows speaking even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n    return this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() && permissions.has(PermissionFlagsBits.Speak, false);\n  }\n}\n\n/**\n * Sets the bitrate of the channel.\n * @method setBitrate\n * @memberof VoiceChannel\n * @instance\n * @param {number} bitrate The new bitrate\n * @param {string} [reason] Reason for changing the channel's bitrate\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the bitrate of a voice channel\n * voiceChannel.setBitrate(48_000)\n *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n *   .catch(console.error);\n */\n\n/**\n * Sets the RTC region of the channel.\n * @method setRTCRegion\n * @memberof VoiceChannel\n * @instance\n * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n * @param {string} [reason] The reason for modifying this region.\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the RTC region to sydney\n * voiceChannel.setRTCRegion('sydney');\n * @example\n * // Remove a fixed region for this channel - let Discord decide automatically\n * voiceChannel.setRTCRegion(null, 'We want to let Discord decide.');\n */\n\n/**\n * Sets the user limit of the channel.\n * @method setUserLimit\n * @memberof VoiceChannel\n * @instance\n * @param {number} userLimit The new user limit\n * @param {string} [reason] Reason for changing the user limit\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the user limit of a voice channel\n * voiceChannel.setUserLimit(42)\n *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n *   .catch(console.error);\n */\n\n/**\n * Sets the camera video quality mode of the channel.\n * @method setVideoQualityMode\n * @memberof VoiceChannel\n * @instance\n * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n * @param {string} [reason] Reason for changing the camera video quality mode.\n * @returns {Promise<VoiceChannel>}\n */\n\nmodule.exports = VoiceChannel;","map":{"version":3,"names":["PermissionFlagsBits","require","BaseGuildVoiceChannel","VoiceChannel","joinable","full","permissionsFor","client","user","has","MoveMembers","speakable","permissions","Administrator","guild","members","me","communicationDisabledUntilTimestamp","Date","now","Speak","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/VoiceChannel.js"],"sourcesContent":["'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\nclass VoiceChannel extends BaseGuildVoiceChannel {\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!super.joinable) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has(PermissionFlagsBits.MoveMembers, false)) return false;\n    return true;\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get speakable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows speaking even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    return (\n      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&\n      permissions.has(PermissionFlagsBits.Speak, false)\n    );\n  }\n}\n\n/**\n * Sets the bitrate of the channel.\n * @method setBitrate\n * @memberof VoiceChannel\n * @instance\n * @param {number} bitrate The new bitrate\n * @param {string} [reason] Reason for changing the channel's bitrate\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the bitrate of a voice channel\n * voiceChannel.setBitrate(48_000)\n *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n *   .catch(console.error);\n */\n\n/**\n * Sets the RTC region of the channel.\n * @method setRTCRegion\n * @memberof VoiceChannel\n * @instance\n * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n * @param {string} [reason] The reason for modifying this region.\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the RTC region to sydney\n * voiceChannel.setRTCRegion('sydney');\n * @example\n * // Remove a fixed region for this channel - let Discord decide automatically\n * voiceChannel.setRTCRegion(null, 'We want to let Discord decide.');\n */\n\n/**\n * Sets the user limit of the channel.\n * @method setUserLimit\n * @memberof VoiceChannel\n * @instance\n * @param {number} userLimit The new user limit\n * @param {string} [reason] Reason for changing the user limit\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the user limit of a voice channel\n * voiceChannel.setUserLimit(42)\n *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n *   .catch(console.error);\n */\n\n/**\n * Sets the camera video quality mode of the channel.\n * @method setVideoQualityMode\n * @memberof VoiceChannel\n * @instance\n * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n * @param {string} [reason] Reason for changing the camera video quality mode.\n * @returns {Promise<VoiceChannel>}\n */\n\nmodule.exports = VoiceChannel;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAoB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAChE,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;;AAEhE;AACA;AACA;AACA;AACA,MAAME,YAAY,SAASD,qBAAqB,CAAC;EAC/C;AACF;AACA;AACA;AACA;EACE,IAAIE,QAAQA,CAAA,EAAG;IACb,IAAI,CAAC,KAAK,CAACA,QAAQ,EAAE,OAAO,KAAK;IACjC,IAAI,IAAI,CAACC,IAAI,IAAI,CAAC,IAAI,CAACC,cAAc,CAAC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,CAACC,GAAG,CAACT,mBAAmB,CAACU,WAAW,EAAE,KAAK,CAAC,EAAE,OAAO,KAAK;IACjH,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,SAASA,CAAA,EAAG;IACd,MAAMC,WAAW,GAAG,IAAI,CAACN,cAAc,CAAC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;IACzD,IAAI,CAACI,WAAW,EAAE,OAAO,KAAK;IAC9B;IACA,IAAIA,WAAW,CAACH,GAAG,CAACT,mBAAmB,CAACa,aAAa,EAAE,KAAK,CAAC,EAAE,OAAO,IAAI;IAE1E,OACE,IAAI,CAACC,KAAK,CAACC,OAAO,CAACC,EAAE,CAACC,mCAAmC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,IACtEP,WAAW,CAACH,GAAG,CAACT,mBAAmB,CAACoB,KAAK,EAAE,KAAK,CAAC;EAErD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGnB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}