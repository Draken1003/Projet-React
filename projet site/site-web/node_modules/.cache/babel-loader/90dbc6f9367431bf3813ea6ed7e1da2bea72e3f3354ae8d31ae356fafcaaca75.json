{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst GuildChannel = require('./GuildChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst GuildMessageManager = require('../managers/GuildMessageManager');\n\n/**\n * Represents a voice-based guild channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass BaseGuildVoiceChannel extends GuildChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {GuildMessageManager}\n     */\n    this.messages = new GuildMessageManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     */\n    this.nsfw = Boolean(data.nsfw);\n    this._patch(data);\n  }\n  _patch(data) {\n    super._patch(data);\n    if ('rtc_region' in data) {\n      /**\n       * The RTC region for this voice-based channel. This region is automatically selected if `null`.\n       * @type {?string}\n       */\n      this.rtcRegion = data.rtc_region;\n    }\n    if ('bitrate' in data) {\n      /**\n       * The bitrate of this voice-based channel\n       * @type {number}\n       */\n      this.bitrate = data.bitrate;\n    }\n    if ('user_limit' in data) {\n      /**\n       * The maximum amount of users allowed in this channel.\n       * @type {number}\n       */\n      this.userLimit = data.user_limit;\n    }\n    if ('video_quality_mode' in data) {\n      /**\n       * The camera video quality mode of the channel.\n       * @type {?VideoQualityMode}\n       */\n      this.videoQualityMode = data.video_quality_mode;\n    } else {\n      this.videoQualityMode ??= null;\n    }\n    if ('last_message_id' in data) {\n      /**\n       * The last message id sent in the channel, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    }\n    if ('messages' in data) {\n      for (const message of data.messages) this.messages._add(message);\n    }\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel in seconds\n       * @type {number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    }\n    if ('nsfw' in data) {\n      this.nsfw = data.nsfw;\n    }\n  }\n\n  /**\n   * The members in this voice-based channel\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const coll = new Collection();\n    for (const state of this.guild.voiceStates.cache.values()) {\n      if (state.channelId === this.id && state.member) {\n        coll.set(state.id, state.member);\n      }\n    }\n    return coll;\n  }\n\n  /**\n   * Checks if the voice-based channel is full\n   * @type {boolean}\n   * @readonly\n   */\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!this.viewable) return false;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n\n    // This flag allows joining even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n    return this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() && permissions.has(PermissionFlagsBits.Connect, false);\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {InviteCreateOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * @param {boolean} [cache=true] Whether to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache = true) {\n    return this.guild.invites.fetch({\n      channelId: this.id,\n      cache\n    });\n  }\n\n  /**\n   * Sets the bitrate of the channel.\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * channel.setBitrate(48_000)\n   *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setBitrate(bitrate, reason) {\n    return this.edit({\n      bitrate,\n      reason\n    });\n  }\n\n  /**\n   * Sets the RTC region of the channel.\n   * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @param {string} [reason] The reason for modifying this region.\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the RTC region to sydney\n   * channel.setRTCRegion('sydney');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * channel.setRTCRegion(null, 'We want to let Discord decide.');\n   */\n  setRTCRegion(rtcRegion, reason) {\n    return this.edit({\n      rtcRegion,\n      reason\n    });\n  }\n\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * channel.setUserLimit(42)\n   *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setUserLimit(userLimit, reason) {\n    return this.edit({\n      userLimit,\n      reason\n    });\n  }\n\n  /**\n   * Sets the camera video quality mode of the channel.\n   * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n   * @param {string} [reason] Reason for changing the camera video quality mode.\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   */\n  setVideoQualityMode(videoQualityMode, reason) {\n    return this.edit({\n      videoQualityMode,\n      reason\n    });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  send() {}\n  sendTyping() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n  bulkDelete() {}\n  fetchWebhooks() {}\n  createWebhook() {}\n  setRateLimitPerUser() {}\n  setNSFW() {}\n}\nTextBasedChannel.applyToClass(BaseGuildVoiceChannel, true, ['lastPinAt']);\nmodule.exports = BaseGuildVoiceChannel;","map":{"version":3,"names":["Collection","require","PermissionFlagsBits","GuildChannel","TextBasedChannel","GuildMessageManager","BaseGuildVoiceChannel","constructor","guild","data","client","messages","nsfw","Boolean","_patch","rtcRegion","rtc_region","bitrate","userLimit","user_limit","videoQualityMode","video_quality_mode","lastMessageId","last_message_id","message","_add","rateLimitPerUser","rate_limit_per_user","members","coll","state","voiceStates","cache","values","channelId","id","member","set","full","size","joinable","viewable","permissions","permissionsFor","user","has","Administrator","me","communicationDisabledUntilTimestamp","Date","now","Connect","createInvite","options","invites","create","fetchInvites","fetch","setBitrate","reason","edit","setRTCRegion","setUserLimit","setVideoQualityMode","lastMessage","send","sendTyping","createMessageCollector","awaitMessages","createMessageComponentCollector","awaitMessageComponent","bulkDelete","fetchWebhooks","createWebhook","setRateLimitPerUser","setNSFW","applyToClass","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/BaseGuildVoiceChannel.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst GuildChannel = require('./GuildChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst GuildMessageManager = require('../managers/GuildMessageManager');\n\n/**\n * Represents a voice-based guild channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass BaseGuildVoiceChannel extends GuildChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {GuildMessageManager}\n     */\n    this.messages = new GuildMessageManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     */\n    this.nsfw = Boolean(data.nsfw);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('rtc_region' in data) {\n      /**\n       * The RTC region for this voice-based channel. This region is automatically selected if `null`.\n       * @type {?string}\n       */\n      this.rtcRegion = data.rtc_region;\n    }\n\n    if ('bitrate' in data) {\n      /**\n       * The bitrate of this voice-based channel\n       * @type {number}\n       */\n      this.bitrate = data.bitrate;\n    }\n\n    if ('user_limit' in data) {\n      /**\n       * The maximum amount of users allowed in this channel.\n       * @type {number}\n       */\n      this.userLimit = data.user_limit;\n    }\n\n    if ('video_quality_mode' in data) {\n      /**\n       * The camera video quality mode of the channel.\n       * @type {?VideoQualityMode}\n       */\n      this.videoQualityMode = data.video_quality_mode;\n    } else {\n      this.videoQualityMode ??= null;\n    }\n\n    if ('last_message_id' in data) {\n      /**\n       * The last message id sent in the channel, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    }\n\n    if ('messages' in data) {\n      for (const message of data.messages) this.messages._add(message);\n    }\n\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel in seconds\n       * @type {number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    }\n\n    if ('nsfw' in data) {\n      this.nsfw = data.nsfw;\n    }\n  }\n\n  /**\n   * The members in this voice-based channel\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const coll = new Collection();\n    for (const state of this.guild.voiceStates.cache.values()) {\n      if (state.channelId === this.id && state.member) {\n        coll.set(state.id, state.member);\n      }\n    }\n    return coll;\n  }\n\n  /**\n   * Checks if the voice-based channel is full\n   * @type {boolean}\n   * @readonly\n   */\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!this.viewable) return false;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n\n    // This flag allows joining even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    return (\n      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&\n      permissions.has(PermissionFlagsBits.Connect, false)\n    );\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {InviteCreateOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * @param {boolean} [cache=true] Whether to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache = true) {\n    return this.guild.invites.fetch({ channelId: this.id, cache });\n  }\n\n  /**\n   * Sets the bitrate of the channel.\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * channel.setBitrate(48_000)\n   *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setBitrate(bitrate, reason) {\n    return this.edit({ bitrate, reason });\n  }\n\n  /**\n   * Sets the RTC region of the channel.\n   * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @param {string} [reason] The reason for modifying this region.\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the RTC region to sydney\n   * channel.setRTCRegion('sydney');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * channel.setRTCRegion(null, 'We want to let Discord decide.');\n   */\n  setRTCRegion(rtcRegion, reason) {\n    return this.edit({ rtcRegion, reason });\n  }\n\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * channel.setUserLimit(42)\n   *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setUserLimit(userLimit, reason) {\n    return this.edit({ userLimit, reason });\n  }\n\n  /**\n   * Sets the camera video quality mode of the channel.\n   * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n   * @param {string} [reason] Reason for changing the camera video quality mode.\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   */\n  setVideoQualityMode(videoQualityMode, reason) {\n    return this.edit({ videoQualityMode, reason });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  send() {}\n  sendTyping() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n  bulkDelete() {}\n  fetchWebhooks() {}\n  createWebhook() {}\n  setRateLimitPerUser() {}\n  setNSFW() {}\n}\n\nTextBasedChannel.applyToClass(BaseGuildVoiceChannel, true, ['lastPinAt']);\n\nmodule.exports = BaseGuildVoiceChannel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}