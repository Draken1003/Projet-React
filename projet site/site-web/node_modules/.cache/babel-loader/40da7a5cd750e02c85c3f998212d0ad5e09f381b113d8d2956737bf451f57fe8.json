{"ast":null,"code":"'use strict';\n\nconst {\n  ChannelType,\n  MessageType,\n  ComponentType,\n  ImageFormat,\n  StickerFormatType\n} = require('discord-api-types/v10');\n\n/**\n * Max bulk deletable message age\n * @typedef {number} MaxBulkDeletableMessageAge\n */\nexports.MaxBulkDeletableMessageAge = 1_209_600_000;\n\n/**\n * The name of an item to be swept in Sweepers\n * * `autoModerationRules`\n * * `applicationCommands` - both global and guild commands\n * * `bans`\n * * `emojis`\n * * `invites` - accepts the `lifetime` property, using it will sweep based on expires timestamp\n * * `guildMembers`\n * * `messages` - accepts the `lifetime` property, using it will sweep based on edited or created timestamp\n * * `presences`\n * * `reactions`\n * * `stageInstances`\n * * `stickers`\n * * `threadMembers`\n * * `threads` - accepts the `lifetime` property, using it will sweep archived threads based on archived timestamp\n * * `users`\n * * `voiceStates`\n * @typedef {string} SweeperKey\n */\nexports.SweeperKeys = ['autoModerationRules', 'applicationCommands', 'bans', 'emojis', 'invites', 'guildMembers', 'messages', 'presences', 'reactions', 'stageInstances', 'stickers', 'threadMembers', 'threads', 'users', 'voiceStates'];\n\n/**\n * The types of messages that are not `System`. The available types are:\n * * {@link MessageType.Default}\n * * {@link MessageType.Reply}\n * * {@link MessageType.ChatInputCommand}\n * * {@link MessageType.ContextMenuCommand}\n * @typedef {MessageType[]} NonSystemMessageTypes\n */\nexports.NonSystemMessageTypes = [MessageType.Default, MessageType.Reply, MessageType.ChatInputCommand, MessageType.ContextMenuCommand];\n\n/**\n * The guild channels that are text-based.\n * * TextChannel\n * * NewsChannel\n * * ThreadChannel\n * * VoiceChannel\n * * StageChannel\n * @typedef {TextChannel|NewsChannel|ThreadChannel|VoiceChannel|StageChannel} GuildTextBasedChannel\n */\n\n/**\n * The types of guild channels that are text-based. The available types are:\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} GuildTextBasedChannelTypes\n */\nexports.GuildTextBasedChannelTypes = [ChannelType.GuildText, ChannelType.GuildAnnouncement, ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread, ChannelType.GuildVoice, ChannelType.GuildStageVoice];\n\n/**\n * The channels that are text-based.\n * * DMChannel\n * * GuildTextBasedChannel\n * @typedef {DMChannel|GuildTextBasedChannel} TextBasedChannels\n */\n\n/**\n * Data that resolves to give a text-based channel. This can be:\n * * A text-based channel\n * * A snowflake\n * @typedef {TextBasedChannels|Snowflake} TextBasedChannelsResolvable\n */\n\n/**\n * The types of channels that are text-based. The available types are:\n * * {@link ChannelType.DM}\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} TextBasedChannelTypes\n */\nexports.TextBasedChannelTypes = [...exports.GuildTextBasedChannelTypes, ChannelType.DM];\n\n/**\n * The types of channels that are threads. The available types are:\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * @typedef {ChannelType[]} ThreadChannelTypes\n */\nexports.ThreadChannelTypes = [ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread];\n\n/**\n * The types of channels that are voice-based. The available types are:\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} VoiceBasedChannelTypes\n */\nexports.VoiceBasedChannelTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];\n\n/**\n * The types of select menus. The available types are:\n * * {@link ComponentType.StringSelect}\n * * {@link ComponentType.UserSelect}\n * * {@link ComponentType.RoleSelect}\n * * {@link ComponentType.MentionableSelect}\n * * {@link ComponentType.ChannelSelect}\n * @typedef {ComponentType[]} SelectMenuTypes\n */\nexports.SelectMenuTypes = [ComponentType.StringSelect, ComponentType.UserSelect, ComponentType.RoleSelect, ComponentType.MentionableSelect, ComponentType.ChannelSelect];\n\n/**\n * The types of messages that can be deleted. The available types are:\n * * {@link MessageType.AutoModerationAction}\n * * {@link MessageType.ChannelFollowAdd}\n * * {@link MessageType.ChannelPinnedMessage}\n * * {@link MessageType.ChatInputCommand}\n * * {@link MessageType.ContextMenuCommand}\n * * {@link MessageType.Default}\n * * {@link MessageType.GuildBoost}\n * * {@link MessageType.GuildBoostTier1}\n * * {@link MessageType.GuildBoostTier2}\n * * {@link MessageType.GuildBoostTier3}\n * * {@link MessageType.GuildInviteReminder}\n * * {@link MessageType.InteractionPremiumUpsell}\n * * {@link MessageType.Reply}\n * * {@link MessageType.RoleSubscriptionPurchase}\n * * {@link MessageType.StageEnd}\n * * {@link MessageType.StageRaiseHand}\n * * {@link MessageType.StageSpeaker}\n * * {@link MessageType.StageStart}\n * * {@link MessageType.StageTopic}\n * * {@link MessageType.ThreadCreated}\n * * {@link MessageType.UserJoin}\n * @typedef {MessageType[]} DeletableMessageTypes\n */\nexports.DeletableMessageTypes = [MessageType.AutoModerationAction, MessageType.ChannelFollowAdd, MessageType.ChannelPinnedMessage, MessageType.ChatInputCommand, MessageType.ContextMenuCommand, MessageType.Default, MessageType.GuildBoost, MessageType.GuildBoostTier1, MessageType.GuildBoostTier2, MessageType.GuildBoostTier3, MessageType.GuildInviteReminder, MessageType.InteractionPremiumUpsell, MessageType.Reply, MessageType.RoleSubscriptionPurchase, MessageType.StageEnd, MessageType.StageRaiseHand, MessageType.StageSpeaker, MessageType.StageStart, MessageType.StageTopic, MessageType.ThreadCreated, MessageType.UserJoin];\n\n/**\n * A mapping between sticker formats and their respective image formats.\n * * {@link StickerFormatType.PNG} -> {@link ImageFormat.PNG}\n * * {@link StickerFormatType.APNG} -> {@link ImageFormat.PNG}\n * * {@link StickerFormatType.Lottie} -> {@link ImageFormat.Lottie}\n * * {@link StickerFormatType.GIF} -> {@link ImageFormat.GIF}\n * @typedef {Object} StickerFormatExtensionMap\n */\nexports.StickerFormatExtensionMap = {\n  [StickerFormatType.PNG]: ImageFormat.PNG,\n  [StickerFormatType.APNG]: ImageFormat.PNG,\n  [StickerFormatType.Lottie]: ImageFormat.Lottie,\n  [StickerFormatType.GIF]: ImageFormat.GIF\n};\n\n/**\n * @typedef {Object} Constants Constants that can be used in an enum or object-like way.\n * @property {number} MaxBulkDeletableMessageAge Max bulk deletable message age\n * @property {SweeperKey[]} SweeperKeys The possible names of items that can be swept in sweepers\n * @property {NonSystemMessageTypes} NonSystemMessageTypes The types of messages that are not deemed a system type\n * @property {TextBasedChannelTypes} TextBasedChannelTypes The types of channels that are text-based\n * @property {ThreadChannelTypes} ThreadChannelTypes The types of channels that are threads\n * @property {VoiceBasedChannelTypes} VoiceBasedChannelTypes The types of channels that are voice-based\n * @property {SelectMenuTypes} SelectMenuTypes The types of components that are select menus.\n * @property {Object} StickerFormatExtensionMap A mapping between sticker formats and their respective image formats.\n */","map":{"version":3,"names":["ChannelType","MessageType","ComponentType","ImageFormat","StickerFormatType","require","exports","MaxBulkDeletableMessageAge","SweeperKeys","NonSystemMessageTypes","Default","Reply","ChatInputCommand","ContextMenuCommand","GuildTextBasedChannelTypes","GuildText","GuildAnnouncement","AnnouncementThread","PublicThread","PrivateThread","GuildVoice","GuildStageVoice","TextBasedChannelTypes","DM","ThreadChannelTypes","VoiceBasedChannelTypes","SelectMenuTypes","StringSelect","UserSelect","RoleSelect","MentionableSelect","ChannelSelect","DeletableMessageTypes","AutoModerationAction","ChannelFollowAdd","ChannelPinnedMessage","GuildBoost","GuildBoostTier1","GuildBoostTier2","GuildBoostTier3","GuildInviteReminder","InteractionPremiumUpsell","RoleSubscriptionPurchase","StageEnd","StageRaiseHand","StageSpeaker","StageStart","StageTopic","ThreadCreated","UserJoin","StickerFormatExtensionMap","PNG","APNG","Lottie","GIF"],"sources":["C:/Users/hetit/node_modules/discord.js/src/util/Constants.js"],"sourcesContent":["'use strict';\n\nconst { ChannelType, MessageType, ComponentType, ImageFormat, StickerFormatType } = require('discord-api-types/v10');\n\n/**\n * Max bulk deletable message age\n * @typedef {number} MaxBulkDeletableMessageAge\n */\nexports.MaxBulkDeletableMessageAge = 1_209_600_000;\n\n/**\n * The name of an item to be swept in Sweepers\n * * `autoModerationRules`\n * * `applicationCommands` - both global and guild commands\n * * `bans`\n * * `emojis`\n * * `invites` - accepts the `lifetime` property, using it will sweep based on expires timestamp\n * * `guildMembers`\n * * `messages` - accepts the `lifetime` property, using it will sweep based on edited or created timestamp\n * * `presences`\n * * `reactions`\n * * `stageInstances`\n * * `stickers`\n * * `threadMembers`\n * * `threads` - accepts the `lifetime` property, using it will sweep archived threads based on archived timestamp\n * * `users`\n * * `voiceStates`\n * @typedef {string} SweeperKey\n */\nexports.SweeperKeys = [\n  'autoModerationRules',\n  'applicationCommands',\n  'bans',\n  'emojis',\n  'invites',\n  'guildMembers',\n  'messages',\n  'presences',\n  'reactions',\n  'stageInstances',\n  'stickers',\n  'threadMembers',\n  'threads',\n  'users',\n  'voiceStates',\n];\n\n/**\n * The types of messages that are not `System`. The available types are:\n * * {@link MessageType.Default}\n * * {@link MessageType.Reply}\n * * {@link MessageType.ChatInputCommand}\n * * {@link MessageType.ContextMenuCommand}\n * @typedef {MessageType[]} NonSystemMessageTypes\n */\nexports.NonSystemMessageTypes = [\n  MessageType.Default,\n  MessageType.Reply,\n  MessageType.ChatInputCommand,\n  MessageType.ContextMenuCommand,\n];\n\n/**\n * The guild channels that are text-based.\n * * TextChannel\n * * NewsChannel\n * * ThreadChannel\n * * VoiceChannel\n * * StageChannel\n * @typedef {TextChannel|NewsChannel|ThreadChannel|VoiceChannel|StageChannel} GuildTextBasedChannel\n */\n\n/**\n * The types of guild channels that are text-based. The available types are:\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} GuildTextBasedChannelTypes\n */\nexports.GuildTextBasedChannelTypes = [\n  ChannelType.GuildText,\n  ChannelType.GuildAnnouncement,\n  ChannelType.AnnouncementThread,\n  ChannelType.PublicThread,\n  ChannelType.PrivateThread,\n  ChannelType.GuildVoice,\n  ChannelType.GuildStageVoice,\n];\n\n/**\n * The channels that are text-based.\n * * DMChannel\n * * GuildTextBasedChannel\n * @typedef {DMChannel|GuildTextBasedChannel} TextBasedChannels\n */\n\n/**\n * Data that resolves to give a text-based channel. This can be:\n * * A text-based channel\n * * A snowflake\n * @typedef {TextBasedChannels|Snowflake} TextBasedChannelsResolvable\n */\n\n/**\n * The types of channels that are text-based. The available types are:\n * * {@link ChannelType.DM}\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} TextBasedChannelTypes\n */\nexports.TextBasedChannelTypes = [...exports.GuildTextBasedChannelTypes, ChannelType.DM];\n\n/**\n * The types of channels that are threads. The available types are:\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * @typedef {ChannelType[]} ThreadChannelTypes\n */\nexports.ThreadChannelTypes = [ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread];\n\n/**\n * The types of channels that are voice-based. The available types are:\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} VoiceBasedChannelTypes\n */\nexports.VoiceBasedChannelTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];\n\n/**\n * The types of select menus. The available types are:\n * * {@link ComponentType.StringSelect}\n * * {@link ComponentType.UserSelect}\n * * {@link ComponentType.RoleSelect}\n * * {@link ComponentType.MentionableSelect}\n * * {@link ComponentType.ChannelSelect}\n * @typedef {ComponentType[]} SelectMenuTypes\n */\nexports.SelectMenuTypes = [\n  ComponentType.StringSelect,\n  ComponentType.UserSelect,\n  ComponentType.RoleSelect,\n  ComponentType.MentionableSelect,\n  ComponentType.ChannelSelect,\n];\n\n/**\n * The types of messages that can be deleted. The available types are:\n * * {@link MessageType.AutoModerationAction}\n * * {@link MessageType.ChannelFollowAdd}\n * * {@link MessageType.ChannelPinnedMessage}\n * * {@link MessageType.ChatInputCommand}\n * * {@link MessageType.ContextMenuCommand}\n * * {@link MessageType.Default}\n * * {@link MessageType.GuildBoost}\n * * {@link MessageType.GuildBoostTier1}\n * * {@link MessageType.GuildBoostTier2}\n * * {@link MessageType.GuildBoostTier3}\n * * {@link MessageType.GuildInviteReminder}\n * * {@link MessageType.InteractionPremiumUpsell}\n * * {@link MessageType.Reply}\n * * {@link MessageType.RoleSubscriptionPurchase}\n * * {@link MessageType.StageEnd}\n * * {@link MessageType.StageRaiseHand}\n * * {@link MessageType.StageSpeaker}\n * * {@link MessageType.StageStart}\n * * {@link MessageType.StageTopic}\n * * {@link MessageType.ThreadCreated}\n * * {@link MessageType.UserJoin}\n * @typedef {MessageType[]} DeletableMessageTypes\n */\nexports.DeletableMessageTypes = [\n  MessageType.AutoModerationAction,\n  MessageType.ChannelFollowAdd,\n  MessageType.ChannelPinnedMessage,\n  MessageType.ChatInputCommand,\n  MessageType.ContextMenuCommand,\n  MessageType.Default,\n  MessageType.GuildBoost,\n  MessageType.GuildBoostTier1,\n  MessageType.GuildBoostTier2,\n  MessageType.GuildBoostTier3,\n  MessageType.GuildInviteReminder,\n  MessageType.InteractionPremiumUpsell,\n  MessageType.Reply,\n  MessageType.RoleSubscriptionPurchase,\n  MessageType.StageEnd,\n  MessageType.StageRaiseHand,\n  MessageType.StageSpeaker,\n  MessageType.StageStart,\n  MessageType.StageTopic,\n  MessageType.ThreadCreated,\n  MessageType.UserJoin,\n];\n\n/**\n * A mapping between sticker formats and their respective image formats.\n * * {@link StickerFormatType.PNG} -> {@link ImageFormat.PNG}\n * * {@link StickerFormatType.APNG} -> {@link ImageFormat.PNG}\n * * {@link StickerFormatType.Lottie} -> {@link ImageFormat.Lottie}\n * * {@link StickerFormatType.GIF} -> {@link ImageFormat.GIF}\n * @typedef {Object} StickerFormatExtensionMap\n */\nexports.StickerFormatExtensionMap = {\n  [StickerFormatType.PNG]: ImageFormat.PNG,\n  [StickerFormatType.APNG]: ImageFormat.PNG,\n  [StickerFormatType.Lottie]: ImageFormat.Lottie,\n  [StickerFormatType.GIF]: ImageFormat.GIF,\n};\n\n/**\n * @typedef {Object} Constants Constants that can be used in an enum or object-like way.\n * @property {number} MaxBulkDeletableMessageAge Max bulk deletable message age\n * @property {SweeperKey[]} SweeperKeys The possible names of items that can be swept in sweepers\n * @property {NonSystemMessageTypes} NonSystemMessageTypes The types of messages that are not deemed a system type\n * @property {TextBasedChannelTypes} TextBasedChannelTypes The types of channels that are text-based\n * @property {ThreadChannelTypes} ThreadChannelTypes The types of channels that are threads\n * @property {VoiceBasedChannelTypes} VoiceBasedChannelTypes The types of channels that are voice-based\n * @property {SelectMenuTypes} SelectMenuTypes The types of components that are select menus.\n * @property {Object} StickerFormatExtensionMap A mapping between sticker formats and their respective image formats.\n */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,WAAW;EAAEC,WAAW;EAAEC,aAAa;EAAEC,WAAW;EAAEC;AAAkB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAEpH;AACA;AACA;AACA;AACAC,OAAO,CAACC,0BAA0B,GAAG,aAAa;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,OAAO,CAACE,WAAW,GAAG,CACpB,qBAAqB,EACrB,qBAAqB,EACrB,MAAM,EACN,QAAQ,EACR,SAAS,EACT,cAAc,EACd,UAAU,EACV,WAAW,EACX,WAAW,EACX,gBAAgB,EAChB,UAAU,EACV,eAAe,EACf,SAAS,EACT,OAAO,EACP,aAAa,CACd;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,qBAAqB,GAAG,CAC9BR,WAAW,CAACS,OAAO,EACnBT,WAAW,CAACU,KAAK,EACjBV,WAAW,CAACW,gBAAgB,EAC5BX,WAAW,CAACY,kBAAkB,CAC/B;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,OAAO,CAACQ,0BAA0B,GAAG,CACnCd,WAAW,CAACe,SAAS,EACrBf,WAAW,CAACgB,iBAAiB,EAC7BhB,WAAW,CAACiB,kBAAkB,EAC9BjB,WAAW,CAACkB,YAAY,EACxBlB,WAAW,CAACmB,aAAa,EACzBnB,WAAW,CAACoB,UAAU,EACtBpB,WAAW,CAACqB,eAAe,CAC5B;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,OAAO,CAACgB,qBAAqB,GAAG,CAAC,GAAGhB,OAAO,CAACQ,0BAA0B,EAAEd,WAAW,CAACuB,EAAE,CAAC;;AAEvF;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,OAAO,CAACkB,kBAAkB,GAAG,CAACxB,WAAW,CAACiB,kBAAkB,EAAEjB,WAAW,CAACkB,YAAY,EAAElB,WAAW,CAACmB,aAAa,CAAC;;AAElH;AACA;AACA;AACA;AACA;AACA;AACAb,OAAO,CAACmB,sBAAsB,GAAG,CAACzB,WAAW,CAACoB,UAAU,EAAEpB,WAAW,CAACqB,eAAe,CAAC;;AAEtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,OAAO,CAACoB,eAAe,GAAG,CACxBxB,aAAa,CAACyB,YAAY,EAC1BzB,aAAa,CAAC0B,UAAU,EACxB1B,aAAa,CAAC2B,UAAU,EACxB3B,aAAa,CAAC4B,iBAAiB,EAC/B5B,aAAa,CAAC6B,aAAa,CAC5B;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzB,OAAO,CAAC0B,qBAAqB,GAAG,CAC9B/B,WAAW,CAACgC,oBAAoB,EAChChC,WAAW,CAACiC,gBAAgB,EAC5BjC,WAAW,CAACkC,oBAAoB,EAChClC,WAAW,CAACW,gBAAgB,EAC5BX,WAAW,CAACY,kBAAkB,EAC9BZ,WAAW,CAACS,OAAO,EACnBT,WAAW,CAACmC,UAAU,EACtBnC,WAAW,CAACoC,eAAe,EAC3BpC,WAAW,CAACqC,eAAe,EAC3BrC,WAAW,CAACsC,eAAe,EAC3BtC,WAAW,CAACuC,mBAAmB,EAC/BvC,WAAW,CAACwC,wBAAwB,EACpCxC,WAAW,CAACU,KAAK,EACjBV,WAAW,CAACyC,wBAAwB,EACpCzC,WAAW,CAAC0C,QAAQ,EACpB1C,WAAW,CAAC2C,cAAc,EAC1B3C,WAAW,CAAC4C,YAAY,EACxB5C,WAAW,CAAC6C,UAAU,EACtB7C,WAAW,CAAC8C,UAAU,EACtB9C,WAAW,CAAC+C,aAAa,EACzB/C,WAAW,CAACgD,QAAQ,CACrB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3C,OAAO,CAAC4C,yBAAyB,GAAG;EAClC,CAAC9C,iBAAiB,CAAC+C,GAAG,GAAGhD,WAAW,CAACgD,GAAG;EACxC,CAAC/C,iBAAiB,CAACgD,IAAI,GAAGjD,WAAW,CAACgD,GAAG;EACzC,CAAC/C,iBAAiB,CAACiD,MAAM,GAAGlD,WAAW,CAACkD,MAAM;EAC9C,CAACjD,iBAAiB,CAACkD,GAAG,GAAGnD,WAAW,CAACmD;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}