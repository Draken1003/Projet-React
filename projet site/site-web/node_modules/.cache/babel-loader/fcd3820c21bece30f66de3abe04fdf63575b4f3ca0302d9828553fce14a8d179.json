{"ast":null,"code":"'use strict';\n\nconst {\n  ButtonBuilder: BuildersButton\n} = require('@discordjs/builders');\nconst {\n  isJSONEncodable\n} = require('@discordjs/util');\nconst {\n  toSnakeCase\n} = require('../util/Transformers');\nconst {\n  resolvePartialEmoji\n} = require('../util/Util');\n\n/**\n * Represents a button builder.\n * @extends {BuildersButton}\n */\nclass ButtonBuilder extends BuildersButton {\n  constructor({\n    emoji,\n    ...data\n  } = {}) {\n    super(toSnakeCase({\n      ...data,\n      emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji\n    }));\n  }\n\n  /**\n   * Sets the emoji to display on this button\n   * @param {string|APIMessageComponentEmoji} emoji The emoji to display on this button\n   * @returns {ButtonBuilder}\n   */\n  setEmoji(emoji) {\n    if (typeof emoji === 'string') {\n      return super.setEmoji(resolvePartialEmoji(emoji));\n    }\n    return super.setEmoji(emoji);\n  }\n\n  /**\n   * Creates a new button builder from JSON data\n   * @param {ButtonBuilder|ButtonComponent|APIButtonComponent} other The other data\n   * @returns {ButtonBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\nmodule.exports = ButtonBuilder;\n\n/**\n * @external BuildersButton\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ButtonBuilder:Class}\n */","map":{"version":3,"names":["ButtonBuilder","BuildersButton","require","isJSONEncodable","toSnakeCase","resolvePartialEmoji","constructor","emoji","data","setEmoji","from","other","toJSON","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/ButtonBuilder.js"],"sourcesContent":["'use strict';\n\nconst { ButtonBuilder: BuildersButton } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\nconst { resolvePartialEmoji } = require('../util/Util');\n\n/**\n * Represents a button builder.\n * @extends {BuildersButton}\n */\nclass ButtonBuilder extends BuildersButton {\n  constructor({ emoji, ...data } = {}) {\n    super(toSnakeCase({ ...data, emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji }));\n  }\n\n  /**\n   * Sets the emoji to display on this button\n   * @param {string|APIMessageComponentEmoji} emoji The emoji to display on this button\n   * @returns {ButtonBuilder}\n   */\n  setEmoji(emoji) {\n    if (typeof emoji === 'string') {\n      return super.setEmoji(resolvePartialEmoji(emoji));\n    }\n    return super.setEmoji(emoji);\n  }\n\n  /**\n   * Creates a new button builder from JSON data\n   * @param {ButtonBuilder|ButtonComponent|APIButtonComponent} other The other data\n   * @returns {ButtonBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = ButtonBuilder;\n\n/**\n * @external BuildersButton\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ButtonBuilder:Class}\n */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,aAAa,EAAEC;AAAe,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACxE,MAAM;EAAEC;AAAgB,CAAC,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACtD,MAAM;EAAEE;AAAY,CAAC,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AACvD,MAAM;EAAEG;AAAoB,CAAC,GAAGH,OAAO,CAAC,cAAc,CAAC;;AAEvD;AACA;AACA;AACA;AACA,MAAMF,aAAa,SAASC,cAAc,CAAC;EACzCK,WAAWA,CAAC;IAAEC,KAAK;IAAE,GAAGC;EAAK,CAAC,GAAG,CAAC,CAAC,EAAE;IACnC,KAAK,CAACJ,WAAW,CAAC;MAAE,GAAGI,IAAI;MAAED,KAAK,EAAEA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,GAAGF,mBAAmB,CAACE,KAAK,CAAC,GAAGA;IAAM,CAAC,CAAC,CAAC;EACjH;;EAEA;AACF;AACA;AACA;AACA;EACEE,QAAQA,CAACF,KAAK,EAAE;IACd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO,KAAK,CAACE,QAAQ,CAACJ,mBAAmB,CAACE,KAAK,CAAC,CAAC;IACnD;IACA,OAAO,KAAK,CAACE,QAAQ,CAACF,KAAK,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOG,IAAIA,CAACC,KAAK,EAAE;IACjB,OAAO,IAAI,IAAI,CAACR,eAAe,CAACQ,KAAK,CAAC,GAAGA,KAAK,CAACC,MAAM,CAAC,CAAC,GAAGD,KAAK,CAAC;EAClE;AACF;AAEAE,MAAM,CAACC,OAAO,GAAGd,aAAa;;AAE9B;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}