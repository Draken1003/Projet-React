{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  InteractionType\n} = require('discord-api-types/v10');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents an interaction's response\n */\nclass InteractionResponse {\n  constructor(interaction, id) {\n    /**\n     * The interaction associated with the interaction response\n     * @type {BaseInteraction}\n     */\n    this.interaction = interaction;\n    /**\n     * The id of the original interaction response\n     * @type {Snowflake}\n     */\n    this.id = id ?? interaction.id;\n    this.client = interaction.client;\n  }\n\n  /**\n   * The timestamp the interaction response was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the interaction response was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Collects a single component interaction that passes the filter.\n   * The Promise will reject if the time expires.\n   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector\n   * @returns {Promise<MessageComponentInteraction>}\n   */\n  awaitMessageComponent(options = {}) {\n    const _options = {\n      ...options,\n      max: 1\n    };\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageComponentCollector(_options);\n      collector.once('end', (interactions, reason) => {\n        const interaction = interactions.first();\n        if (interaction) resolve(interaction);else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));\n      });\n    });\n  }\n\n  /**\n   * Creates a message component interaction collector\n   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector\n   * @returns {InteractionCollector}\n   */\n  createMessageComponentCollector(options = {}) {\n    return new InteractionCollector(this.client, {\n      ...options,\n      interactionResponse: this,\n      interactionType: InteractionType.MessageComponent\n    });\n  }\n\n  /**\n   * Fetches the response as a {@link Message} object.\n   * @returns {Promise<Message>}\n   */\n  fetch() {\n    return this.interaction.fetchReply();\n  }\n\n  /**\n   * Deletes the response.\n   * @returns {Promise<void>}\n   */\n  delete() {\n    return this.interaction.deleteReply();\n  }\n\n  /**\n   * Edits the response.\n   * @param {string|MessagePayload|WebhookMessageEditOptions} options The new options for the response.\n   * @returns {Promise<Message>}\n   */\n  edit(options) {\n    return this.interaction.editReply(options);\n  }\n}\n\n// eslint-disable-next-line import/order\nconst InteractionCollector = require('./InteractionCollector');\nmodule.exports = InteractionResponse;","map":{"version":3,"names":["DiscordSnowflake","require","InteractionType","DiscordjsError","ErrorCodes","InteractionResponse","constructor","interaction","id","client","createdTimestamp","timestampFrom","createdAt","Date","awaitMessageComponent","options","_options","max","Promise","resolve","reject","collector","createMessageComponentCollector","once","interactions","reason","first","InteractionCollectorError","InteractionCollector","interactionResponse","interactionType","MessageComponent","fetch","fetchReply","delete","deleteReply","edit","editReply","module","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/InteractionResponse.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { InteractionType } = require('discord-api-types/v10');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents an interaction's response\n */\nclass InteractionResponse {\n  constructor(interaction, id) {\n    /**\n     * The interaction associated with the interaction response\n     * @type {BaseInteraction}\n     */\n    this.interaction = interaction;\n    /**\n     * The id of the original interaction response\n     * @type {Snowflake}\n     */\n    this.id = id ?? interaction.id;\n    this.client = interaction.client;\n  }\n\n  /**\n   * The timestamp the interaction response was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the interaction response was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Collects a single component interaction that passes the filter.\n   * The Promise will reject if the time expires.\n   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector\n   * @returns {Promise<MessageComponentInteraction>}\n   */\n  awaitMessageComponent(options = {}) {\n    const _options = { ...options, max: 1 };\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageComponentCollector(_options);\n      collector.once('end', (interactions, reason) => {\n        const interaction = interactions.first();\n        if (interaction) resolve(interaction);\n        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));\n      });\n    });\n  }\n\n  /**\n   * Creates a message component interaction collector\n   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector\n   * @returns {InteractionCollector}\n   */\n  createMessageComponentCollector(options = {}) {\n    return new InteractionCollector(this.client, {\n      ...options,\n      interactionResponse: this,\n      interactionType: InteractionType.MessageComponent,\n    });\n  }\n\n  /**\n   * Fetches the response as a {@link Message} object.\n   * @returns {Promise<Message>}\n   */\n  fetch() {\n    return this.interaction.fetchReply();\n  }\n\n  /**\n   * Deletes the response.\n   * @returns {Promise<void>}\n   */\n  delete() {\n    return this.interaction.deleteReply();\n  }\n\n  /**\n   * Edits the response.\n   * @param {string|MessagePayload|WebhookMessageEditOptions} options The new options for the response.\n   * @returns {Promise<Message>}\n   */\n  edit(options) {\n    return this.interaction.editReply(options);\n  }\n}\n\n// eslint-disable-next-line import/order\nconst InteractionCollector = require('./InteractionCollector');\nmodule.exports = InteractionResponse;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAiB,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC3D,MAAM;EAAEC;AAAgB,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAC5D,MAAM;EAAEE,cAAc;EAAEC;AAAW,CAAC,GAAGH,OAAO,CAAC,WAAW,CAAC;;AAE3D;AACA;AACA;AACA,MAAMI,mBAAmB,CAAC;EACxBC,WAAWA,CAACC,WAAW,EAAEC,EAAE,EAAE;IAC3B;AACJ;AACA;AACA;IACI,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B;AACJ;AACA;AACA;IACI,IAAI,CAACC,EAAE,GAAGA,EAAE,IAAID,WAAW,CAACC,EAAE;IAC9B,IAAI,CAACC,MAAM,GAAGF,WAAW,CAACE,MAAM;EAClC;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,gBAAgBA,CAAA,EAAG;IACrB,OAAOV,gBAAgB,CAACW,aAAa,CAAC,IAAI,CAACH,EAAE,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAII,SAASA,CAAA,EAAG;IACd,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEI,qBAAqBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAClC,MAAMC,QAAQ,GAAG;MAAE,GAAGD,OAAO;MAAEE,GAAG,EAAE;IAAE,CAAC;IACvC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,SAAS,GAAG,IAAI,CAACC,+BAA+B,CAACN,QAAQ,CAAC;MAChEK,SAAS,CAACE,IAAI,CAAC,KAAK,EAAE,CAACC,YAAY,EAAEC,MAAM,KAAK;QAC9C,MAAMlB,WAAW,GAAGiB,YAAY,CAACE,KAAK,CAAC,CAAC;QACxC,IAAInB,WAAW,EAAEY,OAAO,CAACZ,WAAW,CAAC,CAAC,KACjCa,MAAM,CAAC,IAAIjB,cAAc,CAACC,UAAU,CAACuB,yBAAyB,EAAEF,MAAM,CAAC,CAAC;MAC/E,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEH,+BAA+BA,CAACP,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5C,OAAO,IAAIa,oBAAoB,CAAC,IAAI,CAACnB,MAAM,EAAE;MAC3C,GAAGM,OAAO;MACVc,mBAAmB,EAAE,IAAI;MACzBC,eAAe,EAAE5B,eAAe,CAAC6B;IACnC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAACzB,WAAW,CAAC0B,UAAU,CAAC,CAAC;EACtC;;EAEA;AACF;AACA;AACA;EACEC,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAAC3B,WAAW,CAAC4B,WAAW,CAAC,CAAC;EACvC;;EAEA;AACF;AACA;AACA;AACA;EACEC,IAAIA,CAACrB,OAAO,EAAE;IACZ,OAAO,IAAI,CAACR,WAAW,CAAC8B,SAAS,CAACtB,OAAO,CAAC;EAC5C;AACF;;AAEA;AACA,MAAMa,oBAAoB,GAAG3B,OAAO,CAAC,wBAAwB,CAAC;AAC9DqC,MAAM,CAACC,OAAO,GAAGlC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}