{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst RoleFlagsBitField = require('../util/RoleFlagsBitField');\n\n/**\n * Represents a role on Discord.\n * @extends {Base}\n */\nclass Role extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The icon hash of the role\n     * @type {?string}\n     */\n    this.icon = null;\n\n    /**\n     * The unicode emoji for the role\n     * @type {?string}\n     */\n    this.unicodeEmoji = null;\n    if (data) this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The role's id (unique to the guild it is part of)\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('name' in data) {\n      /**\n       * The name of the role\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n    if ('color' in data) {\n      /**\n       * The base 10 color of the role\n       * @type {number}\n       */\n      this.color = data.color;\n    }\n    if ('hoist' in data) {\n      /**\n       * If true, users that are part of this role will appear in a separate category in the users list\n       * @type {boolean}\n       */\n      this.hoist = data.hoist;\n    }\n    if ('position' in data) {\n      /**\n       * The raw position of the role from the API\n       * @type {number}\n       */\n      this.rawPosition = data.position;\n    }\n    if ('permissions' in data) {\n      /**\n       * The permissions of the role\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.permissions = new PermissionsBitField(BigInt(data.permissions)).freeze();\n    }\n    if ('managed' in data) {\n      /**\n       * Whether or not the role is managed by an external service\n       * @type {boolean}\n       */\n      this.managed = data.managed;\n    }\n    if ('mentionable' in data) {\n      /**\n       * Whether or not the role can be mentioned by anyone\n       * @type {boolean}\n       */\n      this.mentionable = data.mentionable;\n    }\n    if ('icon' in data) this.icon = data.icon;\n    if ('unicode_emoji' in data) this.unicodeEmoji = data.unicode_emoji;\n    if ('flags' in data) {\n      /**\n       * The flags of this role\n       * @type {Readonly<RoleFlagsBitField>}\n       */\n      this.flags = new RoleFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new RoleFlagsBitField().freeze();\n    }\n\n    /**\n     * The tags this role has\n     * @type {?Object}\n     * @property {Snowflake} [botId] The id of the bot this role belongs to\n     * @property {Snowflake|string} [integrationId] The id of the integration this role belongs to\n     * @property {true} [premiumSubscriberRole] Whether this is the guild's premium subscription role\n     * @property {Snowflake} [subscriptionListingId] The id of this role's subscription SKU and listing\n     * @property {true} [availableForPurchase] Whether this role is available for purchase\n     * @property {true} [guildConnections] Whether this role is a guild's linked role\n     */\n    this.tags = data.tags ? {} : null;\n    if (data.tags) {\n      if ('bot_id' in data.tags) {\n        this.tags.botId = data.tags.bot_id;\n      }\n      if ('integration_id' in data.tags) {\n        this.tags.integrationId = data.tags.integration_id;\n      }\n      if ('premium_subscriber' in data.tags) {\n        this.tags.premiumSubscriberRole = true;\n      }\n      if ('subscription_listing_id' in data.tags) {\n        this.tags.subscriptionListingId = data.tags.subscription_listing_id;\n      }\n      if ('available_for_purchase' in data.tags) {\n        this.tags.availableForPurchase = true;\n      }\n      if ('guild_connections' in data.tags) {\n        this.tags.guildConnections = true;\n      }\n    }\n  }\n\n  /**\n   * The timestamp the role was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the role was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The hexadecimal version of the role color, with a leading hashtag\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    return `#${this.color.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * The cached guild members that have this role\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.id === this.guild.id ? this.guild.members.cache.clone() : this.guild.members.cache.filter(m => m._roles.includes(this.id));\n  }\n\n  /**\n   * Whether the role is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    if (this.managed) return false;\n    const clientMember = this.guild.members.resolve(this.client.user);\n    if (!clientMember.permissions.has(PermissionFlagsBits.ManageRoles)) return false;\n    return clientMember.roles.highest.comparePositionTo(this) > 0;\n  }\n\n  /**\n   * The position of the role in the role manager\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    return this.guild.roles.cache.reduce((acc, role) => acc + (this.rawPosition === role.rawPosition ? BigInt(this.id) > BigInt(role.id) : this.rawPosition > role.rawPosition), 0);\n  }\n\n  /**\n   * Compares this role's position to another role's.\n   * @param {RoleResolvable} role Role to compare to this one\n   * @returns {number} Negative number if this role's position is lower (other role's is higher),\n   * positive number if this one is higher (other's is lower), 0 if equal\n   * @example\n   * // Compare the position of a role to another\n   * const roleCompare = role.comparePositionTo(otherRole);\n   * if (roleCompare >= 1) console.log(`${role.name} is higher than ${otherRole.name}`);\n   */\n  comparePositionTo(role) {\n    return this.guild.roles.comparePositions(this, role);\n  }\n\n  /**\n   * The data for a role.\n   * @typedef {Object} RoleData\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   * @property {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} [icon] The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @property {?string} [unicodeEmoji] The unicode emoji for the role\n   */\n\n  /**\n   * Edits the role.\n   * @param {RoleEditOptions} options The options to provide\n   * @returns {Promise<Role>}\n   * @example\n   * // Edit a role\n   * role.edit({ name: 'new role' })\n   *   .then(updated => console.log(`Edited role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.roles.edit(this, options);\n  }\n\n  /**\n   * Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\n   * taking into account permission overwrites.\n   * @param {GuildChannel|Snowflake} channel The guild channel to use as context\n   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   */\n  permissionsIn(channel, checkAdmin = true) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    return channel.rolePermissions(this, checkAdmin);\n  }\n\n  /**\n   * Sets a new name for the role.\n   * @param {string} name The new name of the role\n   * @param {string} [reason] Reason for changing the role's name\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the name of the role\n   * role.setName('new role')\n   *   .then(updated => console.log(`Updated role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({\n      name,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new color for the role.\n   * @param {ColorResolvable} color The color of the role\n   * @param {string} [reason] Reason for changing the role's color\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the color of a role\n   * role.setColor('#FF0000')\n   *   .then(updated => console.log(`Set color of role to ${updated.color}`))\n   *   .catch(console.error);\n   */\n  setColor(color, reason) {\n    return this.edit({\n      color,\n      reason\n    });\n  }\n\n  /**\n   * Sets whether or not the role should be hoisted.\n   * @param {boolean} [hoist=true] Whether or not to hoist the role\n   * @param {string} [reason] Reason for setting whether or not the role should be hoisted\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the hoist of the role\n   * role.setHoist(true)\n   *   .then(updated => console.log(`Role hoisted: ${updated.hoist}`))\n   *   .catch(console.error);\n   */\n  setHoist(hoist = true, reason) {\n    return this.edit({\n      hoist,\n      reason\n    });\n  }\n\n  /**\n   * Sets the permissions of the role.\n   * @param {PermissionResolvable} permissions The permissions of the role\n   * @param {string} [reason] Reason for changing the role's permissions\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the permissions of the role\n   * role.setPermissions([PermissionFlagsBits.KickMembers, PermissionFlagsBits.BanMembers])\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove all permissions from a role\n   * role.setPermissions(0n)\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   */\n  setPermissions(permissions, reason) {\n    return this.edit({\n      permissions,\n      reason\n    });\n  }\n\n  /**\n   * Sets whether this role is mentionable.\n   * @param {boolean} [mentionable=true] Whether this role should be mentionable\n   * @param {string} [reason] Reason for setting whether or not this role should be mentionable\n   * @returns {Promise<Role>}\n   * @example\n   * // Make the role mentionable\n   * role.setMentionable(true)\n   *   .then(updated => console.log(`Role updated ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setMentionable(mentionable = true, reason) {\n    return this.edit({\n      mentionable,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new icon for the role.\n   * @param {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} icon The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @param {string} [reason] Reason for changing the role's icon\n   * @returns {Promise<Role>}\n   */\n  setIcon(icon, reason) {\n    return this.edit({\n      icon,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new unicode emoji for the role.\n   * @param {?string} unicodeEmoji The new unicode emoji for the role\n   * @param {string} [reason] Reason for changing the role's unicode emoji\n   * @returns {Promise<Role>}\n   * @example\n   * // Set a new unicode emoji for the role\n   * role.setUnicodeEmoji('🤖')\n   *   .then(updated => console.log(`Set unicode emoji for the role to ${updated.unicodeEmoji}`))\n   *   .catch(console.error);\n   */\n  setUnicodeEmoji(unicodeEmoji, reason) {\n    return this.edit({\n      unicodeEmoji,\n      reason\n    });\n  }\n\n  /**\n   * Options used to set the position of a role.\n   * @typedef {Object} SetRolePositionOptions\n   * @property {boolean} [relative=false] Whether to change the position relative to its current value or not\n   * @property {string} [reason] The reason for changing the position\n   */\n\n  /**\n   * Sets the new position of the role.\n   * @param {number} position The new position for the role\n   * @param {SetRolePositionOptions} [options] Options for setting the position\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the position of the role\n   * role.setPosition(1)\n   *   .then(updated => console.log(`Role position: ${updated.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, options = {}) {\n    return this.guild.roles.setPosition(this, position, options);\n  }\n\n  /**\n   * Deletes the role.\n   * @param {string} [reason] Reason for deleting this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Delete a role\n   * role.delete('The role needed to go')\n   *   .then(deleted => console.log(`Deleted role ${deleted.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.roles.delete(this.id, reason);\n    return this;\n  }\n\n  /**\n   * A link to the role's icon\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.roleIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * Whether this role equals another role. It compares all properties, so for most operations\n   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Role} role Role to compare with\n   * @returns {boolean}\n   */\n  equals(role) {\n    return role && this.id === role.id && this.name === role.name && this.color === role.color && this.hoist === role.hoist && this.position === role.position && this.permissions.bitfield === role.permissions.bitfield && this.managed === role.managed && this.icon === role.icon && this.unicodeEmoji === role.unicodeEmoji;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the role's mention instead of the Role object.\n   * @returns {string}\n   * @example\n   * // Logs: Role: <@&123456789012345678>\n   * console.log(`Role: ${role}`);\n   */\n  toString() {\n    if (this.id === this.guild.id) return '@everyone';\n    return `<@&${this.id}>`;\n  }\n  toJSON() {\n    return {\n      ...super.toJSON({\n        createdTimestamp: true\n      }),\n      permissions: this.permissions.toJSON()\n    };\n  }\n}\nexports.Role = Role;\n\n/**\n * @external APIRole\n * @see {@link https://discord.com/developers/docs/topics/permissions#role-object}\n */","map":{"version":3,"names":["DiscordSnowflake","require","PermissionFlagsBits","Base","DiscordjsError","ErrorCodes","PermissionsBitField","RoleFlagsBitField","Role","constructor","client","data","guild","icon","unicodeEmoji","_patch","id","name","color","hoist","rawPosition","position","permissions","BigInt","freeze","managed","mentionable","unicode_emoji","flags","tags","botId","bot_id","integrationId","integration_id","premiumSubscriberRole","subscriptionListingId","subscription_listing_id","availableForPurchase","guildConnections","createdTimestamp","timestampFrom","createdAt","Date","hexColor","toString","padStart","members","cache","clone","filter","m","_roles","includes","editable","clientMember","resolve","user","has","ManageRoles","roles","highest","comparePositionTo","reduce","acc","role","comparePositions","edit","options","permissionsIn","channel","checkAdmin","channels","GuildChannelResolve","rolePermissions","setName","reason","setColor","setHoist","setPermissions","setMentionable","setIcon","setUnicodeEmoji","setPosition","delete","iconURL","rest","cdn","roleIcon","equals","bitfield","toJSON","exports"],"sources":["C:/Users/hetit/node_modules/discord.js/src/structures/Role.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst RoleFlagsBitField = require('../util/RoleFlagsBitField');\n\n/**\n * Represents a role on Discord.\n * @extends {Base}\n */\nclass Role extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The icon hash of the role\n     * @type {?string}\n     */\n    this.icon = null;\n\n    /**\n     * The unicode emoji for the role\n     * @type {?string}\n     */\n    this.unicodeEmoji = null;\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The role's id (unique to the guild it is part of)\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('name' in data) {\n      /**\n       * The name of the role\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('color' in data) {\n      /**\n       * The base 10 color of the role\n       * @type {number}\n       */\n      this.color = data.color;\n    }\n\n    if ('hoist' in data) {\n      /**\n       * If true, users that are part of this role will appear in a separate category in the users list\n       * @type {boolean}\n       */\n      this.hoist = data.hoist;\n    }\n\n    if ('position' in data) {\n      /**\n       * The raw position of the role from the API\n       * @type {number}\n       */\n      this.rawPosition = data.position;\n    }\n\n    if ('permissions' in data) {\n      /**\n       * The permissions of the role\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.permissions = new PermissionsBitField(BigInt(data.permissions)).freeze();\n    }\n\n    if ('managed' in data) {\n      /**\n       * Whether or not the role is managed by an external service\n       * @type {boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if ('mentionable' in data) {\n      /**\n       * Whether or not the role can be mentioned by anyone\n       * @type {boolean}\n       */\n      this.mentionable = data.mentionable;\n    }\n\n    if ('icon' in data) this.icon = data.icon;\n\n    if ('unicode_emoji' in data) this.unicodeEmoji = data.unicode_emoji;\n\n    if ('flags' in data) {\n      /**\n       * The flags of this role\n       * @type {Readonly<RoleFlagsBitField>}\n       */\n      this.flags = new RoleFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new RoleFlagsBitField().freeze();\n    }\n\n    /**\n     * The tags this role has\n     * @type {?Object}\n     * @property {Snowflake} [botId] The id of the bot this role belongs to\n     * @property {Snowflake|string} [integrationId] The id of the integration this role belongs to\n     * @property {true} [premiumSubscriberRole] Whether this is the guild's premium subscription role\n     * @property {Snowflake} [subscriptionListingId] The id of this role's subscription SKU and listing\n     * @property {true} [availableForPurchase] Whether this role is available for purchase\n     * @property {true} [guildConnections] Whether this role is a guild's linked role\n     */\n    this.tags = data.tags ? {} : null;\n    if (data.tags) {\n      if ('bot_id' in data.tags) {\n        this.tags.botId = data.tags.bot_id;\n      }\n      if ('integration_id' in data.tags) {\n        this.tags.integrationId = data.tags.integration_id;\n      }\n      if ('premium_subscriber' in data.tags) {\n        this.tags.premiumSubscriberRole = true;\n      }\n      if ('subscription_listing_id' in data.tags) {\n        this.tags.subscriptionListingId = data.tags.subscription_listing_id;\n      }\n      if ('available_for_purchase' in data.tags) {\n        this.tags.availableForPurchase = true;\n      }\n      if ('guild_connections' in data.tags) {\n        this.tags.guildConnections = true;\n      }\n    }\n  }\n\n  /**\n   * The timestamp the role was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the role was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The hexadecimal version of the role color, with a leading hashtag\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    return `#${this.color.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * The cached guild members that have this role\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.id === this.guild.id\n      ? this.guild.members.cache.clone()\n      : this.guild.members.cache.filter(m => m._roles.includes(this.id));\n  }\n\n  /**\n   * Whether the role is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    if (this.managed) return false;\n    const clientMember = this.guild.members.resolve(this.client.user);\n    if (!clientMember.permissions.has(PermissionFlagsBits.ManageRoles)) return false;\n    return clientMember.roles.highest.comparePositionTo(this) > 0;\n  }\n\n  /**\n   * The position of the role in the role manager\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    return this.guild.roles.cache.reduce(\n      (acc, role) =>\n        acc +\n        (this.rawPosition === role.rawPosition\n          ? BigInt(this.id) > BigInt(role.id)\n          : this.rawPosition > role.rawPosition),\n      0,\n    );\n  }\n\n  /**\n   * Compares this role's position to another role's.\n   * @param {RoleResolvable} role Role to compare to this one\n   * @returns {number} Negative number if this role's position is lower (other role's is higher),\n   * positive number if this one is higher (other's is lower), 0 if equal\n   * @example\n   * // Compare the position of a role to another\n   * const roleCompare = role.comparePositionTo(otherRole);\n   * if (roleCompare >= 1) console.log(`${role.name} is higher than ${otherRole.name}`);\n   */\n  comparePositionTo(role) {\n    return this.guild.roles.comparePositions(this, role);\n  }\n\n  /**\n   * The data for a role.\n   * @typedef {Object} RoleData\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   * @property {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} [icon] The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @property {?string} [unicodeEmoji] The unicode emoji for the role\n   */\n\n  /**\n   * Edits the role.\n   * @param {RoleEditOptions} options The options to provide\n   * @returns {Promise<Role>}\n   * @example\n   * // Edit a role\n   * role.edit({ name: 'new role' })\n   *   .then(updated => console.log(`Edited role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.roles.edit(this, options);\n  }\n\n  /**\n   * Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\n   * taking into account permission overwrites.\n   * @param {GuildChannel|Snowflake} channel The guild channel to use as context\n   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   */\n  permissionsIn(channel, checkAdmin = true) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    return channel.rolePermissions(this, checkAdmin);\n  }\n\n  /**\n   * Sets a new name for the role.\n   * @param {string} name The new name of the role\n   * @param {string} [reason] Reason for changing the role's name\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the name of the role\n   * role.setName('new role')\n   *   .then(updated => console.log(`Updated role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Sets a new color for the role.\n   * @param {ColorResolvable} color The color of the role\n   * @param {string} [reason] Reason for changing the role's color\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the color of a role\n   * role.setColor('#FF0000')\n   *   .then(updated => console.log(`Set color of role to ${updated.color}`))\n   *   .catch(console.error);\n   */\n  setColor(color, reason) {\n    return this.edit({ color, reason });\n  }\n\n  /**\n   * Sets whether or not the role should be hoisted.\n   * @param {boolean} [hoist=true] Whether or not to hoist the role\n   * @param {string} [reason] Reason for setting whether or not the role should be hoisted\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the hoist of the role\n   * role.setHoist(true)\n   *   .then(updated => console.log(`Role hoisted: ${updated.hoist}`))\n   *   .catch(console.error);\n   */\n  setHoist(hoist = true, reason) {\n    return this.edit({ hoist, reason });\n  }\n\n  /**\n   * Sets the permissions of the role.\n   * @param {PermissionResolvable} permissions The permissions of the role\n   * @param {string} [reason] Reason for changing the role's permissions\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the permissions of the role\n   * role.setPermissions([PermissionFlagsBits.KickMembers, PermissionFlagsBits.BanMembers])\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove all permissions from a role\n   * role.setPermissions(0n)\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   */\n  setPermissions(permissions, reason) {\n    return this.edit({ permissions, reason });\n  }\n\n  /**\n   * Sets whether this role is mentionable.\n   * @param {boolean} [mentionable=true] Whether this role should be mentionable\n   * @param {string} [reason] Reason for setting whether or not this role should be mentionable\n   * @returns {Promise<Role>}\n   * @example\n   * // Make the role mentionable\n   * role.setMentionable(true)\n   *   .then(updated => console.log(`Role updated ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setMentionable(mentionable = true, reason) {\n    return this.edit({ mentionable, reason });\n  }\n\n  /**\n   * Sets a new icon for the role.\n   * @param {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} icon The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @param {string} [reason] Reason for changing the role's icon\n   * @returns {Promise<Role>}\n   */\n  setIcon(icon, reason) {\n    return this.edit({ icon, reason });\n  }\n\n  /**\n   * Sets a new unicode emoji for the role.\n   * @param {?string} unicodeEmoji The new unicode emoji for the role\n   * @param {string} [reason] Reason for changing the role's unicode emoji\n   * @returns {Promise<Role>}\n   * @example\n   * // Set a new unicode emoji for the role\n   * role.setUnicodeEmoji('🤖')\n   *   .then(updated => console.log(`Set unicode emoji for the role to ${updated.unicodeEmoji}`))\n   *   .catch(console.error);\n   */\n  setUnicodeEmoji(unicodeEmoji, reason) {\n    return this.edit({ unicodeEmoji, reason });\n  }\n\n  /**\n   * Options used to set the position of a role.\n   * @typedef {Object} SetRolePositionOptions\n   * @property {boolean} [relative=false] Whether to change the position relative to its current value or not\n   * @property {string} [reason] The reason for changing the position\n   */\n\n  /**\n   * Sets the new position of the role.\n   * @param {number} position The new position for the role\n   * @param {SetRolePositionOptions} [options] Options for setting the position\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the position of the role\n   * role.setPosition(1)\n   *   .then(updated => console.log(`Role position: ${updated.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, options = {}) {\n    return this.guild.roles.setPosition(this, position, options);\n  }\n\n  /**\n   * Deletes the role.\n   * @param {string} [reason] Reason for deleting this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Delete a role\n   * role.delete('The role needed to go')\n   *   .then(deleted => console.log(`Deleted role ${deleted.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.roles.delete(this.id, reason);\n    return this;\n  }\n\n  /**\n   * A link to the role's icon\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.roleIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * Whether this role equals another role. It compares all properties, so for most operations\n   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Role} role Role to compare with\n   * @returns {boolean}\n   */\n  equals(role) {\n    return (\n      role &&\n      this.id === role.id &&\n      this.name === role.name &&\n      this.color === role.color &&\n      this.hoist === role.hoist &&\n      this.position === role.position &&\n      this.permissions.bitfield === role.permissions.bitfield &&\n      this.managed === role.managed &&\n      this.icon === role.icon &&\n      this.unicodeEmoji === role.unicodeEmoji\n    );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the role's mention instead of the Role object.\n   * @returns {string}\n   * @example\n   * // Logs: Role: <@&123456789012345678>\n   * console.log(`Role: ${role}`);\n   */\n  toString() {\n    if (this.id === this.guild.id) return '@everyone';\n    return `<@&${this.id}>`;\n  }\n\n  toJSON() {\n    return {\n      ...super.toJSON({ createdTimestamp: true }),\n      permissions: this.permissions.toJSON(),\n    };\n  }\n}\n\nexports.Role = Role;\n\n/**\n * @external APIRole\n * @see {@link https://discord.com/developers/docs/topics/permissions#role-object}\n */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAiB,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC3D,MAAM;EAAEC;AAAoB,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAChE,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAM;EAAEG,cAAc;EAAEC;AAAW,CAAC,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAC3D,MAAMK,mBAAmB,GAAGL,OAAO,CAAC,6BAA6B,CAAC;AAClE,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,2BAA2B,CAAC;;AAE9D;AACA;AACA;AACA;AACA,MAAMO,IAAI,SAASL,IAAI,CAAC;EACtBM,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC/B,KAAK,CAACF,MAAM,CAAC;;IAEb;AACJ;AACA;AACA;IACI,IAAI,CAACE,KAAK,GAAGA,KAAK;;IAElB;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAG,IAAI;;IAEhB;AACJ;AACA;AACA;IACI,IAAI,CAACC,YAAY,GAAG,IAAI;IAExB,IAAIH,IAAI,EAAE,IAAI,CAACI,MAAM,CAACJ,IAAI,CAAC;EAC7B;EAEAI,MAAMA,CAACJ,IAAI,EAAE;IACX;AACJ;AACA;AACA;IACI,IAAI,CAACK,EAAE,GAAGL,IAAI,CAACK,EAAE;IACjB,IAAI,MAAM,IAAIL,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACM,IAAI;IACvB;IAEA,IAAI,OAAO,IAAIN,IAAI,EAAE;MACnB;AACN;AACA;AACA;MACM,IAAI,CAACO,KAAK,GAAGP,IAAI,CAACO,KAAK;IACzB;IAEA,IAAI,OAAO,IAAIP,IAAI,EAAE;MACnB;AACN;AACA;AACA;MACM,IAAI,CAACQ,KAAK,GAAGR,IAAI,CAACQ,KAAK;IACzB;IAEA,IAAI,UAAU,IAAIR,IAAI,EAAE;MACtB;AACN;AACA;AACA;MACM,IAAI,CAACS,WAAW,GAAGT,IAAI,CAACU,QAAQ;IAClC;IAEA,IAAI,aAAa,IAAIV,IAAI,EAAE;MACzB;AACN;AACA;AACA;MACM,IAAI,CAACW,WAAW,GAAG,IAAIhB,mBAAmB,CAACiB,MAAM,CAACZ,IAAI,CAACW,WAAW,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC;IAC/E;IAEA,IAAI,SAAS,IAAIb,IAAI,EAAE;MACrB;AACN;AACA;AACA;MACM,IAAI,CAACc,OAAO,GAAGd,IAAI,CAACc,OAAO;IAC7B;IAEA,IAAI,aAAa,IAAId,IAAI,EAAE;MACzB;AACN;AACA;AACA;MACM,IAAI,CAACe,WAAW,GAAGf,IAAI,CAACe,WAAW;IACrC;IAEA,IAAI,MAAM,IAAIf,IAAI,EAAE,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACE,IAAI;IAEzC,IAAI,eAAe,IAAIF,IAAI,EAAE,IAAI,CAACG,YAAY,GAAGH,IAAI,CAACgB,aAAa;IAEnE,IAAI,OAAO,IAAIhB,IAAI,EAAE;MACnB;AACN;AACA;AACA;MACM,IAAI,CAACiB,KAAK,GAAG,IAAIrB,iBAAiB,CAACI,IAAI,CAACiB,KAAK,CAAC,CAACJ,MAAM,CAAC,CAAC;IACzD,CAAC,MAAM;MACL,IAAI,CAACI,KAAK,KAAK,IAAIrB,iBAAiB,CAAC,CAAC,CAACiB,MAAM,CAAC,CAAC;IACjD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACK,IAAI,GAAGlB,IAAI,CAACkB,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI;IACjC,IAAIlB,IAAI,CAACkB,IAAI,EAAE;MACb,IAAI,QAAQ,IAAIlB,IAAI,CAACkB,IAAI,EAAE;QACzB,IAAI,CAACA,IAAI,CAACC,KAAK,GAAGnB,IAAI,CAACkB,IAAI,CAACE,MAAM;MACpC;MACA,IAAI,gBAAgB,IAAIpB,IAAI,CAACkB,IAAI,EAAE;QACjC,IAAI,CAACA,IAAI,CAACG,aAAa,GAAGrB,IAAI,CAACkB,IAAI,CAACI,cAAc;MACpD;MACA,IAAI,oBAAoB,IAAItB,IAAI,CAACkB,IAAI,EAAE;QACrC,IAAI,CAACA,IAAI,CAACK,qBAAqB,GAAG,IAAI;MACxC;MACA,IAAI,yBAAyB,IAAIvB,IAAI,CAACkB,IAAI,EAAE;QAC1C,IAAI,CAACA,IAAI,CAACM,qBAAqB,GAAGxB,IAAI,CAACkB,IAAI,CAACO,uBAAuB;MACrE;MACA,IAAI,wBAAwB,IAAIzB,IAAI,CAACkB,IAAI,EAAE;QACzC,IAAI,CAACA,IAAI,CAACQ,oBAAoB,GAAG,IAAI;MACvC;MACA,IAAI,mBAAmB,IAAI1B,IAAI,CAACkB,IAAI,EAAE;QACpC,IAAI,CAACA,IAAI,CAACS,gBAAgB,GAAG,IAAI;MACnC;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,gBAAgBA,CAAA,EAAG;IACrB,OAAOvC,gBAAgB,CAACwC,aAAa,CAAC,IAAI,CAACxB,EAAE,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIyB,SAASA,CAAA,EAAG;IACd,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAII,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,IAAI,CAACzB,KAAK,CAAC0B,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EACvD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC9B,EAAE,KAAK,IAAI,CAACJ,KAAK,CAACI,EAAE,GAC5B,IAAI,CAACJ,KAAK,CAACkC,OAAO,CAACC,KAAK,CAACC,KAAK,CAAC,CAAC,GAChC,IAAI,CAACpC,KAAK,CAACkC,OAAO,CAACC,KAAK,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAACC,QAAQ,CAAC,IAAI,CAACpC,EAAE,CAAC,CAAC;EACtE;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIqC,QAAQA,CAAA,EAAG;IACb,IAAI,IAAI,CAAC5B,OAAO,EAAE,OAAO,KAAK;IAC9B,MAAM6B,YAAY,GAAG,IAAI,CAAC1C,KAAK,CAACkC,OAAO,CAACS,OAAO,CAAC,IAAI,CAAC7C,MAAM,CAAC8C,IAAI,CAAC;IACjE,IAAI,CAACF,YAAY,CAAChC,WAAW,CAACmC,GAAG,CAACvD,mBAAmB,CAACwD,WAAW,CAAC,EAAE,OAAO,KAAK;IAChF,OAAOJ,YAAY,CAACK,KAAK,CAACC,OAAO,CAACC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIxC,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAACT,KAAK,CAAC+C,KAAK,CAACZ,KAAK,CAACe,MAAM,CAClC,CAACC,GAAG,EAAEC,IAAI,KACRD,GAAG,IACF,IAAI,CAAC3C,WAAW,KAAK4C,IAAI,CAAC5C,WAAW,GAClCG,MAAM,CAAC,IAAI,CAACP,EAAE,CAAC,GAAGO,MAAM,CAACyC,IAAI,CAAChD,EAAE,CAAC,GACjC,IAAI,CAACI,WAAW,GAAG4C,IAAI,CAAC5C,WAAW,CAAC,EAC1C,CACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyC,iBAAiBA,CAACG,IAAI,EAAE;IACtB,OAAO,IAAI,CAACpD,KAAK,CAAC+C,KAAK,CAACM,gBAAgB,CAAC,IAAI,EAAED,IAAI,CAAC;EACtD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,IAAIA,CAACC,OAAO,EAAE;IACZ,OAAO,IAAI,CAACvD,KAAK,CAAC+C,KAAK,CAACO,IAAI,CAAC,IAAI,EAAEC,OAAO,CAAC;EAC7C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,aAAaA,CAACC,OAAO,EAAEC,UAAU,GAAG,IAAI,EAAE;IACxCD,OAAO,GAAG,IAAI,CAACzD,KAAK,CAAC2D,QAAQ,CAAChB,OAAO,CAACc,OAAO,CAAC;IAC9C,IAAI,CAACA,OAAO,EAAE,MAAM,IAAIjE,cAAc,CAACC,UAAU,CAACmE,mBAAmB,CAAC;IACtE,OAAOH,OAAO,CAACI,eAAe,CAAC,IAAI,EAAEH,UAAU,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,OAAOA,CAACzD,IAAI,EAAE0D,MAAM,EAAE;IACpB,OAAO,IAAI,CAACT,IAAI,CAAC;MAAEjD,IAAI;MAAE0D;IAAO,CAAC,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQA,CAAC1D,KAAK,EAAEyD,MAAM,EAAE;IACtB,OAAO,IAAI,CAACT,IAAI,CAAC;MAAEhD,KAAK;MAAEyD;IAAO,CAAC,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,QAAQA,CAAC1D,KAAK,GAAG,IAAI,EAAEwD,MAAM,EAAE;IAC7B,OAAO,IAAI,CAACT,IAAI,CAAC;MAAE/C,KAAK;MAAEwD;IAAO,CAAC,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,cAAcA,CAACxD,WAAW,EAAEqD,MAAM,EAAE;IAClC,OAAO,IAAI,CAACT,IAAI,CAAC;MAAE5C,WAAW;MAAEqD;IAAO,CAAC,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,cAAcA,CAACrD,WAAW,GAAG,IAAI,EAAEiD,MAAM,EAAE;IACzC,OAAO,IAAI,CAACT,IAAI,CAAC;MAAExC,WAAW;MAAEiD;IAAO,CAAC,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,OAAOA,CAACnE,IAAI,EAAE8D,MAAM,EAAE;IACpB,OAAO,IAAI,CAACT,IAAI,CAAC;MAAErD,IAAI;MAAE8D;IAAO,CAAC,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,eAAeA,CAACnE,YAAY,EAAE6D,MAAM,EAAE;IACpC,OAAO,IAAI,CAACT,IAAI,CAAC;MAAEpD,YAAY;MAAE6D;IAAO,CAAC,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,WAAWA,CAAC7D,QAAQ,EAAE8C,OAAO,GAAG,CAAC,CAAC,EAAE;IAClC,OAAO,IAAI,CAACvD,KAAK,CAAC+C,KAAK,CAACuB,WAAW,CAAC,IAAI,EAAE7D,QAAQ,EAAE8C,OAAO,CAAC;EAC9D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMgB,MAAMA,CAACR,MAAM,EAAE;IACnB,MAAM,IAAI,CAAC/D,KAAK,CAAC+C,KAAK,CAACwB,MAAM,CAAC,IAAI,CAACnE,EAAE,EAAE2D,MAAM,CAAC;IAC9C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACES,OAAOA,CAACjB,OAAO,GAAG,CAAC,CAAC,EAAE;IACpB,OAAO,IAAI,CAACtD,IAAI,IAAI,IAAI,CAACH,MAAM,CAAC2E,IAAI,CAACC,GAAG,CAACC,QAAQ,CAAC,IAAI,CAACvE,EAAE,EAAE,IAAI,CAACH,IAAI,EAAEsD,OAAO,CAAC;EAChF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEqB,MAAMA,CAACxB,IAAI,EAAE;IACX,OACEA,IAAI,IACJ,IAAI,CAAChD,EAAE,KAAKgD,IAAI,CAAChD,EAAE,IACnB,IAAI,CAACC,IAAI,KAAK+C,IAAI,CAAC/C,IAAI,IACvB,IAAI,CAACC,KAAK,KAAK8C,IAAI,CAAC9C,KAAK,IACzB,IAAI,CAACC,KAAK,KAAK6C,IAAI,CAAC7C,KAAK,IACzB,IAAI,CAACE,QAAQ,KAAK2C,IAAI,CAAC3C,QAAQ,IAC/B,IAAI,CAACC,WAAW,CAACmE,QAAQ,KAAKzB,IAAI,CAAC1C,WAAW,CAACmE,QAAQ,IACvD,IAAI,CAAChE,OAAO,KAAKuC,IAAI,CAACvC,OAAO,IAC7B,IAAI,CAACZ,IAAI,KAAKmD,IAAI,CAACnD,IAAI,IACvB,IAAI,CAACC,YAAY,KAAKkD,IAAI,CAAClD,YAAY;EAE3C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE8B,QAAQA,CAAA,EAAG;IACT,IAAI,IAAI,CAAC5B,EAAE,KAAK,IAAI,CAACJ,KAAK,CAACI,EAAE,EAAE,OAAO,WAAW;IACjD,OAAO,MAAM,IAAI,CAACA,EAAE,GAAG;EACzB;EAEA0E,MAAMA,CAAA,EAAG;IACP,OAAO;MACL,GAAG,KAAK,CAACA,MAAM,CAAC;QAAEnD,gBAAgB,EAAE;MAAK,CAAC,CAAC;MAC3CjB,WAAW,EAAE,IAAI,CAACA,WAAW,CAACoE,MAAM,CAAC;IACvC,CAAC;EACH;AACF;AAEAC,OAAO,CAACnF,IAAI,GAAGA,IAAI;;AAEnB;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}